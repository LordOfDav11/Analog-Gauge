
Gauges.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005528  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fa4  08005638  08005638  00015638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065dc  080065dc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080065dc  080065dc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065dc  080065dc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065dc  080065dc  000165dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065e0  080065e0  000165e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080065e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000078  0800665c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  0800665c  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2ae  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a1c  00000000  00000000  0002a34f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000800  00000000  00000000  0002bd70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000748  00000000  00000000  0002c570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014a3b  00000000  00000000  0002ccb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d08  00000000  00000000  000416f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006bc15  00000000  00000000  000493fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5010  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002884  00000000  00000000  000b508c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08005620 	.word	0x08005620

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08005620 	.word	0x08005620

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	d1ed      	bne.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_f2iz>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800109c:	d30f      	bcc.n	80010be <__aeabi_f2iz+0x2a>
 800109e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a6:	d90d      	bls.n	80010c4 <__aeabi_f2iz+0x30>
 80010a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010b0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	bf18      	it	ne
 80010ba:	4240      	negne	r0, r0
 80010bc:	4770      	bx	lr
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010c8:	d101      	bne.n	80010ce <__aeabi_f2iz+0x3a>
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	d105      	bne.n	80010da <__aeabi_f2iz+0x46>
 80010ce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010d2:	bf08      	it	eq
 80010d4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr

080010e0 <__aeabi_f2uiz>:
 80010e0:	0042      	lsls	r2, r0, #1
 80010e2:	d20e      	bcs.n	8001102 <__aeabi_f2uiz+0x22>
 80010e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e8:	d30b      	bcc.n	8001102 <__aeabi_f2uiz+0x22>
 80010ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f2:	d409      	bmi.n	8001108 <__aeabi_f2uiz+0x28>
 80010f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010fc:	fa23 f002 	lsr.w	r0, r3, r2
 8001100:	4770      	bx	lr
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	4770      	bx	lr
 8001108:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800110c:	d101      	bne.n	8001112 <__aeabi_f2uiz+0x32>
 800110e:	0242      	lsls	r2, r0, #9
 8001110:	d102      	bne.n	8001118 <__aeabi_f2uiz+0x38>
 8001112:	f04f 30ff 	mov.w	r0, #4294967295
 8001116:	4770      	bx	lr
 8001118:	f04f 0000 	mov.w	r0, #0
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <to_int>:

#include 	"gauge.h"


int8_t to_int( float value)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	value += 0.5;
 8001128:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff fce3 	bl	8000af8 <__addsf3>
 8001132:	4603      	mov	r3, r0
 8001134:	607b      	str	r3, [r7, #4]
	return (int8_t)value;
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffac 	bl	8001094 <__aeabi_f2iz>
 800113c:	4603      	mov	r3, r0
 800113e:	b25b      	sxtb	r3, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <to_uint>:

uint8_t to_uint( float value)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	value += 0.5;
 8001150:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff fccf 	bl	8000af8 <__addsf3>
 800115a:	4603      	mov	r3, r0
 800115c:	607b      	str	r3, [r7, #4]
	return (uint8_t)value;
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffbe 	bl	80010e0 <__aeabi_f2uiz>
 8001164:	4603      	mov	r3, r0
 8001166:	b2db      	uxtb	r3, r3
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <Gauge_DrawInnerArc>:

void Gauge_DrawInnerArc(Gauge_type* theGauge)
{
 8001170:	b5b0      	push	{r4, r5, r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	float Y;
	float X;
	float Alfa;
	float to_deg = PI / 180;
 8001178:	4b4b      	ldr	r3, [pc, #300]	; (80012a8 <Gauge_DrawInnerArc+0x138>)
 800117a:	617b      	str	r3, [r7, #20]
	int8_t	prevY;
	int8_t	prevX;

	for ( Alfa = 0; Alfa <= 180; Alfa += 1)
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	e085      	b.n	8001290 <Gauge_DrawInnerArc+0x120>
	{
		Y = (theGauge->RadiusIn - 2) * sin(Alfa * to_deg);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	789b      	ldrb	r3, [r3, #2]
 8001188:	3b02      	subs	r3, #2
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f932 	bl	80003f4 <__aeabi_i2d>
 8001190:	4604      	mov	r4, r0
 8001192:	460d      	mov	r5, r1
 8001194:	6979      	ldr	r1, [r7, #20]
 8001196:	69f8      	ldr	r0, [r7, #28]
 8001198:	f7ff fdb6 	bl	8000d08 <__aeabi_fmul>
 800119c:	4603      	mov	r3, r0
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f93a 	bl	8000418 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f002 fe08 	bl	8003dc0 <sin>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4620      	mov	r0, r4
 80011b6:	4629      	mov	r1, r5
 80011b8:	f7ff f986 	bl	80004c8 <__aeabi_dmul>
 80011bc:	4603      	mov	r3, r0
 80011be:	460c      	mov	r4, r1
 80011c0:	4618      	mov	r0, r3
 80011c2:	4621      	mov	r1, r4
 80011c4:	f7ff fc42 	bl	8000a4c <__aeabi_d2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	613b      	str	r3, [r7, #16]
		X = (theGauge->RadiusIn - 2) * cos(Alfa * to_deg);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	789b      	ldrb	r3, [r3, #2]
 80011d0:	3b02      	subs	r3, #2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f90e 	bl	80003f4 <__aeabi_i2d>
 80011d8:	4604      	mov	r4, r0
 80011da:	460d      	mov	r5, r1
 80011dc:	6979      	ldr	r1, [r7, #20]
 80011de:	69f8      	ldr	r0, [r7, #28]
 80011e0:	f7ff fd92 	bl	8000d08 <__aeabi_fmul>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f916 	bl	8000418 <__aeabi_f2d>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f002 fdae 	bl	8003d54 <cos>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4620      	mov	r0, r4
 80011fe:	4629      	mov	r1, r5
 8001200:	f7ff f962 	bl	80004c8 <__aeabi_dmul>
 8001204:	4603      	mov	r3, r0
 8001206:	460c      	mov	r4, r1
 8001208:	4618      	mov	r0, r3
 800120a:	4621      	mov	r1, r4
 800120c:	f7ff fc1e 	bl	8000a4c <__aeabi_d2f>
 8001210:	4603      	mov	r3, r0
 8001212:	60fb      	str	r3, [r7, #12]

		if ( !(prevX == to_int(X) && prevY == to_int(Y)) ) // ** skip drawing same pixels
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f7ff ff83 	bl	8001120 <to_int>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001222:	4293      	cmp	r3, r2
 8001224:	d108      	bne.n	8001238 <Gauge_DrawInnerArc+0xc8>
 8001226:	6938      	ldr	r0, [r7, #16]
 8001228:	f7ff ff7a 	bl	8001120 <to_int>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001234:	4293      	cmp	r3, r2
 8001236:	d024      	beq.n	8001282 <Gauge_DrawInnerArc+0x112>
		{
			SSD1306_DrawPixel(theGauge->Center_X - to_int(X), theGauge->Center_Y - to_int(Y), 0x01);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b21c      	sxth	r4, r3
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff ff6e 	bl	8001120 <to_int>
 8001244:	4603      	mov	r3, r0
 8001246:	b21b      	sxth	r3, r3
 8001248:	1ae3      	subs	r3, r4, r3
 800124a:	b21b      	sxth	r3, r3
 800124c:	b29d      	uxth	r5, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	785b      	ldrb	r3, [r3, #1]
 8001252:	b21c      	sxth	r4, r3
 8001254:	6938      	ldr	r0, [r7, #16]
 8001256:	f7ff ff63 	bl	8001120 <to_int>
 800125a:	4603      	mov	r3, r0
 800125c:	b21b      	sxth	r3, r3
 800125e:	1ae3      	subs	r3, r4, r3
 8001260:	b21b      	sxth	r3, r3
 8001262:	b29b      	uxth	r3, r3
 8001264:	2201      	movs	r2, #1
 8001266:	4619      	mov	r1, r3
 8001268:	4628      	mov	r0, r5
 800126a:	f000 fe35 	bl	8001ed8 <SSD1306_DrawPixel>
			prevX = to_int(X);
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff ff56 	bl	8001120 <to_int>
 8001274:	4603      	mov	r3, r0
 8001276:	76bb      	strb	r3, [r7, #26]
			prevY = to_int(Y);
 8001278:	6938      	ldr	r0, [r7, #16]
 800127a:	f7ff ff51 	bl	8001120 <to_int>
 800127e:	4603      	mov	r3, r0
 8001280:	76fb      	strb	r3, [r7, #27]
	for ( Alfa = 0; Alfa <= 180; Alfa += 1)
 8001282:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001286:	69f8      	ldr	r0, [r7, #28]
 8001288:	f7ff fc36 	bl	8000af8 <__addsf3>
 800128c:	4603      	mov	r3, r0
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	4906      	ldr	r1, [pc, #24]	; (80012ac <Gauge_DrawInnerArc+0x13c>)
 8001292:	69f8      	ldr	r0, [r7, #28]
 8001294:	f7ff fee0 	bl	8001058 <__aeabi_fcmple>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	f47f af72 	bne.w	8001184 <Gauge_DrawInnerArc+0x14>
		}
	}
}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bdb0      	pop	{r4, r5, r7, pc}
 80012a8:	3c8efa35 	.word	0x3c8efa35
 80012ac:	43340000 	.word	0x43340000

080012b0 <Gauge_ValuePct>:


void Gauge_ValuePct(uint8_t Value, uint8_t DrawNow, Gauge_type* theGauge)
{
 80012b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b4:	b08a      	sub	sp, #40	; 0x28
 80012b6:	af02      	add	r7, sp, #8
 80012b8:	4603      	mov	r3, r0
 80012ba:	603a      	str	r2, [r7, #0]
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	460b      	mov	r3, r1
 80012c0:	71bb      	strb	r3, [r7, #6]
	float Y;
	float X;
	float startX;
	float startY;
	float Alfa;
	float to_deg = PI / 180;
 80012c2:	4bbb      	ldr	r3, [pc, #748]	; (80015b0 <Gauge_ValuePct+0x300>)
 80012c4:	61fb      	str	r3, [r7, #28]

	if (Value > 100) return;
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b64      	cmp	r3, #100	; 0x64
 80012ca:	f200 82f0 	bhi.w	80018ae <Gauge_ValuePct+0x5fe>

	if (Value > 0) // ** hide previous position of the pointer
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 8176 	beq.w	80015c2 <Gauge_ValuePct+0x312>
	{
		Alfa = (theGauge->Alfa_end - theGauge->Alfa_start) * theGauge->Previous_pct_value / 100 + theGauge->Alfa_start;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	795b      	ldrb	r3, [r3, #5]
 80012da:	461a      	mov	r2, r3
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	791b      	ldrb	r3, [r3, #4]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	7992      	ldrb	r2, [r2, #6]
 80012e6:	fb02 f303 	mul.w	r3, r2, r3
 80012ea:	4ab2      	ldr	r2, [pc, #712]	; (80015b4 <Gauge_ValuePct+0x304>)
 80012ec:	fb82 1203 	smull	r1, r2, r2, r3
 80012f0:	1152      	asrs	r2, r2, #5
 80012f2:	17db      	asrs	r3, r3, #31
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	7912      	ldrb	r2, [r2, #4]
 80012fa:	4413      	add	r3, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fcaf 	bl	8000c60 <__aeabi_i2f>
 8001302:	4603      	mov	r3, r0
 8001304:	61bb      	str	r3, [r7, #24]
		Y = (theGauge->RadiusOut - 3) * sin(Alfa * to_deg);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	78db      	ldrb	r3, [r3, #3]
 800130a:	3b03      	subs	r3, #3
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f871 	bl	80003f4 <__aeabi_i2d>
 8001312:	4604      	mov	r4, r0
 8001314:	460d      	mov	r5, r1
 8001316:	69f9      	ldr	r1, [r7, #28]
 8001318:	69b8      	ldr	r0, [r7, #24]
 800131a:	f7ff fcf5 	bl	8000d08 <__aeabi_fmul>
 800131e:	4603      	mov	r3, r0
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f879 	bl	8000418 <__aeabi_f2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f002 fd47 	bl	8003dc0 <sin>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4620      	mov	r0, r4
 8001338:	4629      	mov	r1, r5
 800133a:	f7ff f8c5 	bl	80004c8 <__aeabi_dmul>
 800133e:	4603      	mov	r3, r0
 8001340:	460c      	mov	r4, r1
 8001342:	4618      	mov	r0, r3
 8001344:	4621      	mov	r1, r4
 8001346:	f7ff fb81 	bl	8000a4c <__aeabi_d2f>
 800134a:	4603      	mov	r3, r0
 800134c:	617b      	str	r3, [r7, #20]
		X = (theGauge->RadiusOut - 3) * cos(Alfa * to_deg);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	78db      	ldrb	r3, [r3, #3]
 8001352:	3b03      	subs	r3, #3
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f84d 	bl	80003f4 <__aeabi_i2d>
 800135a:	4604      	mov	r4, r0
 800135c:	460d      	mov	r5, r1
 800135e:	69f9      	ldr	r1, [r7, #28]
 8001360:	69b8      	ldr	r0, [r7, #24]
 8001362:	f7ff fcd1 	bl	8000d08 <__aeabi_fmul>
 8001366:	4603      	mov	r3, r0
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f855 	bl	8000418 <__aeabi_f2d>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f002 fced 	bl	8003d54 <cos>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4620      	mov	r0, r4
 8001380:	4629      	mov	r1, r5
 8001382:	f7ff f8a1 	bl	80004c8 <__aeabi_dmul>
 8001386:	4603      	mov	r3, r0
 8001388:	460c      	mov	r4, r1
 800138a:	4618      	mov	r0, r3
 800138c:	4621      	mov	r1, r4
 800138e:	f7ff fb5d 	bl	8000a4c <__aeabi_d2f>
 8001392:	4603      	mov	r3, r0
 8001394:	613b      	str	r3, [r7, #16]
		startY = theGauge->RadiusIn * sin((Alfa - 10) * to_deg);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	789b      	ldrb	r3, [r3, #2]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f82a 	bl	80003f4 <__aeabi_i2d>
 80013a0:	4604      	mov	r4, r0
 80013a2:	460d      	mov	r5, r1
 80013a4:	4984      	ldr	r1, [pc, #528]	; (80015b8 <Gauge_ValuePct+0x308>)
 80013a6:	69b8      	ldr	r0, [r7, #24]
 80013a8:	f7ff fba4 	bl	8000af4 <__aeabi_fsub>
 80013ac:	4603      	mov	r3, r0
 80013ae:	69f9      	ldr	r1, [r7, #28]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fca9 	bl	8000d08 <__aeabi_fmul>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f82d 	bl	8000418 <__aeabi_f2d>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f002 fcfb 	bl	8003dc0 <sin>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4620      	mov	r0, r4
 80013d0:	4629      	mov	r1, r5
 80013d2:	f7ff f879 	bl	80004c8 <__aeabi_dmul>
 80013d6:	4603      	mov	r3, r0
 80013d8:	460c      	mov	r4, r1
 80013da:	4618      	mov	r0, r3
 80013dc:	4621      	mov	r1, r4
 80013de:	f7ff fb35 	bl	8000a4c <__aeabi_d2f>
 80013e2:	4603      	mov	r3, r0
 80013e4:	60fb      	str	r3, [r7, #12]
		startX = theGauge->RadiusIn * cos((Alfa - 10) * to_deg);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	789b      	ldrb	r3, [r3, #2]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f802 	bl	80003f4 <__aeabi_i2d>
 80013f0:	4604      	mov	r4, r0
 80013f2:	460d      	mov	r5, r1
 80013f4:	4970      	ldr	r1, [pc, #448]	; (80015b8 <Gauge_ValuePct+0x308>)
 80013f6:	69b8      	ldr	r0, [r7, #24]
 80013f8:	f7ff fb7c 	bl	8000af4 <__aeabi_fsub>
 80013fc:	4603      	mov	r3, r0
 80013fe:	69f9      	ldr	r1, [r7, #28]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fc81 	bl	8000d08 <__aeabi_fmul>
 8001406:	4603      	mov	r3, r0
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f805 	bl	8000418 <__aeabi_f2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f002 fc9d 	bl	8003d54 <cos>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4620      	mov	r0, r4
 8001420:	4629      	mov	r1, r5
 8001422:	f7ff f851 	bl	80004c8 <__aeabi_dmul>
 8001426:	4603      	mov	r3, r0
 8001428:	460c      	mov	r4, r1
 800142a:	4618      	mov	r0, r3
 800142c:	4621      	mov	r1, r4
 800142e:	f7ff fb0d 	bl	8000a4c <__aeabi_d2f>
 8001432:	4603      	mov	r3, r0
 8001434:	60bb      	str	r3, [r7, #8]
		SSD1306_DrawLine(theGauge->Center_X - (int8_t)startX, theGauge->Center_Y - (int8_t)startY, theGauge->Center_X - to_int(X), theGauge->Center_Y - to_int(Y), 0x00);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b21c      	sxth	r4, r3
 800143c:	68b8      	ldr	r0, [r7, #8]
 800143e:	f7ff fe29 	bl	8001094 <__aeabi_f2iz>
 8001442:	4603      	mov	r3, r0
 8001444:	b25b      	sxtb	r3, r3
 8001446:	b21b      	sxth	r3, r3
 8001448:	1ae3      	subs	r3, r4, r3
 800144a:	b21b      	sxth	r3, r3
 800144c:	b29d      	uxth	r5, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	785b      	ldrb	r3, [r3, #1]
 8001452:	b21c      	sxth	r4, r3
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f7ff fe1d 	bl	8001094 <__aeabi_f2iz>
 800145a:	4603      	mov	r3, r0
 800145c:	b25b      	sxtb	r3, r3
 800145e:	b21b      	sxth	r3, r3
 8001460:	1ae3      	subs	r3, r4, r3
 8001462:	b21b      	sxth	r3, r3
 8001464:	b29e      	uxth	r6, r3
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b21c      	sxth	r4, r3
 800146c:	6938      	ldr	r0, [r7, #16]
 800146e:	f7ff fe57 	bl	8001120 <to_int>
 8001472:	4603      	mov	r3, r0
 8001474:	b21b      	sxth	r3, r3
 8001476:	1ae3      	subs	r3, r4, r3
 8001478:	b21b      	sxth	r3, r3
 800147a:	fa1f f883 	uxth.w	r8, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	785b      	ldrb	r3, [r3, #1]
 8001482:	b21c      	sxth	r4, r3
 8001484:	6978      	ldr	r0, [r7, #20]
 8001486:	f7ff fe4b 	bl	8001120 <to_int>
 800148a:	4603      	mov	r3, r0
 800148c:	b21b      	sxth	r3, r3
 800148e:	1ae3      	subs	r3, r4, r3
 8001490:	b21b      	sxth	r3, r3
 8001492:	b29a      	uxth	r2, r3
 8001494:	2300      	movs	r3, #0
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	4613      	mov	r3, r2
 800149a:	4642      	mov	r2, r8
 800149c:	4631      	mov	r1, r6
 800149e:	4628      	mov	r0, r5
 80014a0:	f000 fe33 	bl	800210a <SSD1306_DrawLine>
		startY = theGauge->RadiusIn * sin((Alfa + 10)  * to_deg);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	789b      	ldrb	r3, [r3, #2]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe ffa3 	bl	80003f4 <__aeabi_i2d>
 80014ae:	4604      	mov	r4, r0
 80014b0:	460d      	mov	r5, r1
 80014b2:	4941      	ldr	r1, [pc, #260]	; (80015b8 <Gauge_ValuePct+0x308>)
 80014b4:	69b8      	ldr	r0, [r7, #24]
 80014b6:	f7ff fb1f 	bl	8000af8 <__addsf3>
 80014ba:	4603      	mov	r3, r0
 80014bc:	69f9      	ldr	r1, [r7, #28]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fc22 	bl	8000d08 <__aeabi_fmul>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe ffa6 	bl	8000418 <__aeabi_f2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f002 fc74 	bl	8003dc0 <sin>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4620      	mov	r0, r4
 80014de:	4629      	mov	r1, r5
 80014e0:	f7fe fff2 	bl	80004c8 <__aeabi_dmul>
 80014e4:	4603      	mov	r3, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	4618      	mov	r0, r3
 80014ea:	4621      	mov	r1, r4
 80014ec:	f7ff faae 	bl	8000a4c <__aeabi_d2f>
 80014f0:	4603      	mov	r3, r0
 80014f2:	60fb      	str	r3, [r7, #12]
		startX = theGauge->RadiusIn * cos((Alfa + 10) * to_deg);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	789b      	ldrb	r3, [r3, #2]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe ff7b 	bl	80003f4 <__aeabi_i2d>
 80014fe:	4604      	mov	r4, r0
 8001500:	460d      	mov	r5, r1
 8001502:	492d      	ldr	r1, [pc, #180]	; (80015b8 <Gauge_ValuePct+0x308>)
 8001504:	69b8      	ldr	r0, [r7, #24]
 8001506:	f7ff faf7 	bl	8000af8 <__addsf3>
 800150a:	4603      	mov	r3, r0
 800150c:	69f9      	ldr	r1, [r7, #28]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fbfa 	bl	8000d08 <__aeabi_fmul>
 8001514:	4603      	mov	r3, r0
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe ff7e 	bl	8000418 <__aeabi_f2d>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f002 fc16 	bl	8003d54 <cos>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4620      	mov	r0, r4
 800152e:	4629      	mov	r1, r5
 8001530:	f7fe ffca 	bl	80004c8 <__aeabi_dmul>
 8001534:	4603      	mov	r3, r0
 8001536:	460c      	mov	r4, r1
 8001538:	4618      	mov	r0, r3
 800153a:	4621      	mov	r1, r4
 800153c:	f7ff fa86 	bl	8000a4c <__aeabi_d2f>
 8001540:	4603      	mov	r3, r0
 8001542:	60bb      	str	r3, [r7, #8]
		SSD1306_DrawLine(theGauge->Center_X - (int8_t)startX, theGauge->Center_Y - (int8_t)startY, theGauge->Center_X - to_int(X), theGauge->Center_Y - to_int(Y), 0x00);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b21c      	sxth	r4, r3
 800154a:	68b8      	ldr	r0, [r7, #8]
 800154c:	f7ff fda2 	bl	8001094 <__aeabi_f2iz>
 8001550:	4603      	mov	r3, r0
 8001552:	b25b      	sxtb	r3, r3
 8001554:	b21b      	sxth	r3, r3
 8001556:	1ae3      	subs	r3, r4, r3
 8001558:	b21b      	sxth	r3, r3
 800155a:	b29d      	uxth	r5, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	785b      	ldrb	r3, [r3, #1]
 8001560:	b21c      	sxth	r4, r3
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff fd96 	bl	8001094 <__aeabi_f2iz>
 8001568:	4603      	mov	r3, r0
 800156a:	b25b      	sxtb	r3, r3
 800156c:	b21b      	sxth	r3, r3
 800156e:	1ae3      	subs	r3, r4, r3
 8001570:	b21b      	sxth	r3, r3
 8001572:	b29e      	uxth	r6, r3
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b21c      	sxth	r4, r3
 800157a:	6938      	ldr	r0, [r7, #16]
 800157c:	f7ff fdd0 	bl	8001120 <to_int>
 8001580:	4603      	mov	r3, r0
 8001582:	b21b      	sxth	r3, r3
 8001584:	1ae3      	subs	r3, r4, r3
 8001586:	b21b      	sxth	r3, r3
 8001588:	fa1f f883 	uxth.w	r8, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	785b      	ldrb	r3, [r3, #1]
 8001590:	b21c      	sxth	r4, r3
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff fdc4 	bl	8001120 <to_int>
 8001598:	4603      	mov	r3, r0
 800159a:	b21b      	sxth	r3, r3
 800159c:	1ae3      	subs	r3, r4, r3
 800159e:	b21b      	sxth	r3, r3
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	2300      	movs	r3, #0
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	4613      	mov	r3, r2
 80015a8:	4642      	mov	r2, r8
 80015aa:	4631      	mov	r1, r6
 80015ac:	e006      	b.n	80015bc <Gauge_ValuePct+0x30c>
 80015ae:	bf00      	nop
 80015b0:	3c8efa35 	.word	0x3c8efa35
 80015b4:	51eb851f 	.word	0x51eb851f
 80015b8:	41200000 	.word	0x41200000
 80015bc:	4628      	mov	r0, r5
 80015be:	f000 fda4 	bl	800210a <SSD1306_DrawLine>
	}

	Alfa = (theGauge->Alfa_end - theGauge->Alfa_start) * Value / 100 + theGauge->Alfa_start;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	795b      	ldrb	r3, [r3, #5]
 80015c6:	461a      	mov	r2, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	791b      	ldrb	r3, [r3, #4]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	79fa      	ldrb	r2, [r7, #7]
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	4ab8      	ldr	r2, [pc, #736]	; (80018b8 <Gauge_ValuePct+0x608>)
 80015d6:	fb82 1203 	smull	r1, r2, r2, r3
 80015da:	1152      	asrs	r2, r2, #5
 80015dc:	17db      	asrs	r3, r3, #31
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	7912      	ldrb	r2, [r2, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fb3a 	bl	8000c60 <__aeabi_i2f>
 80015ec:	4603      	mov	r3, r0
 80015ee:	61bb      	str	r3, [r7, #24]
	Y = (theGauge->RadiusOut - 3) * sin(Alfa * to_deg);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	78db      	ldrb	r3, [r3, #3]
 80015f4:	3b03      	subs	r3, #3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe fefc 	bl	80003f4 <__aeabi_i2d>
 80015fc:	4604      	mov	r4, r0
 80015fe:	460d      	mov	r5, r1
 8001600:	69f9      	ldr	r1, [r7, #28]
 8001602:	69b8      	ldr	r0, [r7, #24]
 8001604:	f7ff fb80 	bl	8000d08 <__aeabi_fmul>
 8001608:	4603      	mov	r3, r0
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff04 	bl	8000418 <__aeabi_f2d>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f002 fbd2 	bl	8003dc0 <sin>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4620      	mov	r0, r4
 8001622:	4629      	mov	r1, r5
 8001624:	f7fe ff50 	bl	80004c8 <__aeabi_dmul>
 8001628:	4603      	mov	r3, r0
 800162a:	460c      	mov	r4, r1
 800162c:	4618      	mov	r0, r3
 800162e:	4621      	mov	r1, r4
 8001630:	f7ff fa0c 	bl	8000a4c <__aeabi_d2f>
 8001634:	4603      	mov	r3, r0
 8001636:	617b      	str	r3, [r7, #20]
	X = (theGauge->RadiusOut - 3) * cos(Alfa * to_deg);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	78db      	ldrb	r3, [r3, #3]
 800163c:	3b03      	subs	r3, #3
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe fed8 	bl	80003f4 <__aeabi_i2d>
 8001644:	4604      	mov	r4, r0
 8001646:	460d      	mov	r5, r1
 8001648:	69f9      	ldr	r1, [r7, #28]
 800164a:	69b8      	ldr	r0, [r7, #24]
 800164c:	f7ff fb5c 	bl	8000d08 <__aeabi_fmul>
 8001650:	4603      	mov	r3, r0
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe fee0 	bl	8000418 <__aeabi_f2d>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f002 fb78 	bl	8003d54 <cos>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4620      	mov	r0, r4
 800166a:	4629      	mov	r1, r5
 800166c:	f7fe ff2c 	bl	80004c8 <__aeabi_dmul>
 8001670:	4603      	mov	r3, r0
 8001672:	460c      	mov	r4, r1
 8001674:	4618      	mov	r0, r3
 8001676:	4621      	mov	r1, r4
 8001678:	f7ff f9e8 	bl	8000a4c <__aeabi_d2f>
 800167c:	4603      	mov	r3, r0
 800167e:	613b      	str	r3, [r7, #16]
	startY = theGauge->RadiusIn * sin((Alfa - 10) * to_deg);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	789b      	ldrb	r3, [r3, #2]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe feb5 	bl	80003f4 <__aeabi_i2d>
 800168a:	4604      	mov	r4, r0
 800168c:	460d      	mov	r5, r1
 800168e:	498b      	ldr	r1, [pc, #556]	; (80018bc <Gauge_ValuePct+0x60c>)
 8001690:	69b8      	ldr	r0, [r7, #24]
 8001692:	f7ff fa2f 	bl	8000af4 <__aeabi_fsub>
 8001696:	4603      	mov	r3, r0
 8001698:	69f9      	ldr	r1, [r7, #28]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fb34 	bl	8000d08 <__aeabi_fmul>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe feb8 	bl	8000418 <__aeabi_f2d>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f002 fb86 	bl	8003dc0 <sin>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4620      	mov	r0, r4
 80016ba:	4629      	mov	r1, r5
 80016bc:	f7fe ff04 	bl	80004c8 <__aeabi_dmul>
 80016c0:	4603      	mov	r3, r0
 80016c2:	460c      	mov	r4, r1
 80016c4:	4618      	mov	r0, r3
 80016c6:	4621      	mov	r1, r4
 80016c8:	f7ff f9c0 	bl	8000a4c <__aeabi_d2f>
 80016cc:	4603      	mov	r3, r0
 80016ce:	60fb      	str	r3, [r7, #12]
	startX = theGauge->RadiusIn * cos((Alfa - 10) * to_deg);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	789b      	ldrb	r3, [r3, #2]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fe8d 	bl	80003f4 <__aeabi_i2d>
 80016da:	4604      	mov	r4, r0
 80016dc:	460d      	mov	r5, r1
 80016de:	4977      	ldr	r1, [pc, #476]	; (80018bc <Gauge_ValuePct+0x60c>)
 80016e0:	69b8      	ldr	r0, [r7, #24]
 80016e2:	f7ff fa07 	bl	8000af4 <__aeabi_fsub>
 80016e6:	4603      	mov	r3, r0
 80016e8:	69f9      	ldr	r1, [r7, #28]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fb0c 	bl	8000d08 <__aeabi_fmul>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fe90 	bl	8000418 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f002 fb28 	bl	8003d54 <cos>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe fedc 	bl	80004c8 <__aeabi_dmul>
 8001710:	4603      	mov	r3, r0
 8001712:	460c      	mov	r4, r1
 8001714:	4618      	mov	r0, r3
 8001716:	4621      	mov	r1, r4
 8001718:	f7ff f998 	bl	8000a4c <__aeabi_d2f>
 800171c:	4603      	mov	r3, r0
 800171e:	60bb      	str	r3, [r7, #8]
	SSD1306_DrawLine(theGauge->Center_X - (int8_t)startX, theGauge->Center_Y - (int8_t)startY, theGauge->Center_X - to_int(X), theGauge->Center_Y - to_int(Y), 0x01);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b21c      	sxth	r4, r3
 8001726:	68b8      	ldr	r0, [r7, #8]
 8001728:	f7ff fcb4 	bl	8001094 <__aeabi_f2iz>
 800172c:	4603      	mov	r3, r0
 800172e:	b25b      	sxtb	r3, r3
 8001730:	b21b      	sxth	r3, r3
 8001732:	1ae3      	subs	r3, r4, r3
 8001734:	b21b      	sxth	r3, r3
 8001736:	b29d      	uxth	r5, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	785b      	ldrb	r3, [r3, #1]
 800173c:	b21c      	sxth	r4, r3
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f7ff fca8 	bl	8001094 <__aeabi_f2iz>
 8001744:	4603      	mov	r3, r0
 8001746:	b25b      	sxtb	r3, r3
 8001748:	b21b      	sxth	r3, r3
 800174a:	1ae3      	subs	r3, r4, r3
 800174c:	b21b      	sxth	r3, r3
 800174e:	b29e      	uxth	r6, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b21c      	sxth	r4, r3
 8001756:	6938      	ldr	r0, [r7, #16]
 8001758:	f7ff fce2 	bl	8001120 <to_int>
 800175c:	4603      	mov	r3, r0
 800175e:	b21b      	sxth	r3, r3
 8001760:	1ae3      	subs	r3, r4, r3
 8001762:	b21b      	sxth	r3, r3
 8001764:	fa1f f883 	uxth.w	r8, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	785b      	ldrb	r3, [r3, #1]
 800176c:	b21c      	sxth	r4, r3
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff fcd6 	bl	8001120 <to_int>
 8001774:	4603      	mov	r3, r0
 8001776:	b21b      	sxth	r3, r3
 8001778:	1ae3      	subs	r3, r4, r3
 800177a:	b21b      	sxth	r3, r3
 800177c:	b29a      	uxth	r2, r3
 800177e:	2301      	movs	r3, #1
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	4613      	mov	r3, r2
 8001784:	4642      	mov	r2, r8
 8001786:	4631      	mov	r1, r6
 8001788:	4628      	mov	r0, r5
 800178a:	f000 fcbe 	bl	800210a <SSD1306_DrawLine>
	startY = theGauge->RadiusIn * sin((Alfa + 10)  * to_deg);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	789b      	ldrb	r3, [r3, #2]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fe2e 	bl	80003f4 <__aeabi_i2d>
 8001798:	4604      	mov	r4, r0
 800179a:	460d      	mov	r5, r1
 800179c:	4947      	ldr	r1, [pc, #284]	; (80018bc <Gauge_ValuePct+0x60c>)
 800179e:	69b8      	ldr	r0, [r7, #24]
 80017a0:	f7ff f9aa 	bl	8000af8 <__addsf3>
 80017a4:	4603      	mov	r3, r0
 80017a6:	69f9      	ldr	r1, [r7, #28]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff faad 	bl	8000d08 <__aeabi_fmul>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fe31 	bl	8000418 <__aeabi_f2d>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f002 faff 	bl	8003dc0 <sin>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4620      	mov	r0, r4
 80017c8:	4629      	mov	r1, r5
 80017ca:	f7fe fe7d 	bl	80004c8 <__aeabi_dmul>
 80017ce:	4603      	mov	r3, r0
 80017d0:	460c      	mov	r4, r1
 80017d2:	4618      	mov	r0, r3
 80017d4:	4621      	mov	r1, r4
 80017d6:	f7ff f939 	bl	8000a4c <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	60fb      	str	r3, [r7, #12]
	startX = theGauge->RadiusIn * cos((Alfa + 10) * to_deg);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	789b      	ldrb	r3, [r3, #2]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe06 	bl	80003f4 <__aeabi_i2d>
 80017e8:	4604      	mov	r4, r0
 80017ea:	460d      	mov	r5, r1
 80017ec:	4933      	ldr	r1, [pc, #204]	; (80018bc <Gauge_ValuePct+0x60c>)
 80017ee:	69b8      	ldr	r0, [r7, #24]
 80017f0:	f7ff f982 	bl	8000af8 <__addsf3>
 80017f4:	4603      	mov	r3, r0
 80017f6:	69f9      	ldr	r1, [r7, #28]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fa85 	bl	8000d08 <__aeabi_fmul>
 80017fe:	4603      	mov	r3, r0
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fe09 	bl	8000418 <__aeabi_f2d>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f002 faa1 	bl	8003d54 <cos>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4620      	mov	r0, r4
 8001818:	4629      	mov	r1, r5
 800181a:	f7fe fe55 	bl	80004c8 <__aeabi_dmul>
 800181e:	4603      	mov	r3, r0
 8001820:	460c      	mov	r4, r1
 8001822:	4618      	mov	r0, r3
 8001824:	4621      	mov	r1, r4
 8001826:	f7ff f911 	bl	8000a4c <__aeabi_d2f>
 800182a:	4603      	mov	r3, r0
 800182c:	60bb      	str	r3, [r7, #8]
	SSD1306_DrawLine(theGauge->Center_X - (int8_t)startX, theGauge->Center_Y - (int8_t)startY, theGauge->Center_X - to_int(X), theGauge->Center_Y - to_int(Y), 0x01);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b21c      	sxth	r4, r3
 8001834:	68b8      	ldr	r0, [r7, #8]
 8001836:	f7ff fc2d 	bl	8001094 <__aeabi_f2iz>
 800183a:	4603      	mov	r3, r0
 800183c:	b25b      	sxtb	r3, r3
 800183e:	b21b      	sxth	r3, r3
 8001840:	1ae3      	subs	r3, r4, r3
 8001842:	b21b      	sxth	r3, r3
 8001844:	b29d      	uxth	r5, r3
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	785b      	ldrb	r3, [r3, #1]
 800184a:	b21c      	sxth	r4, r3
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f7ff fc21 	bl	8001094 <__aeabi_f2iz>
 8001852:	4603      	mov	r3, r0
 8001854:	b25b      	sxtb	r3, r3
 8001856:	b21b      	sxth	r3, r3
 8001858:	1ae3      	subs	r3, r4, r3
 800185a:	b21b      	sxth	r3, r3
 800185c:	b29e      	uxth	r6, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b21c      	sxth	r4, r3
 8001864:	6938      	ldr	r0, [r7, #16]
 8001866:	f7ff fc5b 	bl	8001120 <to_int>
 800186a:	4603      	mov	r3, r0
 800186c:	b21b      	sxth	r3, r3
 800186e:	1ae3      	subs	r3, r4, r3
 8001870:	b21b      	sxth	r3, r3
 8001872:	fa1f f883 	uxth.w	r8, r3
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	785b      	ldrb	r3, [r3, #1]
 800187a:	b21c      	sxth	r4, r3
 800187c:	6978      	ldr	r0, [r7, #20]
 800187e:	f7ff fc4f 	bl	8001120 <to_int>
 8001882:	4603      	mov	r3, r0
 8001884:	b21b      	sxth	r3, r3
 8001886:	1ae3      	subs	r3, r4, r3
 8001888:	b21b      	sxth	r3, r3
 800188a:	b29a      	uxth	r2, r3
 800188c:	2301      	movs	r3, #1
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	4613      	mov	r3, r2
 8001892:	4642      	mov	r2, r8
 8001894:	4631      	mov	r1, r6
 8001896:	4628      	mov	r0, r5
 8001898:	f000 fc37 	bl	800210a <SSD1306_DrawLine>

	theGauge->Previous_pct_value = Value;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	79fa      	ldrb	r2, [r7, #7]
 80018a0:	719a      	strb	r2, [r3, #6]

	if (DrawNow)
 80018a2:	79bb      	ldrb	r3, [r7, #6]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <Gauge_ValuePct+0x600>
		SSD1306_UpdateScreen();
 80018a8:	f000 fae8 	bl	8001e7c <SSD1306_UpdateScreen>
 80018ac:	e000      	b.n	80018b0 <Gauge_ValuePct+0x600>
	if (Value > 100) return;
 80018ae:	bf00      	nop
}
 80018b0:	3720      	adds	r7, #32
 80018b2:	46bd      	mov	sp, r7
 80018b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018b8:	51eb851f 	.word	0x51eb851f
 80018bc:	41200000 	.word	0x41200000

080018c0 <Gauge_Init>:


void Gauge_Init(uint8_t startX, uint8_t startY,  uint8_t Rout, uint8_t Rin, uint8_t alfaStart, uint8_t alfaEnd, uint8_t tickInterval, uint8_t tickSize, Gauge_type* theGauge)
{
 80018c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018c4:	b08c      	sub	sp, #48	; 0x30
 80018c6:	af02      	add	r7, sp, #8
 80018c8:	4604      	mov	r4, r0
 80018ca:	4608      	mov	r0, r1
 80018cc:	4611      	mov	r1, r2
 80018ce:	461a      	mov	r2, r3
 80018d0:	4623      	mov	r3, r4
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4603      	mov	r3, r0
 80018d6:	71bb      	strb	r3, [r7, #6]
 80018d8:	460b      	mov	r3, r1
 80018da:	717b      	strb	r3, [r7, #5]
 80018dc:	4613      	mov	r3, r2
 80018de:	713b      	strb	r3, [r7, #4]
	float dAlfa = 1;
 80018e0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80018e4:	61fb      	str	r3, [r7, #28]
	float Y;
	float X;
	float Ytick;
	float Xtick;
	float to_deg = PI / 180;
 80018e6:	4baf      	ldr	r3, [pc, #700]	; (8001ba4 <Gauge_Init+0x2e4>)
 80018e8:	61bb      	str	r3, [r7, #24]
	int8_t	prevY;
	int8_t	prevX;

	theGauge->Center_X = startX;
 80018ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018ec:	79fa      	ldrb	r2, [r7, #7]
 80018ee:	701a      	strb	r2, [r3, #0]
	theGauge->Center_Y = startY;
 80018f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018f2:	79ba      	ldrb	r2, [r7, #6]
 80018f4:	705a      	strb	r2, [r3, #1]
	theGauge->RadiusOut = Rout;
 80018f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018f8:	797a      	ldrb	r2, [r7, #5]
 80018fa:	70da      	strb	r2, [r3, #3]
	theGauge->RadiusIn = Rin;
 80018fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018fe:	793a      	ldrb	r2, [r7, #4]
 8001900:	709a      	strb	r2, [r3, #2]
	theGauge->Alfa_start = alfaStart;
 8001902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001904:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001908:	711a      	strb	r2, [r3, #4]
	theGauge->Alfa_end = alfaEnd;
 800190a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800190c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001910:	715a      	strb	r2, [r3, #5]
	theGauge->Tick_interval = tickInterval;
 8001912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001914:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8001918:	71da      	strb	r2, [r3, #7]
	theGauge->Tick_size = tickSize;
 800191a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800191c:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8001920:	721a      	strb	r2, [r3, #8]

	for (float Alfa = alfaStart; Alfa <= alfaEnd; Alfa += dAlfa)
 8001922:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f996 	bl	8000c58 <__aeabi_ui2f>
 800192c:	4603      	mov	r3, r0
 800192e:	623b      	str	r3, [r7, #32]
 8001930:	e11c      	b.n	8001b6c <Gauge_Init+0x2ac>
	{
		Y = Rout * sin(Alfa * to_deg);
 8001932:	797b      	ldrb	r3, [r7, #5]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fd5d 	bl	80003f4 <__aeabi_i2d>
 800193a:	4604      	mov	r4, r0
 800193c:	460d      	mov	r5, r1
 800193e:	69b9      	ldr	r1, [r7, #24]
 8001940:	6a38      	ldr	r0, [r7, #32]
 8001942:	f7ff f9e1 	bl	8000d08 <__aeabi_fmul>
 8001946:	4603      	mov	r3, r0
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fd65 	bl	8000418 <__aeabi_f2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f002 fa33 	bl	8003dc0 <sin>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4620      	mov	r0, r4
 8001960:	4629      	mov	r1, r5
 8001962:	f7fe fdb1 	bl	80004c8 <__aeabi_dmul>
 8001966:	4603      	mov	r3, r0
 8001968:	460c      	mov	r4, r1
 800196a:	4618      	mov	r0, r3
 800196c:	4621      	mov	r1, r4
 800196e:	f7ff f86d 	bl	8000a4c <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	617b      	str	r3, [r7, #20]
		X = Rout * cos(Alfa * to_deg);
 8001976:	797b      	ldrb	r3, [r7, #5]
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fd3b 	bl	80003f4 <__aeabi_i2d>
 800197e:	4604      	mov	r4, r0
 8001980:	460d      	mov	r5, r1
 8001982:	69b9      	ldr	r1, [r7, #24]
 8001984:	6a38      	ldr	r0, [r7, #32]
 8001986:	f7ff f9bf 	bl	8000d08 <__aeabi_fmul>
 800198a:	4603      	mov	r3, r0
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fd43 	bl	8000418 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	f002 f9db 	bl	8003d54 <cos>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4620      	mov	r0, r4
 80019a4:	4629      	mov	r1, r5
 80019a6:	f7fe fd8f 	bl	80004c8 <__aeabi_dmul>
 80019aa:	4603      	mov	r3, r0
 80019ac:	460c      	mov	r4, r1
 80019ae:	4618      	mov	r0, r3
 80019b0:	4621      	mov	r1, r4
 80019b2:	f7ff f84b 	bl	8000a4c <__aeabi_d2f>
 80019b6:	4603      	mov	r3, r0
 80019b8:	613b      	str	r3, [r7, #16]

		if ( !(prevX == to_int(X) && prevY == to_int(Y)) ) // ** skip drawing same pixels
 80019ba:	6938      	ldr	r0, [r7, #16]
 80019bc:	f7ff fbb0 	bl	8001120 <to_int>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461a      	mov	r2, r3
 80019c4:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d108      	bne.n	80019de <Gauge_Init+0x11e>
 80019cc:	6978      	ldr	r0, [r7, #20]
 80019ce:	f7ff fba7 	bl	8001120 <to_int>
 80019d2:	4603      	mov	r3, r0
 80019d4:	461a      	mov	r2, r3
 80019d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80019da:	4293      	cmp	r3, r2
 80019dc:	d022      	beq.n	8001a24 <Gauge_Init+0x164>
		{
			SSD1306_DrawFilledCircle(startX - to_int(X), startY - to_int(Y), 0x01, 0x01);
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	b21c      	sxth	r4, r3
 80019e2:	6938      	ldr	r0, [r7, #16]
 80019e4:	f7ff fb9c 	bl	8001120 <to_int>
 80019e8:	4603      	mov	r3, r0
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	1ae3      	subs	r3, r4, r3
 80019ee:	b21d      	sxth	r5, r3
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	b21c      	sxth	r4, r3
 80019f4:	6978      	ldr	r0, [r7, #20]
 80019f6:	f7ff fb93 	bl	8001120 <to_int>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	1ae3      	subs	r3, r4, r3
 8001a00:	b219      	sxth	r1, r3
 8001a02:	2301      	movs	r3, #1
 8001a04:	2201      	movs	r2, #1
 8001a06:	4628      	mov	r0, r5
 8001a08:	f000 fc7a 	bl	8002300 <SSD1306_DrawFilledCircle>
			//SSD1306_DrawPixel(startX - to_int(X), startY - to_int(Y), 0x01);
			prevX = to_int(X);
 8001a0c:	6938      	ldr	r0, [r7, #16]
 8001a0e:	f7ff fb87 	bl	8001120 <to_int>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			prevY = to_int(Y);
 8001a18:	6978      	ldr	r0, [r7, #20]
 8001a1a:	f7ff fb81 	bl	8001120 <to_int>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		if ( !(to_uint(Alfa - theGauge->Alfa_start) % theGauge->Tick_interval) )
 8001a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a26:	791b      	ldrb	r3, [r3, #4]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff f919 	bl	8000c60 <__aeabi_i2f>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4619      	mov	r1, r3
 8001a32:	6a38      	ldr	r0, [r7, #32]
 8001a34:	f7ff f85e 	bl	8000af4 <__aeabi_fsub>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fb84 	bl	8001148 <to_uint>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a46:	79db      	ldrb	r3, [r3, #7]
 8001a48:	fbb2 f1f3 	udiv	r1, r2, r3
 8001a4c:	fb03 f301 	mul.w	r3, r3, r1
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f040 8083 	bne.w	8001b60 <Gauge_Init+0x2a0>
		{
			Ytick = ( theGauge->RadiusOut + theGauge->Tick_size) * sin(Alfa * to_deg);
 8001a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a5c:	78db      	ldrb	r3, [r3, #3]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a62:	7a1b      	ldrb	r3, [r3, #8]
 8001a64:	4413      	add	r3, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fcc4 	bl	80003f4 <__aeabi_i2d>
 8001a6c:	4604      	mov	r4, r0
 8001a6e:	460d      	mov	r5, r1
 8001a70:	69b9      	ldr	r1, [r7, #24]
 8001a72:	6a38      	ldr	r0, [r7, #32]
 8001a74:	f7ff f948 	bl	8000d08 <__aeabi_fmul>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fccc 	bl	8000418 <__aeabi_f2d>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f002 f99a 	bl	8003dc0 <sin>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4620      	mov	r0, r4
 8001a92:	4629      	mov	r1, r5
 8001a94:	f7fe fd18 	bl	80004c8 <__aeabi_dmul>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	460c      	mov	r4, r1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	f7fe ffd4 	bl	8000a4c <__aeabi_d2f>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60fb      	str	r3, [r7, #12]
			Xtick = ( theGauge->RadiusOut + theGauge->Tick_size) * cos(Alfa * to_deg);
 8001aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aaa:	78db      	ldrb	r3, [r3, #3]
 8001aac:	461a      	mov	r2, r3
 8001aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ab0:	7a1b      	ldrb	r3, [r3, #8]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fc9d 	bl	80003f4 <__aeabi_i2d>
 8001aba:	4604      	mov	r4, r0
 8001abc:	460d      	mov	r5, r1
 8001abe:	69b9      	ldr	r1, [r7, #24]
 8001ac0:	6a38      	ldr	r0, [r7, #32]
 8001ac2:	f7ff f921 	bl	8000d08 <__aeabi_fmul>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fca5 	bl	8000418 <__aeabi_f2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f002 f93d 	bl	8003d54 <cos>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4620      	mov	r0, r4
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	f7fe fcf1 	bl	80004c8 <__aeabi_dmul>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	460c      	mov	r4, r1
 8001aea:	4618      	mov	r0, r3
 8001aec:	4621      	mov	r1, r4
 8001aee:	f7fe ffad 	bl	8000a4c <__aeabi_d2f>
 8001af2:	4603      	mov	r3, r0
 8001af4:	60bb      	str	r3, [r7, #8]
			SSD1306_DrawLine(theGauge->Center_X - to_int(X), theGauge->Center_Y - to_int(Y), theGauge->Center_X - to_int(Xtick), theGauge->Center_Y - to_int(Ytick), 0x01);
 8001af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	b21c      	sxth	r4, r3
 8001afc:	6938      	ldr	r0, [r7, #16]
 8001afe:	f7ff fb0f 	bl	8001120 <to_int>
 8001b02:	4603      	mov	r3, r0
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	1ae3      	subs	r3, r4, r3
 8001b08:	b21b      	sxth	r3, r3
 8001b0a:	b29d      	uxth	r5, r3
 8001b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b0e:	785b      	ldrb	r3, [r3, #1]
 8001b10:	b21c      	sxth	r4, r3
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff fb04 	bl	8001120 <to_int>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	1ae3      	subs	r3, r4, r3
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	b29e      	uxth	r6, r3
 8001b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b21c      	sxth	r4, r3
 8001b28:	68b8      	ldr	r0, [r7, #8]
 8001b2a:	f7ff faf9 	bl	8001120 <to_int>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	1ae3      	subs	r3, r4, r3
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	fa1f f883 	uxth.w	r8, r3
 8001b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b3c:	785b      	ldrb	r3, [r3, #1]
 8001b3e:	b21c      	sxth	r4, r3
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f7ff faed 	bl	8001120 <to_int>
 8001b46:	4603      	mov	r3, r0
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	1ae3      	subs	r3, r4, r3
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	2301      	movs	r3, #1
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4613      	mov	r3, r2
 8001b56:	4642      	mov	r2, r8
 8001b58:	4631      	mov	r1, r6
 8001b5a:	4628      	mov	r0, r5
 8001b5c:	f000 fad5 	bl	800210a <SSD1306_DrawLine>
	for (float Alfa = alfaStart; Alfa <= alfaEnd; Alfa += dAlfa)
 8001b60:	69f9      	ldr	r1, [r7, #28]
 8001b62:	6a38      	ldr	r0, [r7, #32]
 8001b64:	f7fe ffc8 	bl	8000af8 <__addsf3>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff f875 	bl	8000c60 <__aeabi_i2f>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6a38      	ldr	r0, [r7, #32]
 8001b7c:	f7ff fa6c 	bl	8001058 <__aeabi_fcmple>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f47f aed5 	bne.w	8001932 <Gauge_Init+0x72>
		}
	}
	Gauge_DrawInnerArc(theGauge);
 8001b88:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b8a:	f7ff faf1 	bl	8001170 <Gauge_DrawInnerArc>
	Gauge_ValuePct(0, 1, theGauge);
 8001b8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b90:	2101      	movs	r1, #1
 8001b92:	2000      	movs	r0, #0
 8001b94:	f7ff fb8c 	bl	80012b0 <Gauge_ValuePct>
}
 8001b98:	bf00      	nop
 8001b9a:	3728      	adds	r7, #40	; 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ba2:	bf00      	nop
 8001ba4:	3c8efa35 	.word	0x3c8efa35

08001ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	; 0x30
 8001bac:	af06      	add	r7, sp, #24
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bae:	f000 fe07 	bl	80027c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb2:	f000 f8bb 	bl	8001d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb6:	f000 f92d 	bl	8001e14 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bba:	f000 f8fd 	bl	8001db8 <MX_I2C1_Init>
  Gauge_type Gauge1;
//  Gauge_type Gauge2;
//  Gauge_type Gauge3;

  //Gauge_Init(startX, startY, Rout, Rin, alfaStart, alfaEnd, tickInterval, tickSize, theGauge)
  Gauge_Init(64, 64, 59, 35, 20, 160, 35, 5, &Gauge1);
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	9304      	str	r3, [sp, #16]
 8001bc2:	2305      	movs	r3, #5
 8001bc4:	9303      	str	r3, [sp, #12]
 8001bc6:	2323      	movs	r3, #35	; 0x23
 8001bc8:	9302      	str	r3, [sp, #8]
 8001bca:	23a0      	movs	r3, #160	; 0xa0
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	2314      	movs	r3, #20
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2323      	movs	r3, #35	; 0x23
 8001bd4:	223b      	movs	r2, #59	; 0x3b
 8001bd6:	2140      	movs	r1, #64	; 0x40
 8001bd8:	2040      	movs	r0, #64	; 0x40
 8001bda:	f7ff fe71 	bl	80018c0 <Gauge_Init>

  /* USER CODE END 2 */
 
  SSD1306_GotoXY(2,2);
 8001bde:	2102      	movs	r1, #2
 8001be0:	2002      	movs	r0, #2
 8001be2:	f000 f9d7 	bl	8001f94 <SSD1306_GotoXY>
  sprintf(_s,"%s", "mV");
 8001be6:	4b4c      	ldr	r3, [pc, #304]	; (8001d18 <main+0x170>)
 8001be8:	4a4c      	ldr	r2, [pc, #304]	; (8001d1c <main+0x174>)
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	4611      	mov	r1, r2
 8001bee:	8019      	strh	r1, [r3, #0]
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	0c12      	lsrs	r2, r2, #16
 8001bf4:	701a      	strb	r2, [r3, #0]
  SSD1306_Puts(_s, &Font_11x18, 0x01);
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4949      	ldr	r1, [pc, #292]	; (8001d20 <main+0x178>)
 8001bfa:	4847      	ldr	r0, [pc, #284]	; (8001d18 <main+0x170>)
 8001bfc:	f000 fa60 	bl	80020c0 <SSD1306_Puts>

  SSD1306_GotoXY(SSD1306_WIDTH - 2 * Font_11x18.FontWidth - 1, 2);
 8001c00:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <main+0x178>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	2102      	movs	r1, #2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 f9bd 	bl	8001f94 <SSD1306_GotoXY>
  sprintf(_s,"%s", "mA");
 8001c1a:	4b3f      	ldr	r3, [pc, #252]	; (8001d18 <main+0x170>)
 8001c1c:	4a41      	ldr	r2, [pc, #260]	; (8001d24 <main+0x17c>)
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	4611      	mov	r1, r2
 8001c22:	8019      	strh	r1, [r3, #0]
 8001c24:	3302      	adds	r3, #2
 8001c26:	0c12      	lsrs	r2, r2, #16
 8001c28:	701a      	strb	r2, [r3, #0]
  SSD1306_Puts(_s, &Font_11x18, 0x01);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	493c      	ldr	r1, [pc, #240]	; (8001d20 <main+0x178>)
 8001c2e:	483a      	ldr	r0, [pc, #232]	; (8001d18 <main+0x170>)
 8001c30:	f000 fa46 	bl	80020c0 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001c34:	f000 f922 	bl	8001e7c <SSD1306_UpdateScreen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  for (int i = 0; i < 100; i += 4)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e030      	b.n	8001ca0 <main+0xf8>
	  {
		  Gauge_ValuePct(i, 0, &Gauge1);
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	1d3a      	adds	r2, r7, #4
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fb32 	bl	80012b0 <Gauge_ValuePct>
		  sprintf(_s,"%03d", i);
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	4936      	ldr	r1, [pc, #216]	; (8001d28 <main+0x180>)
 8001c50:	4831      	ldr	r0, [pc, #196]	; (8001d18 <main+0x170>)
 8001c52:	f003 f8d3 	bl	8004dfc <siprintf>
		  SSD1306_GotoXY(Gauge1.Center_X - (uint8_t)(3 * Font_11x18.FontWidth / 2), Gauge1.Center_Y - Font_11x18.FontHeight - 2);
 8001c56:	793b      	ldrb	r3, [r7, #4]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <main+0x178>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	460b      	mov	r3, r1
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	440b      	add	r3, r1
 8001c66:	0fd9      	lsrs	r1, r3, #31
 8001c68:	440b      	add	r3, r1
 8001c6a:	105b      	asrs	r3, r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	b298      	uxth	r0, r3
 8001c74:	797b      	ldrb	r3, [r7, #5]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <main+0x178>)
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	3b02      	subs	r3, #2
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4619      	mov	r1, r3
 8001c88:	f000 f984 	bl	8001f94 <SSD1306_GotoXY>
		  SSD1306_Puts(_s, &Font_11x18, 0x01);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4924      	ldr	r1, [pc, #144]	; (8001d20 <main+0x178>)
 8001c90:	4821      	ldr	r0, [pc, #132]	; (8001d18 <main+0x170>)
 8001c92:	f000 fa15 	bl	80020c0 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8001c96:	f000 f8f1 	bl	8001e7c <SSD1306_UpdateScreen>
	  for (int i = 0; i < 100; i += 4)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b63      	cmp	r3, #99	; 0x63
 8001ca4:	ddcb      	ble.n	8001c3e <main+0x96>
	  }

	  for (int i = 100; i > 0; i -= 4)
 8001ca6:	2364      	movs	r3, #100	; 0x64
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	e030      	b.n	8001d0e <main+0x166>
	  	  {
	  		Gauge_ValuePct(i, 0, &Gauge1);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	1d3a      	adds	r2, r7, #4
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fafb 	bl	80012b0 <Gauge_ValuePct>
	  		sprintf(_s,"%03d", i);
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	491a      	ldr	r1, [pc, #104]	; (8001d28 <main+0x180>)
 8001cbe:	4816      	ldr	r0, [pc, #88]	; (8001d18 <main+0x170>)
 8001cc0:	f003 f89c 	bl	8004dfc <siprintf>
	  		SSD1306_GotoXY(Gauge1.Center_X - (uint8_t)(3 * Font_11x18.FontWidth / 2), Gauge1.Center_Y - Font_11x18.FontHeight - 2);
 8001cc4:	793b      	ldrb	r3, [r7, #4]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <main+0x178>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	460b      	mov	r3, r1
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	440b      	add	r3, r1
 8001cd4:	0fd9      	lsrs	r1, r3, #31
 8001cd6:	440b      	add	r3, r1
 8001cd8:	105b      	asrs	r3, r3, #1
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	b298      	uxth	r0, r3
 8001ce2:	797b      	ldrb	r3, [r7, #5]
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <main+0x178>)
 8001ce8:	785b      	ldrb	r3, [r3, #1]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b02      	subs	r3, #2
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f000 f94d 	bl	8001f94 <SSD1306_GotoXY>
	  		SSD1306_Puts(_s, &Font_11x18, 0x01);
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4908      	ldr	r1, [pc, #32]	; (8001d20 <main+0x178>)
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <main+0x170>)
 8001d00:	f000 f9de 	bl	80020c0 <SSD1306_Puts>
	  		SSD1306_UpdateScreen();
 8001d04:	f000 f8ba 	bl	8001e7c <SSD1306_UpdateScreen>
	  for (int i = 100; i > 0; i -= 4)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	dccb      	bgt.n	8001cac <main+0x104>
	  for (int i = 0; i < 100; i += 4)
 8001d14:	e790      	b.n	8001c38 <main+0x90>
 8001d16:	bf00      	nop
 8001d18:	200004a8 	.word	0x200004a8
 8001d1c:	08005638 	.word	0x08005638
 8001d20:	20000000 	.word	0x20000000
 8001d24:	0800563c 	.word	0x0800563c
 8001d28:	08005640 	.word	0x08005640

08001d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b090      	sub	sp, #64	; 0x40
 8001d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d32:	f107 0318 	add.w	r3, r7, #24
 8001d36:	2228      	movs	r2, #40	; 0x28
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 f856 	bl	8004dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	60da      	str	r2, [r3, #12]
 8001d4c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d60:	2302      	movs	r3, #2
 8001d62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d6a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d70:	f107 0318 	add.w	r3, r7, #24
 8001d74:	4618      	mov	r0, r3
 8001d76:	f001 fbe5 	bl	8003544 <HAL_RCC_OscConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001d80:	f000 f876 	bl	8001e70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d84:	230f      	movs	r3, #15
 8001d86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001d90:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001d96:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d9a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2102      	movs	r1, #2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 fe4f 	bl	8003a44 <HAL_RCC_ClockConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001dac:	f000 f860 	bl	8001e70 <Error_Handler>
  }
}
 8001db0:	bf00      	nop
 8001db2:	3740      	adds	r7, #64	; 0x40
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001dbe:	4a13      	ldr	r2, [pc, #76]	; (8001e0c <MX_I2C1_Init+0x54>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001dc4:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <MX_I2C1_Init+0x58>)
 8001dc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001dd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001df6:	f000 ff83 	bl	8002d00 <HAL_I2C_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e00:	f000 f836 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200004bc 	.word	0x200004bc
 8001e0c:	40005400 	.word	0x40005400
 8001e10:	00061a80 	.word	0x00061a80

08001e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <MX_GPIO_Init+0x58>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	4a13      	ldr	r2, [pc, #76]	; (8001e6c <MX_GPIO_Init+0x58>)
 8001e20:	f043 0320 	orr.w	r3, r3, #32
 8001e24:	6193      	str	r3, [r2, #24]
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <MX_GPIO_Init+0x58>)
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f003 0320 	and.w	r3, r3, #32
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <MX_GPIO_Init+0x58>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <MX_GPIO_Init+0x58>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6193      	str	r3, [r2, #24]
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <MX_GPIO_Init+0x58>)
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <MX_GPIO_Init+0x58>)
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <MX_GPIO_Init+0x58>)
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	6193      	str	r3, [r2, #24]
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <MX_GPIO_Init+0x58>)
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]

}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	40021000 	.word	0x40021000

08001e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <SSD1306_UpdateScreen>:
	
	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001e82:	2300      	movs	r3, #0
 8001e84:	71fb      	strb	r3, [r7, #7]
 8001e86:	e01d      	b.n	8001ec4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	3b50      	subs	r3, #80	; 0x50
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2100      	movs	r1, #0
 8001e92:	2078      	movs	r0, #120	; 0x78
 8001e94:	f000 fb56 	bl	8002544 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	2078      	movs	r0, #120	; 0x78
 8001e9e:	f000 fb51 	bl	8002544 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001ea2:	2210      	movs	r2, #16
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2078      	movs	r0, #120	; 0x78
 8001ea8:	f000 fb4c 	bl	8002544 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	01db      	lsls	r3, r3, #7
 8001eb0:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <SSD1306_UpdateScreen+0x58>)
 8001eb2:	441a      	add	r2, r3
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	2140      	movs	r1, #64	; 0x40
 8001eb8:	2078      	movs	r0, #120	; 0x78
 8001eba:	f000 fafb 	bl	80024b4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	71fb      	strb	r3, [r7, #7]
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	2b07      	cmp	r3, #7
 8001ec8:	d9de      	bls.n	8001e88 <SSD1306_UpdateScreen+0xc>
	}
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000094 	.word	0x20000094

08001ed8 <SSD1306_DrawPixel>:
void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	80fb      	strh	r3, [r7, #6]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	80bb      	strh	r3, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	70fb      	strb	r3, [r7, #3]
	if (
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	2b7f      	cmp	r3, #127	; 0x7f
 8001eee:	d848      	bhi.n	8001f82 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001ef0:	88bb      	ldrh	r3, [r7, #4]
 8001ef2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ef4:	d845      	bhi.n	8001f82 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001ef6:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <SSD1306_DrawPixel+0xb4>)
 8001ef8:	791b      	ldrb	r3, [r3, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d006      	beq.n	8001f0c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d11a      	bne.n	8001f48 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001f12:	88fa      	ldrh	r2, [r7, #6]
 8001f14:	88bb      	ldrh	r3, [r7, #4]
 8001f16:	08db      	lsrs	r3, r3, #3
 8001f18:	b298      	uxth	r0, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	01db      	lsls	r3, r3, #7
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a1b      	ldr	r2, [pc, #108]	; (8001f90 <SSD1306_DrawPixel+0xb8>)
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	b25a      	sxtb	r2, r3
 8001f26:	88bb      	ldrh	r3, [r7, #4]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	b25b      	sxtb	r3, r3
 8001f34:	4313      	orrs	r3, r2
 8001f36:	b259      	sxtb	r1, r3
 8001f38:	88fa      	ldrh	r2, [r7, #6]
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	01db      	lsls	r3, r3, #7
 8001f3e:	4413      	add	r3, r2
 8001f40:	b2c9      	uxtb	r1, r1
 8001f42:	4a13      	ldr	r2, [pc, #76]	; (8001f90 <SSD1306_DrawPixel+0xb8>)
 8001f44:	54d1      	strb	r1, [r2, r3]
 8001f46:	e01d      	b.n	8001f84 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f48:	88fa      	ldrh	r2, [r7, #6]
 8001f4a:	88bb      	ldrh	r3, [r7, #4]
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	b298      	uxth	r0, r3
 8001f50:	4603      	mov	r3, r0
 8001f52:	01db      	lsls	r3, r3, #7
 8001f54:	4413      	add	r3, r2
 8001f56:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <SSD1306_DrawPixel+0xb8>)
 8001f58:	5cd3      	ldrb	r3, [r2, r3]
 8001f5a:	b25a      	sxtb	r2, r3
 8001f5c:	88bb      	ldrh	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	2101      	movs	r1, #1
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	b25b      	sxtb	r3, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	b25b      	sxtb	r3, r3
 8001f6e:	4013      	ands	r3, r2
 8001f70:	b259      	sxtb	r1, r3
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	4603      	mov	r3, r0
 8001f76:	01db      	lsls	r3, r3, #7
 8001f78:	4413      	add	r3, r2
 8001f7a:	b2c9      	uxtb	r1, r1
 8001f7c:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <SSD1306_DrawPixel+0xb8>)
 8001f7e:	54d1      	strb	r1, [r2, r3]
 8001f80:	e000      	b.n	8001f84 <SSD1306_DrawPixel+0xac>
		return;
 8001f82:	bf00      	nop
	}
}
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	20000494 	.word	0x20000494
 8001f90:	20000094 	.word	0x20000094

08001f94 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	460a      	mov	r2, r1
 8001f9e:	80fb      	strh	r3, [r7, #6]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001fa4:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <SSD1306_GotoXY+0x28>)
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001faa:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <SSD1306_GotoXY+0x28>)
 8001fac:	88bb      	ldrh	r3, [r7, #4]
 8001fae:	8053      	strh	r3, [r2, #2]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000494 	.word	0x20000494

08001fc0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <SSD1306_Putc+0xfc>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	4413      	add	r3, r2
	if (
 8001fdc:	2b7f      	cmp	r3, #127	; 0x7f
 8001fde:	dc07      	bgt.n	8001ff0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001fe0:	4b36      	ldr	r3, [pc, #216]	; (80020bc <SSD1306_Putc+0xfc>)
 8001fe2:	885b      	ldrh	r3, [r3, #2]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	785b      	ldrb	r3, [r3, #1]
 8001fea:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001fec:	2b3f      	cmp	r3, #63	; 0x3f
 8001fee:	dd01      	ble.n	8001ff4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e05e      	b.n	80020b2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	e04b      	b.n	8002092 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	3b20      	subs	r3, #32
 8002002:	6839      	ldr	r1, [r7, #0]
 8002004:	7849      	ldrb	r1, [r1, #1]
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4619      	mov	r1, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	440b      	add	r3, r1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	e030      	b.n	8002080 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d010      	beq.n	8002050 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <SSD1306_Putc+0xfc>)
 8002030:	881a      	ldrh	r2, [r3, #0]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	b29b      	uxth	r3, r3
 8002036:	4413      	add	r3, r2
 8002038:	b298      	uxth	r0, r3
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <SSD1306_Putc+0xfc>)
 800203c:	885a      	ldrh	r2, [r3, #2]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	b29b      	uxth	r3, r3
 8002042:	4413      	add	r3, r2
 8002044:	b29b      	uxth	r3, r3
 8002046:	79ba      	ldrb	r2, [r7, #6]
 8002048:	4619      	mov	r1, r3
 800204a:	f7ff ff45 	bl	8001ed8 <SSD1306_DrawPixel>
 800204e:	e014      	b.n	800207a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <SSD1306_Putc+0xfc>)
 8002052:	881a      	ldrh	r2, [r3, #0]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	b29b      	uxth	r3, r3
 8002058:	4413      	add	r3, r2
 800205a:	b298      	uxth	r0, r3
 800205c:	4b17      	ldr	r3, [pc, #92]	; (80020bc <SSD1306_Putc+0xfc>)
 800205e:	885a      	ldrh	r2, [r3, #2]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	b29b      	uxth	r3, r3
 8002064:	4413      	add	r3, r2
 8002066:	b299      	uxth	r1, r3
 8002068:	79bb      	ldrb	r3, [r7, #6]
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf0c      	ite	eq
 800206e:	2301      	moveq	r3, #1
 8002070:	2300      	movne	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	f7ff ff2f 	bl	8001ed8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	3301      	adds	r3, #1
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4293      	cmp	r3, r2
 800208a:	d3c8      	bcc.n	800201e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3301      	adds	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	785b      	ldrb	r3, [r3, #1]
 8002096:	461a      	mov	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	4293      	cmp	r3, r2
 800209c:	d3ad      	bcc.n	8001ffa <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <SSD1306_Putc+0xfc>)
 80020a0:	881a      	ldrh	r2, [r3, #0]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <SSD1306_Putc+0xfc>)
 80020ae:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80020b0:	79fb      	ldrb	r3, [r7, #7]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000494 	.word	0x20000494

080020c0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	4613      	mov	r3, r2
 80020cc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80020ce:	e012      	b.n	80020f6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	79fa      	ldrb	r2, [r7, #7]
 80020d6:	68b9      	ldr	r1, [r7, #8]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff71 	bl	8001fc0 <SSD1306_Putc>
 80020de:	4603      	mov	r3, r0
 80020e0:	461a      	mov	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d002      	beq.n	80020f0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	e008      	b.n	8002102 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3301      	adds	r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1e8      	bne.n	80020d0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	781b      	ldrb	r3, [r3, #0]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <SSD1306_DrawLine>:
		} 
		i++;
	}
}

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800210a:	b590      	push	{r4, r7, lr}
 800210c:	b087      	sub	sp, #28
 800210e:	af00      	add	r7, sp, #0
 8002110:	4604      	mov	r4, r0
 8002112:	4608      	mov	r0, r1
 8002114:	4611      	mov	r1, r2
 8002116:	461a      	mov	r2, r3
 8002118:	4623      	mov	r3, r4
 800211a:	80fb      	strh	r3, [r7, #6]
 800211c:	4603      	mov	r3, r0
 800211e:	80bb      	strh	r3, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
 8002124:	4613      	mov	r3, r2
 8002126:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	2b7f      	cmp	r3, #127	; 0x7f
 800212c:	d901      	bls.n	8002132 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800212e:	237f      	movs	r3, #127	; 0x7f
 8002130:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	2b7f      	cmp	r3, #127	; 0x7f
 8002136:	d901      	bls.n	800213c <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8002138:	237f      	movs	r3, #127	; 0x7f
 800213a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800213c:	88bb      	ldrh	r3, [r7, #4]
 800213e:	2b3f      	cmp	r3, #63	; 0x3f
 8002140:	d901      	bls.n	8002146 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8002142:	233f      	movs	r3, #63	; 0x3f
 8002144:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8002146:	883b      	ldrh	r3, [r7, #0]
 8002148:	2b3f      	cmp	r3, #63	; 0x3f
 800214a:	d901      	bls.n	8002150 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800214c:	233f      	movs	r3, #63	; 0x3f
 800214e:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8002150:	88fa      	ldrh	r2, [r7, #6]
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	429a      	cmp	r2, r3
 8002156:	d205      	bcs.n	8002164 <SSD1306_DrawLine+0x5a>
 8002158:	887a      	ldrh	r2, [r7, #2]
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	b29b      	uxth	r3, r3
 8002160:	b21b      	sxth	r3, r3
 8002162:	e004      	b.n	800216e <SSD1306_DrawLine+0x64>
 8002164:	88fa      	ldrh	r2, [r7, #6]
 8002166:	887b      	ldrh	r3, [r7, #2]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	b29b      	uxth	r3, r3
 800216c:	b21b      	sxth	r3, r3
 800216e:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8002170:	88ba      	ldrh	r2, [r7, #4]
 8002172:	883b      	ldrh	r3, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d205      	bcs.n	8002184 <SSD1306_DrawLine+0x7a>
 8002178:	883a      	ldrh	r2, [r7, #0]
 800217a:	88bb      	ldrh	r3, [r7, #4]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	b29b      	uxth	r3, r3
 8002180:	b21b      	sxth	r3, r3
 8002182:	e004      	b.n	800218e <SSD1306_DrawLine+0x84>
 8002184:	88ba      	ldrh	r2, [r7, #4]
 8002186:	883b      	ldrh	r3, [r7, #0]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	b29b      	uxth	r3, r3
 800218c:	b21b      	sxth	r3, r3
 800218e:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8002190:	88fa      	ldrh	r2, [r7, #6]
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	429a      	cmp	r2, r3
 8002196:	d201      	bcs.n	800219c <SSD1306_DrawLine+0x92>
 8002198:	2301      	movs	r3, #1
 800219a:	e001      	b.n	80021a0 <SSD1306_DrawLine+0x96>
 800219c:	f04f 33ff 	mov.w	r3, #4294967295
 80021a0:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 80021a2:	88ba      	ldrh	r2, [r7, #4]
 80021a4:	883b      	ldrh	r3, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d201      	bcs.n	80021ae <SSD1306_DrawLine+0xa4>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e001      	b.n	80021b2 <SSD1306_DrawLine+0xa8>
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 80021b4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80021b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80021bc:	429a      	cmp	r2, r3
 80021be:	dd06      	ble.n	80021ce <SSD1306_DrawLine+0xc4>
 80021c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80021c4:	0fda      	lsrs	r2, r3, #31
 80021c6:	4413      	add	r3, r2
 80021c8:	105b      	asrs	r3, r3, #1
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	e006      	b.n	80021dc <SSD1306_DrawLine+0xd2>
 80021ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80021d2:	425b      	negs	r3, r3
 80021d4:	0fda      	lsrs	r2, r3, #31
 80021d6:	4413      	add	r3, r2
 80021d8:	105b      	asrs	r3, r3, #1
 80021da:	b21b      	sxth	r3, r3
 80021dc:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80021de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d129      	bne.n	800223a <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 80021e6:	883a      	ldrh	r2, [r7, #0]
 80021e8:	88bb      	ldrh	r3, [r7, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d205      	bcs.n	80021fa <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80021ee:	883b      	ldrh	r3, [r7, #0]
 80021f0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80021f2:	88bb      	ldrh	r3, [r7, #4]
 80021f4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80021f6:	893b      	ldrh	r3, [r7, #8]
 80021f8:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d205      	bcs.n	800220e <SSD1306_DrawLine+0x104>
			tmp = x1;
 8002202:	887b      	ldrh	r3, [r7, #2]
 8002204:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800220a:	893b      	ldrh	r3, [r7, #8]
 800220c:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800220e:	88bb      	ldrh	r3, [r7, #4]
 8002210:	82bb      	strh	r3, [r7, #20]
 8002212:	e00c      	b.n	800222e <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8002214:	8ab9      	ldrh	r1, [r7, #20]
 8002216:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fe5b 	bl	8001ed8 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002222:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002226:	b29b      	uxth	r3, r3
 8002228:	3301      	adds	r3, #1
 800222a:	b29b      	uxth	r3, r3
 800222c:	82bb      	strh	r3, [r7, #20]
 800222e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002232:	883b      	ldrh	r3, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	dded      	ble.n	8002214 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8002238:	e05f      	b.n	80022fa <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 800223a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d129      	bne.n	8002296 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8002242:	883a      	ldrh	r2, [r7, #0]
 8002244:	88bb      	ldrh	r3, [r7, #4]
 8002246:	429a      	cmp	r2, r3
 8002248:	d205      	bcs.n	8002256 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800224a:	883b      	ldrh	r3, [r7, #0]
 800224c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800224e:	88bb      	ldrh	r3, [r7, #4]
 8002250:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002252:	893b      	ldrh	r3, [r7, #8]
 8002254:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	429a      	cmp	r2, r3
 800225c:	d205      	bcs.n	800226a <SSD1306_DrawLine+0x160>
			tmp = x1;
 800225e:	887b      	ldrh	r3, [r7, #2]
 8002260:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002266:	893b      	ldrh	r3, [r7, #8]
 8002268:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	82bb      	strh	r3, [r7, #20]
 800226e:	e00c      	b.n	800228a <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8002270:	8abb      	ldrh	r3, [r7, #20]
 8002272:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002276:	88b9      	ldrh	r1, [r7, #4]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fe2d 	bl	8001ed8 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800227e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002282:	b29b      	uxth	r3, r3
 8002284:	3301      	adds	r3, #1
 8002286:	b29b      	uxth	r3, r3
 8002288:	82bb      	strh	r3, [r7, #20]
 800228a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	429a      	cmp	r2, r3
 8002292:	dded      	ble.n	8002270 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8002294:	e031      	b.n	80022fa <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8002296:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800229a:	88b9      	ldrh	r1, [r7, #4]
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fe1a 	bl	8001ed8 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80022a4:	88fa      	ldrh	r2, [r7, #6]
 80022a6:	887b      	ldrh	r3, [r7, #2]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d103      	bne.n	80022b4 <SSD1306_DrawLine+0x1aa>
 80022ac:	88ba      	ldrh	r2, [r7, #4]
 80022ae:	883b      	ldrh	r3, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d021      	beq.n	80022f8 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 80022b4:	8afb      	ldrh	r3, [r7, #22]
 80022b6:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80022b8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80022bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022c0:	425b      	negs	r3, r3
 80022c2:	429a      	cmp	r2, r3
 80022c4:	dd08      	ble.n	80022d8 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 80022c6:	8afa      	ldrh	r2, [r7, #22]
 80022c8:	8a3b      	ldrh	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80022d0:	89fa      	ldrh	r2, [r7, #14]
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	4413      	add	r3, r2
 80022d6:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 80022d8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80022dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	dad8      	bge.n	8002296 <SSD1306_DrawLine+0x18c>
			err += dx;
 80022e4:	8afa      	ldrh	r2, [r7, #22]
 80022e6:	8a7b      	ldrh	r3, [r7, #18]
 80022e8:	4413      	add	r3, r2
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80022ee:	89ba      	ldrh	r2, [r7, #12]
 80022f0:	88bb      	ldrh	r3, [r7, #4]
 80022f2:	4413      	add	r3, r2
 80022f4:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80022f6:	e7ce      	b.n	8002296 <SSD1306_DrawLine+0x18c>
			break;
 80022f8:	bf00      	nop
		}
	}
}
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd90      	pop	{r4, r7, pc}

08002300 <SSD1306_DrawFilledCircle>:
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
    }
}

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af02      	add	r7, sp, #8
 8002306:	4604      	mov	r4, r0
 8002308:	4608      	mov	r0, r1
 800230a:	4611      	mov	r1, r2
 800230c:	461a      	mov	r2, r3
 800230e:	4623      	mov	r3, r4
 8002310:	80fb      	strh	r3, [r7, #6]
 8002312:	4603      	mov	r3, r0
 8002314:	80bb      	strh	r3, [r7, #4]
 8002316:	460b      	mov	r3, r1
 8002318:	807b      	strh	r3, [r7, #2]
 800231a:	4613      	mov	r3, r2
 800231c:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800231e:	887b      	ldrh	r3, [r7, #2]
 8002320:	f1c3 0301 	rsb	r3, r3, #1
 8002324:	b29b      	uxth	r3, r3
 8002326:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002328:	2301      	movs	r3, #1
 800232a:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800232c:	887b      	ldrh	r3, [r7, #2]
 800232e:	461a      	mov	r2, r3
 8002330:	03d2      	lsls	r2, r2, #15
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	b29b      	uxth	r3, r3
 8002338:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800233e:	887b      	ldrh	r3, [r7, #2]
 8002340:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002342:	88f8      	ldrh	r0, [r7, #6]
 8002344:	88ba      	ldrh	r2, [r7, #4]
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	4413      	add	r3, r2
 800234a:	b29b      	uxth	r3, r3
 800234c:	787a      	ldrb	r2, [r7, #1]
 800234e:	4619      	mov	r1, r3
 8002350:	f7ff fdc2 	bl	8001ed8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8002354:	88f8      	ldrh	r0, [r7, #6]
 8002356:	88ba      	ldrh	r2, [r7, #4]
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	b29b      	uxth	r3, r3
 800235e:	787a      	ldrb	r2, [r7, #1]
 8002360:	4619      	mov	r1, r3
 8002362:	f7ff fdb9 	bl	8001ed8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8002366:	88fa      	ldrh	r2, [r7, #6]
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	4413      	add	r3, r2
 800236c:	b29b      	uxth	r3, r3
 800236e:	88b9      	ldrh	r1, [r7, #4]
 8002370:	787a      	ldrb	r2, [r7, #1]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fdb0 	bl	8001ed8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8002378:	88fa      	ldrh	r2, [r7, #6]
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	b29b      	uxth	r3, r3
 8002380:	88b9      	ldrh	r1, [r7, #4]
 8002382:	787a      	ldrb	r2, [r7, #1]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fda7 	bl	8001ed8 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 800238a:	88fa      	ldrh	r2, [r7, #6]
 800238c:	887b      	ldrh	r3, [r7, #2]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	b298      	uxth	r0, r3
 8002392:	88b9      	ldrh	r1, [r7, #4]
 8002394:	88fa      	ldrh	r2, [r7, #6]
 8002396:	887b      	ldrh	r3, [r7, #2]
 8002398:	4413      	add	r3, r2
 800239a:	b29a      	uxth	r2, r3
 800239c:	88bc      	ldrh	r4, [r7, #4]
 800239e:	787b      	ldrb	r3, [r7, #1]
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	4623      	mov	r3, r4
 80023a4:	f7ff feb1 	bl	800210a <SSD1306_DrawLine>

    while (x < y) {
 80023a8:	e079      	b.n	800249e <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 80023aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	db0e      	blt.n	80023d0 <SSD1306_DrawFilledCircle+0xd0>
            y--;
 80023b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80023be:	8a7b      	ldrh	r3, [r7, #18]
 80023c0:	3302      	adds	r3, #2
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80023c6:	8afa      	ldrh	r2, [r7, #22]
 80023c8:	8a7b      	ldrh	r3, [r7, #18]
 80023ca:	4413      	add	r3, r2
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80023d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	3301      	adds	r3, #1
 80023d8:	b29b      	uxth	r3, r3
 80023da:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80023dc:	8abb      	ldrh	r3, [r7, #20]
 80023de:	3302      	adds	r3, #2
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80023e4:	8afa      	ldrh	r2, [r7, #22]
 80023e6:	8abb      	ldrh	r3, [r7, #20]
 80023e8:	4413      	add	r3, r2
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 80023ee:	88fa      	ldrh	r2, [r7, #6]
 80023f0:	8a3b      	ldrh	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	b298      	uxth	r0, r3
 80023f6:	88ba      	ldrh	r2, [r7, #4]
 80023f8:	89fb      	ldrh	r3, [r7, #14]
 80023fa:	4413      	add	r3, r2
 80023fc:	b299      	uxth	r1, r3
 80023fe:	88fa      	ldrh	r2, [r7, #6]
 8002400:	8a3b      	ldrh	r3, [r7, #16]
 8002402:	4413      	add	r3, r2
 8002404:	b29c      	uxth	r4, r3
 8002406:	88ba      	ldrh	r2, [r7, #4]
 8002408:	89fb      	ldrh	r3, [r7, #14]
 800240a:	4413      	add	r3, r2
 800240c:	b29a      	uxth	r2, r3
 800240e:	787b      	ldrb	r3, [r7, #1]
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	4613      	mov	r3, r2
 8002414:	4622      	mov	r2, r4
 8002416:	f7ff fe78 	bl	800210a <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 800241a:	88fa      	ldrh	r2, [r7, #6]
 800241c:	8a3b      	ldrh	r3, [r7, #16]
 800241e:	4413      	add	r3, r2
 8002420:	b298      	uxth	r0, r3
 8002422:	88ba      	ldrh	r2, [r7, #4]
 8002424:	89fb      	ldrh	r3, [r7, #14]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	b299      	uxth	r1, r3
 800242a:	88fa      	ldrh	r2, [r7, #6]
 800242c:	8a3b      	ldrh	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	b29c      	uxth	r4, r3
 8002432:	88ba      	ldrh	r2, [r7, #4]
 8002434:	89fb      	ldrh	r3, [r7, #14]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	b29a      	uxth	r2, r3
 800243a:	787b      	ldrb	r3, [r7, #1]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	4613      	mov	r3, r2
 8002440:	4622      	mov	r2, r4
 8002442:	f7ff fe62 	bl	800210a <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8002446:	88fa      	ldrh	r2, [r7, #6]
 8002448:	89fb      	ldrh	r3, [r7, #14]
 800244a:	4413      	add	r3, r2
 800244c:	b298      	uxth	r0, r3
 800244e:	88ba      	ldrh	r2, [r7, #4]
 8002450:	8a3b      	ldrh	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	b299      	uxth	r1, r3
 8002456:	88fa      	ldrh	r2, [r7, #6]
 8002458:	89fb      	ldrh	r3, [r7, #14]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	b29c      	uxth	r4, r3
 800245e:	88ba      	ldrh	r2, [r7, #4]
 8002460:	8a3b      	ldrh	r3, [r7, #16]
 8002462:	4413      	add	r3, r2
 8002464:	b29a      	uxth	r2, r3
 8002466:	787b      	ldrb	r3, [r7, #1]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	4613      	mov	r3, r2
 800246c:	4622      	mov	r2, r4
 800246e:	f7ff fe4c 	bl	800210a <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8002472:	88fa      	ldrh	r2, [r7, #6]
 8002474:	89fb      	ldrh	r3, [r7, #14]
 8002476:	4413      	add	r3, r2
 8002478:	b298      	uxth	r0, r3
 800247a:	88ba      	ldrh	r2, [r7, #4]
 800247c:	8a3b      	ldrh	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	b299      	uxth	r1, r3
 8002482:	88fa      	ldrh	r2, [r7, #6]
 8002484:	89fb      	ldrh	r3, [r7, #14]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	b29c      	uxth	r4, r3
 800248a:	88ba      	ldrh	r2, [r7, #4]
 800248c:	8a3b      	ldrh	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	b29a      	uxth	r2, r3
 8002492:	787b      	ldrb	r3, [r7, #1]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	4613      	mov	r3, r2
 8002498:	4622      	mov	r2, r4
 800249a:	f7ff fe36 	bl	800210a <SSD1306_DrawLine>
    while (x < y) {
 800249e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80024a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	f6ff af7f 	blt.w	80023aa <SSD1306_DrawFilledCircle+0xaa>
    }
}
 80024ac:	bf00      	nop
 80024ae:	371c      	adds	r7, #28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd90      	pop	{r4, r7, pc}

080024b4 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b0c7      	sub	sp, #284	; 0x11c
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	4604      	mov	r4, r0
 80024bc:	4608      	mov	r0, r1
 80024be:	4639      	mov	r1, r7
 80024c0:	600a      	str	r2, [r1, #0]
 80024c2:	4619      	mov	r1, r3
 80024c4:	1dfb      	adds	r3, r7, #7
 80024c6:	4622      	mov	r2, r4
 80024c8:	701a      	strb	r2, [r3, #0]
 80024ca:	1dbb      	adds	r3, r7, #6
 80024cc:	4602      	mov	r2, r0
 80024ce:	701a      	strb	r2, [r3, #0]
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	460a      	mov	r2, r1
 80024d4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	1dba      	adds	r2, r7, #6
 80024dc:	7812      	ldrb	r2, [r2, #0]
 80024de:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80024e0:	2300      	movs	r3, #0
 80024e2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80024e6:	e010      	b.n	800250a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80024e8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024ec:	463a      	mov	r2, r7
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	441a      	add	r2, r3
 80024f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024f6:	3301      	adds	r3, #1
 80024f8:	7811      	ldrb	r1, [r2, #0]
 80024fa:	f107 020c 	add.w	r2, r7, #12
 80024fe:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002500:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002504:	3301      	adds	r3, #1
 8002506:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800250a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800250e:	b29b      	uxth	r3, r3
 8002510:	1d3a      	adds	r2, r7, #4
 8002512:	8812      	ldrh	r2, [r2, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d8e7      	bhi.n	80024e8 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002518:	1dfb      	adds	r3, r7, #7
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b299      	uxth	r1, r3
 800251e:	1d3b      	adds	r3, r7, #4
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	b298      	uxth	r0, r3
 8002526:	f107 020c 	add.w	r2, r7, #12
 800252a:	230a      	movs	r3, #10
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	4603      	mov	r3, r0
 8002530:	4803      	ldr	r0, [pc, #12]	; (8002540 <ssd1306_I2C_WriteMulti+0x8c>)
 8002532:	f000 fd0d 	bl	8002f50 <HAL_I2C_Master_Transmit>
}
 8002536:	bf00      	nop
 8002538:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800253c:	46bd      	mov	sp, r7
 800253e:	bd90      	pop	{r4, r7, pc}
 8002540:	200004bc 	.word	0x200004bc

08002544 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af02      	add	r7, sp, #8
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
 800254e:	460b      	mov	r3, r1
 8002550:	71bb      	strb	r3, [r7, #6]
 8002552:	4613      	mov	r3, r2
 8002554:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002556:	79bb      	ldrb	r3, [r7, #6]
 8002558:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800255a:	797b      	ldrb	r3, [r7, #5]
 800255c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	b299      	uxth	r1, r3
 8002562:	f107 020c 	add.w	r2, r7, #12
 8002566:	230a      	movs	r3, #10
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2302      	movs	r3, #2
 800256c:	4803      	ldr	r0, [pc, #12]	; (800257c <ssd1306_I2C_Write+0x38>)
 800256e:	f000 fcef 	bl	8002f50 <HAL_I2C_Master_Transmit>
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200004bc 	.word	0x200004bc

08002580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_MspInit+0x5c>)
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	4a14      	ldr	r2, [pc, #80]	; (80025dc <HAL_MspInit+0x5c>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6193      	str	r3, [r2, #24]
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_MspInit+0x5c>)
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <HAL_MspInit+0x5c>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4a0e      	ldr	r2, [pc, #56]	; (80025dc <HAL_MspInit+0x5c>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a8:	61d3      	str	r3, [r2, #28]
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <HAL_MspInit+0x5c>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <HAL_MspInit+0x60>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <HAL_MspInit+0x60>)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40010000 	.word	0x40010000

080025e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 0310 	add.w	r3, r7, #16
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a15      	ldr	r2, [pc, #84]	; (8002654 <HAL_I2C_MspInit+0x70>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d123      	bne.n	800264c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002604:	4b14      	ldr	r3, [pc, #80]	; (8002658 <HAL_I2C_MspInit+0x74>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4a13      	ldr	r2, [pc, #76]	; (8002658 <HAL_I2C_MspInit+0x74>)
 800260a:	f043 0308 	orr.w	r3, r3, #8
 800260e:	6193      	str	r3, [r2, #24]
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <HAL_I2C_MspInit+0x74>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800261c:	23c0      	movs	r3, #192	; 0xc0
 800261e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002620:	2312      	movs	r3, #18
 8002622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002624:	2303      	movs	r3, #3
 8002626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	4619      	mov	r1, r3
 800262e:	480b      	ldr	r0, [pc, #44]	; (800265c <HAL_I2C_MspInit+0x78>)
 8002630:	f000 fa0c 	bl	8002a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002634:	4b08      	ldr	r3, [pc, #32]	; (8002658 <HAL_I2C_MspInit+0x74>)
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	4a07      	ldr	r2, [pc, #28]	; (8002658 <HAL_I2C_MspInit+0x74>)
 800263a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800263e:	61d3      	str	r3, [r2, #28]
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_I2C_MspInit+0x74>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800264c:	bf00      	nop
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40005400 	.word	0x40005400
 8002658:	40021000 	.word	0x40021000
 800265c:	40010c00 	.word	0x40010c00

08002660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <HardFault_Handler+0x4>

08002672 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002676:	e7fe      	b.n	8002676 <MemManage_Handler+0x4>

08002678 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800267c:	e7fe      	b.n	800267c <BusFault_Handler+0x4>

0800267e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002682:	e7fe      	b.n	8002682 <UsageFault_Handler+0x4>

08002684 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ac:	f000 f8ce 	bl	800284c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026b0:	bf00      	nop
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <_sbrk+0x50>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <_sbrk+0x16>
		heap_end = &end;
 80026c4:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <_sbrk+0x50>)
 80026c6:	4a10      	ldr	r2, [pc, #64]	; (8002708 <_sbrk+0x54>)
 80026c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80026ca:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <_sbrk+0x50>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <_sbrk+0x50>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	466a      	mov	r2, sp
 80026da:	4293      	cmp	r3, r2
 80026dc:	d907      	bls.n	80026ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80026de:	f002 fb5b 	bl	8004d98 <__errno>
 80026e2:	4602      	mov	r2, r0
 80026e4:	230c      	movs	r3, #12
 80026e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ec:	e006      	b.n	80026fc <_sbrk+0x48>
	}

	heap_end += incr;
 80026ee:	4b05      	ldr	r3, [pc, #20]	; (8002704 <_sbrk+0x50>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	4a03      	ldr	r2, [pc, #12]	; (8002704 <_sbrk+0x50>)
 80026f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80026fa:	68fb      	ldr	r3, [r7, #12]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	2000049c 	.word	0x2000049c
 8002708:	20000518 	.word	0x20000518

0800270c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <SystemInit+0x5c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a14      	ldr	r2, [pc, #80]	; (8002768 <SystemInit+0x5c>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <SystemInit+0x5c>)
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4911      	ldr	r1, [pc, #68]	; (8002768 <SystemInit+0x5c>)
 8002722:	4b12      	ldr	r3, [pc, #72]	; (800276c <SystemInit+0x60>)
 8002724:	4013      	ands	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <SystemInit+0x5c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <SystemInit+0x5c>)
 800272e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002736:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <SystemInit+0x5c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <SystemInit+0x5c>)
 800273e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002742:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <SystemInit+0x5c>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4a07      	ldr	r2, [pc, #28]	; (8002768 <SystemInit+0x5c>)
 800274a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800274e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <SystemInit+0x5c>)
 8002752:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002756:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <SystemInit+0x64>)
 800275a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800275e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	40021000 	.word	0x40021000
 800276c:	f8ff0000 	.word	0xf8ff0000
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002774:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002776:	e003      	b.n	8002780 <LoopCopyDataInit>

08002778 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800277a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800277c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800277e:	3104      	adds	r1, #4

08002780 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002780:	480a      	ldr	r0, [pc, #40]	; (80027ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002784:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002786:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002788:	d3f6      	bcc.n	8002778 <CopyDataInit>
  ldr r2, =_sbss
 800278a:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800278c:	e002      	b.n	8002794 <LoopFillZerobss>

0800278e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800278e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002790:	f842 3b04 	str.w	r3, [r2], #4

08002794 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002796:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002798:	d3f9      	bcc.n	800278e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800279a:	f7ff ffb7 	bl	800270c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800279e:	f002 fb01 	bl	8004da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027a2:	f7ff fa01 	bl	8001ba8 <main>
  bx lr
 80027a6:	4770      	bx	lr
  ldr r3, =_sidata
 80027a8:	080065e4 	.word	0x080065e4
  ldr r0, =_sdata
 80027ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80027b0:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80027b4:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80027b8:	20000518 	.word	0x20000518

080027bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027bc:	e7fe      	b.n	80027bc <ADC1_2_IRQHandler>
	...

080027c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <HAL_Init+0x28>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <HAL_Init+0x28>)
 80027ca:	f043 0310 	orr.w	r3, r3, #16
 80027ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d0:	2003      	movs	r0, #3
 80027d2:	f000 f907 	bl	80029e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f000 f808 	bl	80027ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027dc:	f7ff fed0 	bl	8002580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40022000 	.word	0x40022000

080027ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_InitTick+0x54>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_InitTick+0x58>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	4619      	mov	r1, r3
 80027fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002802:	fbb3 f3f1 	udiv	r3, r3, r1
 8002806:	fbb2 f3f3 	udiv	r3, r2, r3
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f911 	bl	8002a32 <HAL_SYSTICK_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e00e      	b.n	8002838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b0f      	cmp	r3, #15
 800281e:	d80a      	bhi.n	8002836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002820:	2200      	movs	r2, #0
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	f04f 30ff 	mov.w	r0, #4294967295
 8002828:	f000 f8e7 	bl	80029fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800282c:	4a06      	ldr	r2, [pc, #24]	; (8002848 <HAL_InitTick+0x5c>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000008 	.word	0x20000008
 8002844:	20000010 	.word	0x20000010
 8002848:	2000000c 	.word	0x2000000c

0800284c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_IncTick+0x1c>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_IncTick+0x20>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4413      	add	r3, r2
 800285c:	4a03      	ldr	r2, [pc, #12]	; (800286c <HAL_IncTick+0x20>)
 800285e:	6013      	str	r3, [r2, #0]
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	20000010 	.word	0x20000010
 800286c:	20000510 	.word	0x20000510

08002870 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return uwTick;
 8002874:	4b02      	ldr	r3, [pc, #8]	; (8002880 <HAL_GetTick+0x10>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr
 8002880:	20000510 	.word	0x20000510

08002884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028a0:	4013      	ands	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b6:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	60d3      	str	r3, [r2, #12]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <__NVIC_GetPriorityGrouping+0x18>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	0a1b      	lsrs	r3, r3, #8
 80028d6:	f003 0307 	and.w	r3, r3, #7
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	db0a      	blt.n	8002912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	490c      	ldr	r1, [pc, #48]	; (8002934 <__NVIC_SetPriority+0x4c>)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	0112      	lsls	r2, r2, #4
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	440b      	add	r3, r1
 800290c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002910:	e00a      	b.n	8002928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4908      	ldr	r1, [pc, #32]	; (8002938 <__NVIC_SetPriority+0x50>)
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	3b04      	subs	r3, #4
 8002920:	0112      	lsls	r2, r2, #4
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	440b      	add	r3, r1
 8002926:	761a      	strb	r2, [r3, #24]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000e100 	.word	0xe000e100
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	; 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f1c3 0307 	rsb	r3, r3, #7
 8002956:	2b04      	cmp	r3, #4
 8002958:	bf28      	it	cs
 800295a:	2304      	movcs	r3, #4
 800295c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3304      	adds	r3, #4
 8002962:	2b06      	cmp	r3, #6
 8002964:	d902      	bls.n	800296c <NVIC_EncodePriority+0x30>
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3b03      	subs	r3, #3
 800296a:	e000      	b.n	800296e <NVIC_EncodePriority+0x32>
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	f04f 32ff 	mov.w	r2, #4294967295
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43da      	mvns	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	401a      	ands	r2, r3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002984:	f04f 31ff 	mov.w	r1, #4294967295
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	43d9      	mvns	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	4313      	orrs	r3, r2
         );
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	; 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr

080029a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b0:	d301      	bcc.n	80029b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029b2:	2301      	movs	r3, #1
 80029b4:	e00f      	b.n	80029d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <SysTick_Config+0x40>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029be:	210f      	movs	r1, #15
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295
 80029c4:	f7ff ff90 	bl	80028e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <SysTick_Config+0x40>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <SysTick_Config+0x40>)
 80029d0:	2207      	movs	r2, #7
 80029d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	e000e010 	.word	0xe000e010

080029e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ff49 	bl	8002884 <__NVIC_SetPriorityGrouping>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a0c:	f7ff ff5e 	bl	80028cc <__NVIC_GetPriorityGrouping>
 8002a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	6978      	ldr	r0, [r7, #20]
 8002a18:	f7ff ff90 	bl	800293c <NVIC_EncodePriority>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff5f 	bl	80028e8 <__NVIC_SetPriority>
}
 8002a2a:	bf00      	nop
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff ffb0 	bl	80029a0 <SysTick_Config>
 8002a40:	4603      	mov	r3, r0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b08b      	sub	sp, #44	; 0x2c
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5e:	e127      	b.n	8002cb0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a60:	2201      	movs	r2, #1
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	f040 8116 	bne.w	8002caa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b12      	cmp	r3, #18
 8002a84:	d034      	beq.n	8002af0 <HAL_GPIO_Init+0xa4>
 8002a86:	2b12      	cmp	r3, #18
 8002a88:	d80d      	bhi.n	8002aa6 <HAL_GPIO_Init+0x5a>
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d02b      	beq.n	8002ae6 <HAL_GPIO_Init+0x9a>
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d804      	bhi.n	8002a9c <HAL_GPIO_Init+0x50>
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d031      	beq.n	8002afa <HAL_GPIO_Init+0xae>
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d01c      	beq.n	8002ad4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a9a:	e048      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d043      	beq.n	8002b28 <HAL_GPIO_Init+0xdc>
 8002aa0:	2b11      	cmp	r3, #17
 8002aa2:	d01b      	beq.n	8002adc <HAL_GPIO_Init+0x90>
          break;
 8002aa4:	e043      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002aa6:	4a89      	ldr	r2, [pc, #548]	; (8002ccc <HAL_GPIO_Init+0x280>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d026      	beq.n	8002afa <HAL_GPIO_Init+0xae>
 8002aac:	4a87      	ldr	r2, [pc, #540]	; (8002ccc <HAL_GPIO_Init+0x280>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d806      	bhi.n	8002ac0 <HAL_GPIO_Init+0x74>
 8002ab2:	4a87      	ldr	r2, [pc, #540]	; (8002cd0 <HAL_GPIO_Init+0x284>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d020      	beq.n	8002afa <HAL_GPIO_Init+0xae>
 8002ab8:	4a86      	ldr	r2, [pc, #536]	; (8002cd4 <HAL_GPIO_Init+0x288>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01d      	beq.n	8002afa <HAL_GPIO_Init+0xae>
          break;
 8002abe:	e036      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ac0:	4a85      	ldr	r2, [pc, #532]	; (8002cd8 <HAL_GPIO_Init+0x28c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d019      	beq.n	8002afa <HAL_GPIO_Init+0xae>
 8002ac6:	4a85      	ldr	r2, [pc, #532]	; (8002cdc <HAL_GPIO_Init+0x290>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d016      	beq.n	8002afa <HAL_GPIO_Init+0xae>
 8002acc:	4a84      	ldr	r2, [pc, #528]	; (8002ce0 <HAL_GPIO_Init+0x294>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d013      	beq.n	8002afa <HAL_GPIO_Init+0xae>
          break;
 8002ad2:	e02c      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	623b      	str	r3, [r7, #32]
          break;
 8002ada:	e028      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	623b      	str	r3, [r7, #32]
          break;
 8002ae4:	e023      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	3308      	adds	r3, #8
 8002aec:	623b      	str	r3, [r7, #32]
          break;
 8002aee:	e01e      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	330c      	adds	r3, #12
 8002af6:	623b      	str	r3, [r7, #32]
          break;
 8002af8:	e019      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d102      	bne.n	8002b08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b02:	2304      	movs	r3, #4
 8002b04:	623b      	str	r3, [r7, #32]
          break;
 8002b06:	e012      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d105      	bne.n	8002b1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b10:	2308      	movs	r3, #8
 8002b12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	611a      	str	r2, [r3, #16]
          break;
 8002b1a:	e008      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b1c:	2308      	movs	r3, #8
 8002b1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	615a      	str	r2, [r3, #20]
          break;
 8002b26:	e002      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	623b      	str	r3, [r7, #32]
          break;
 8002b2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2bff      	cmp	r3, #255	; 0xff
 8002b32:	d801      	bhi.n	8002b38 <HAL_GPIO_Init+0xec>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	e001      	b.n	8002b3c <HAL_GPIO_Init+0xf0>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	2bff      	cmp	r3, #255	; 0xff
 8002b42:	d802      	bhi.n	8002b4a <HAL_GPIO_Init+0xfe>
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	e002      	b.n	8002b50 <HAL_GPIO_Init+0x104>
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	3b08      	subs	r3, #8
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	210f      	movs	r1, #15
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	401a      	ands	r2, r3
 8002b62:	6a39      	ldr	r1, [r7, #32]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 8096 	beq.w	8002caa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b7e:	4b59      	ldr	r3, [pc, #356]	; (8002ce4 <HAL_GPIO_Init+0x298>)
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	4a58      	ldr	r2, [pc, #352]	; (8002ce4 <HAL_GPIO_Init+0x298>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6193      	str	r3, [r2, #24]
 8002b8a:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <HAL_GPIO_Init+0x298>)
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b96:	4a54      	ldr	r2, [pc, #336]	; (8002ce8 <HAL_GPIO_Init+0x29c>)
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	220f      	movs	r2, #15
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4b      	ldr	r2, [pc, #300]	; (8002cec <HAL_GPIO_Init+0x2a0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_GPIO_Init+0x19e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4a      	ldr	r2, [pc, #296]	; (8002cf0 <HAL_GPIO_Init+0x2a4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00d      	beq.n	8002be6 <HAL_GPIO_Init+0x19a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a49      	ldr	r2, [pc, #292]	; (8002cf4 <HAL_GPIO_Init+0x2a8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d007      	beq.n	8002be2 <HAL_GPIO_Init+0x196>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a48      	ldr	r2, [pc, #288]	; (8002cf8 <HAL_GPIO_Init+0x2ac>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <HAL_GPIO_Init+0x192>
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e006      	b.n	8002bec <HAL_GPIO_Init+0x1a0>
 8002bde:	2304      	movs	r3, #4
 8002be0:	e004      	b.n	8002bec <HAL_GPIO_Init+0x1a0>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e002      	b.n	8002bec <HAL_GPIO_Init+0x1a0>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <HAL_GPIO_Init+0x1a0>
 8002bea:	2300      	movs	r3, #0
 8002bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bee:	f002 0203 	and.w	r2, r2, #3
 8002bf2:	0092      	lsls	r2, r2, #2
 8002bf4:	4093      	lsls	r3, r2
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bfc:	493a      	ldr	r1, [pc, #232]	; (8002ce8 <HAL_GPIO_Init+0x29c>)
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	089b      	lsrs	r3, r3, #2
 8002c02:	3302      	adds	r3, #2
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d006      	beq.n	8002c24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c16:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4938      	ldr	r1, [pc, #224]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]
 8002c22:	e006      	b.n	8002c32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c24:	4b35      	ldr	r3, [pc, #212]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	4933      	ldr	r1, [pc, #204]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d006      	beq.n	8002c4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c3e:	4b2f      	ldr	r3, [pc, #188]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	492e      	ldr	r1, [pc, #184]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	604b      	str	r3, [r1, #4]
 8002c4a:	e006      	b.n	8002c5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c4c:	4b2b      	ldr	r3, [pc, #172]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	4929      	ldr	r1, [pc, #164]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c66:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	4924      	ldr	r1, [pc, #144]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
 8002c72:	e006      	b.n	8002c82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c74:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	491f      	ldr	r1, [pc, #124]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d006      	beq.n	8002c9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c8e:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	491a      	ldr	r1, [pc, #104]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60cb      	str	r3, [r1, #12]
 8002c9a:	e006      	b.n	8002caa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c9c:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	4915      	ldr	r1, [pc, #84]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	3301      	adds	r3, #1
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f47f aed0 	bne.w	8002a60 <HAL_GPIO_Init+0x14>
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	372c      	adds	r7, #44	; 0x2c
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	10210000 	.word	0x10210000
 8002cd0:	10110000 	.word	0x10110000
 8002cd4:	10120000 	.word	0x10120000
 8002cd8:	10310000 	.word	0x10310000
 8002cdc:	10320000 	.word	0x10320000
 8002ce0:	10220000 	.word	0x10220000
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40010000 	.word	0x40010000
 8002cec:	40010800 	.word	0x40010800
 8002cf0:	40010c00 	.word	0x40010c00
 8002cf4:	40011000 	.word	0x40011000
 8002cf8:	40011400 	.word	0x40011400
 8002cfc:	40010400 	.word	0x40010400

08002d00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e10f      	b.n	8002f32 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff fc5c 	bl	80025e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2224      	movs	r2, #36	; 0x24
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d44:	f000 ffd4 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8002d48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4a7b      	ldr	r2, [pc, #492]	; (8002f3c <HAL_I2C_Init+0x23c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d807      	bhi.n	8002d64 <HAL_I2C_Init+0x64>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4a7a      	ldr	r2, [pc, #488]	; (8002f40 <HAL_I2C_Init+0x240>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	bf94      	ite	ls
 8002d5c:	2301      	movls	r3, #1
 8002d5e:	2300      	movhi	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e006      	b.n	8002d72 <HAL_I2C_Init+0x72>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a77      	ldr	r2, [pc, #476]	; (8002f44 <HAL_I2C_Init+0x244>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	bf94      	ite	ls
 8002d6c:	2301      	movls	r3, #1
 8002d6e:	2300      	movhi	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e0db      	b.n	8002f32 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4a72      	ldr	r2, [pc, #456]	; (8002f48 <HAL_I2C_Init+0x248>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	0c9b      	lsrs	r3, r3, #18
 8002d84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4a64      	ldr	r2, [pc, #400]	; (8002f3c <HAL_I2C_Init+0x23c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d802      	bhi.n	8002db4 <HAL_I2C_Init+0xb4>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	3301      	adds	r3, #1
 8002db2:	e009      	b.n	8002dc8 <HAL_I2C_Init+0xc8>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	4a63      	ldr	r2, [pc, #396]	; (8002f4c <HAL_I2C_Init+0x24c>)
 8002dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc4:	099b      	lsrs	r3, r3, #6
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4956      	ldr	r1, [pc, #344]	; (8002f3c <HAL_I2C_Init+0x23c>)
 8002de4:	428b      	cmp	r3, r1
 8002de6:	d80d      	bhi.n	8002e04 <HAL_I2C_Init+0x104>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1e59      	subs	r1, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	bf38      	it	cc
 8002e00:	2304      	movcc	r3, #4
 8002e02:	e04f      	b.n	8002ea4 <HAL_I2C_Init+0x1a4>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d111      	bne.n	8002e30 <HAL_I2C_Init+0x130>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1e58      	subs	r0, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	440b      	add	r3, r1
 8002e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e012      	b.n	8002e56 <HAL_I2C_Init+0x156>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1e58      	subs	r0, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	0099      	lsls	r1, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Init+0x15e>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e022      	b.n	8002ea4 <HAL_I2C_Init+0x1a4>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10e      	bne.n	8002e84 <HAL_I2C_Init+0x184>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1e58      	subs	r0, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	440b      	add	r3, r1
 8002e74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e82:	e00f      	b.n	8002ea4 <HAL_I2C_Init+0x1a4>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e58      	subs	r0, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	0099      	lsls	r1, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	6809      	ldr	r1, [r1, #0]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ed2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6911      	ldr	r1, [r2, #16]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68d2      	ldr	r2, [r2, #12]
 8002ede:	4311      	orrs	r1, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	000186a0 	.word	0x000186a0
 8002f40:	001e847f 	.word	0x001e847f
 8002f44:	003d08ff 	.word	0x003d08ff
 8002f48:	431bde83 	.word	0x431bde83
 8002f4c:	10624dd3 	.word	0x10624dd3

08002f50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	817b      	strh	r3, [r7, #10]
 8002f60:	4613      	mov	r3, r2
 8002f62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f64:	f7ff fc84 	bl	8002870 <HAL_GetTick>
 8002f68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	f040 80e0 	bne.w	8003138 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2319      	movs	r3, #25
 8002f7e:	2201      	movs	r2, #1
 8002f80:	4970      	ldr	r1, [pc, #448]	; (8003144 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f958 	bl	8003238 <I2C_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e0d3      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_I2C_Master_Transmit+0x50>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e0cc      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d007      	beq.n	8002fc6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0201 	orr.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2221      	movs	r2, #33	; 0x21
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	893a      	ldrh	r2, [r7, #8]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a50      	ldr	r2, [pc, #320]	; (8003148 <HAL_I2C_Master_Transmit+0x1f8>)
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003008:	8979      	ldrh	r1, [r7, #10]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	6a3a      	ldr	r2, [r7, #32]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f89c 	bl	800314c <I2C_MasterRequestWrite>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e08d      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003034:	e066      	b.n	8003104 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	6a39      	ldr	r1, [r7, #32]
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f9d2 	bl	80033e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00d      	beq.n	8003062 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	2b04      	cmp	r3, #4
 800304c:	d107      	bne.n	800305e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e06b      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	781a      	ldrb	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b04      	cmp	r3, #4
 800309e:	d11b      	bne.n	80030d8 <HAL_I2C_Master_Transmit+0x188>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d017      	beq.n	80030d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	6a39      	ldr	r1, [r7, #32]
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f9c2 	bl	8003466 <I2C_WaitOnBTFFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00d      	beq.n	8003104 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d107      	bne.n	8003100 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e01a      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	d194      	bne.n	8003036 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	e000      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003138:	2302      	movs	r3, #2
  }
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	00100002 	.word	0x00100002
 8003148:	ffff0000 	.word	0xffff0000

0800314c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	460b      	mov	r3, r1
 800315a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d006      	beq.n	8003176 <I2C_MasterRequestWrite+0x2a>
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d003      	beq.n	8003176 <I2C_MasterRequestWrite+0x2a>
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003174:	d108      	bne.n	8003188 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e00b      	b.n	80031a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	2b12      	cmp	r3, #18
 800318e:	d107      	bne.n	80031a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800319e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f843 	bl	8003238 <I2C_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e035      	b.n	8003228 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031c4:	d108      	bne.n	80031d8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031c6:	897b      	ldrh	r3, [r7, #10]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031d4:	611a      	str	r2, [r3, #16]
 80031d6:	e01b      	b.n	8003210 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031d8:	897b      	ldrh	r3, [r7, #10]
 80031da:	11db      	asrs	r3, r3, #7
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f003 0306 	and.w	r3, r3, #6
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f063 030f 	orn	r3, r3, #15
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	490e      	ldr	r1, [pc, #56]	; (8003230 <I2C_MasterRequestWrite+0xe4>)
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f875 	bl	80032e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e010      	b.n	8003228 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003206:	897b      	ldrh	r3, [r7, #10]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	4907      	ldr	r1, [pc, #28]	; (8003234 <I2C_MasterRequestWrite+0xe8>)
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f865 	bl	80032e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	00010008 	.word	0x00010008
 8003234:	00010002 	.word	0x00010002

08003238 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	4613      	mov	r3, r2
 8003246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003248:	e025      	b.n	8003296 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003250:	d021      	beq.n	8003296 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003252:	f7ff fb0d 	bl	8002870 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d302      	bcc.n	8003268 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d116      	bne.n	8003296 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f043 0220 	orr.w	r2, r3, #32
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e023      	b.n	80032de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d10d      	bne.n	80032bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	43da      	mvns	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4013      	ands	r3, r2
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	bf0c      	ite	eq
 80032b2:	2301      	moveq	r3, #1
 80032b4:	2300      	movne	r3, #0
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	e00c      	b.n	80032d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	43da      	mvns	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4013      	ands	r3, r2
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	bf0c      	ite	eq
 80032ce:	2301      	moveq	r3, #1
 80032d0:	2300      	movne	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d0b6      	beq.n	800324a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032f4:	e051      	b.n	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003304:	d123      	bne.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003314:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800331e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f043 0204 	orr.w	r2, r3, #4
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e046      	b.n	80033dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d021      	beq.n	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003356:	f7ff fa8b 	bl	8002870 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	429a      	cmp	r2, r3
 8003364:	d302      	bcc.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d116      	bne.n	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f043 0220 	orr.w	r2, r3, #32
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e020      	b.n	80033dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d10c      	bne.n	80033be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	43da      	mvns	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4013      	ands	r3, r2
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf14      	ite	ne
 80033b6:	2301      	movne	r3, #1
 80033b8:	2300      	moveq	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	e00b      	b.n	80033d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	43da      	mvns	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4013      	ands	r3, r2
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf14      	ite	ne
 80033d0:	2301      	movne	r3, #1
 80033d2:	2300      	moveq	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d18d      	bne.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033f0:	e02d      	b.n	800344e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f878 	bl	80034e8 <I2C_IsAcknowledgeFailed>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e02d      	b.n	800345e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d021      	beq.n	800344e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7ff fa31 	bl	8002870 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d116      	bne.n	800344e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f043 0220 	orr.w	r2, r3, #32
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e007      	b.n	800345e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b80      	cmp	r3, #128	; 0x80
 800345a:	d1ca      	bne.n	80033f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003472:	e02d      	b.n	80034d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f837 	bl	80034e8 <I2C_IsAcknowledgeFailed>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e02d      	b.n	80034e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348a:	d021      	beq.n	80034d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348c:	f7ff f9f0 	bl	8002870 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	429a      	cmp	r2, r3
 800349a:	d302      	bcc.n	80034a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d116      	bne.n	80034d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	f043 0220 	orr.w	r2, r3, #32
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e007      	b.n	80034e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d1ca      	bne.n	8003474 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fe:	d11b      	bne.n	8003538 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003508:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	f043 0204 	orr.w	r2, r3, #4
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e26c      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 8087 	beq.w	8003672 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003564:	4b92      	ldr	r3, [pc, #584]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	2b04      	cmp	r3, #4
 800356e:	d00c      	beq.n	800358a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003570:	4b8f      	ldr	r3, [pc, #572]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b08      	cmp	r3, #8
 800357a:	d112      	bne.n	80035a2 <HAL_RCC_OscConfig+0x5e>
 800357c:	4b8c      	ldr	r3, [pc, #560]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003588:	d10b      	bne.n	80035a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358a:	4b89      	ldr	r3, [pc, #548]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d06c      	beq.n	8003670 <HAL_RCC_OscConfig+0x12c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d168      	bne.n	8003670 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e246      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035aa:	d106      	bne.n	80035ba <HAL_RCC_OscConfig+0x76>
 80035ac:	4b80      	ldr	r3, [pc, #512]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a7f      	ldr	r2, [pc, #508]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 80035b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	e02e      	b.n	8003618 <HAL_RCC_OscConfig+0xd4>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0x98>
 80035c2:	4b7b      	ldr	r3, [pc, #492]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a7a      	ldr	r2, [pc, #488]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	4b78      	ldr	r3, [pc, #480]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a77      	ldr	r2, [pc, #476]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e01d      	b.n	8003618 <HAL_RCC_OscConfig+0xd4>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e4:	d10c      	bne.n	8003600 <HAL_RCC_OscConfig+0xbc>
 80035e6:	4b72      	ldr	r3, [pc, #456]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a71      	ldr	r2, [pc, #452]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 80035ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	4b6f      	ldr	r3, [pc, #444]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a6e      	ldr	r2, [pc, #440]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e00b      	b.n	8003618 <HAL_RCC_OscConfig+0xd4>
 8003600:	4b6b      	ldr	r3, [pc, #428]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a6a      	ldr	r2, [pc, #424]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 8003606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b68      	ldr	r3, [pc, #416]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a67      	ldr	r2, [pc, #412]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 8003612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003616:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d013      	beq.n	8003648 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7ff f926 	bl	8002870 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003628:	f7ff f922 	bl	8002870 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e1fa      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	4b5d      	ldr	r3, [pc, #372]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0xe4>
 8003646:	e014      	b.n	8003672 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7ff f912 	bl	8002870 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003650:	f7ff f90e 	bl	8002870 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	; 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e1e6      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003662:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x10c>
 800366e:	e000      	b.n	8003672 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d063      	beq.n	8003746 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800367e:	4b4c      	ldr	r3, [pc, #304]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800368a:	4b49      	ldr	r3, [pc, #292]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b08      	cmp	r3, #8
 8003694:	d11c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x18c>
 8003696:	4b46      	ldr	r3, [pc, #280]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d116      	bne.n	80036d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a2:	4b43      	ldr	r3, [pc, #268]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_RCC_OscConfig+0x176>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e1ba      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ba:	4b3d      	ldr	r3, [pc, #244]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4939      	ldr	r1, [pc, #228]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ce:	e03a      	b.n	8003746 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d020      	beq.n	800371a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d8:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036de:	f7ff f8c7 	bl	8002870 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e6:	f7ff f8c3 	bl	8002870 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e19b      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	4b2d      	ldr	r3, [pc, #180]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003704:	4b2a      	ldr	r3, [pc, #168]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4927      	ldr	r1, [pc, #156]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]
 8003718:	e015      	b.n	8003746 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800371a:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <HAL_RCC_OscConfig+0x270>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7ff f8a6 	bl	8002870 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003728:	f7ff f8a2 	bl	8002870 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e17a      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d03a      	beq.n	80037c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d019      	beq.n	800378e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800375a:	4b17      	ldr	r3, [pc, #92]	; (80037b8 <HAL_RCC_OscConfig+0x274>)
 800375c:	2201      	movs	r2, #1
 800375e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003760:	f7ff f886 	bl	8002870 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003768:	f7ff f882 	bl	8002870 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e15a      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <HAL_RCC_OscConfig+0x26c>)
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003786:	2001      	movs	r0, #1
 8003788:	f000 fac6 	bl	8003d18 <RCC_Delay>
 800378c:	e01c      	b.n	80037c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <HAL_RCC_OscConfig+0x274>)
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003794:	f7ff f86c 	bl	8002870 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800379a:	e00f      	b.n	80037bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800379c:	f7ff f868 	bl	8002870 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d908      	bls.n	80037bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e140      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000
 80037b4:	42420000 	.word	0x42420000
 80037b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037bc:	4b9e      	ldr	r3, [pc, #632]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e9      	bne.n	800379c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80a6 	beq.w	8003922 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037da:	4b97      	ldr	r3, [pc, #604]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10d      	bne.n	8003802 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	4b94      	ldr	r3, [pc, #592]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	4a93      	ldr	r2, [pc, #588]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 80037ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f0:	61d3      	str	r3, [r2, #28]
 80037f2:	4b91      	ldr	r3, [pc, #580]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037fe:	2301      	movs	r3, #1
 8003800:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003802:	4b8e      	ldr	r3, [pc, #568]	; (8003a3c <HAL_RCC_OscConfig+0x4f8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d118      	bne.n	8003840 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800380e:	4b8b      	ldr	r3, [pc, #556]	; (8003a3c <HAL_RCC_OscConfig+0x4f8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a8a      	ldr	r2, [pc, #552]	; (8003a3c <HAL_RCC_OscConfig+0x4f8>)
 8003814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800381a:	f7ff f829 	bl	8002870 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003822:	f7ff f825 	bl	8002870 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b64      	cmp	r3, #100	; 0x64
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e0fd      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	4b81      	ldr	r3, [pc, #516]	; (8003a3c <HAL_RCC_OscConfig+0x4f8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d106      	bne.n	8003856 <HAL_RCC_OscConfig+0x312>
 8003848:	4b7b      	ldr	r3, [pc, #492]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	4a7a      	ldr	r2, [pc, #488]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	6213      	str	r3, [r2, #32]
 8003854:	e02d      	b.n	80038b2 <HAL_RCC_OscConfig+0x36e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10c      	bne.n	8003878 <HAL_RCC_OscConfig+0x334>
 800385e:	4b76      	ldr	r3, [pc, #472]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	4a75      	ldr	r2, [pc, #468]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	6213      	str	r3, [r2, #32]
 800386a:	4b73      	ldr	r3, [pc, #460]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	4a72      	ldr	r2, [pc, #456]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 8003870:	f023 0304 	bic.w	r3, r3, #4
 8003874:	6213      	str	r3, [r2, #32]
 8003876:	e01c      	b.n	80038b2 <HAL_RCC_OscConfig+0x36e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b05      	cmp	r3, #5
 800387e:	d10c      	bne.n	800389a <HAL_RCC_OscConfig+0x356>
 8003880:	4b6d      	ldr	r3, [pc, #436]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	4a6c      	ldr	r2, [pc, #432]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 8003886:	f043 0304 	orr.w	r3, r3, #4
 800388a:	6213      	str	r3, [r2, #32]
 800388c:	4b6a      	ldr	r3, [pc, #424]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	4a69      	ldr	r2, [pc, #420]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	6213      	str	r3, [r2, #32]
 8003898:	e00b      	b.n	80038b2 <HAL_RCC_OscConfig+0x36e>
 800389a:	4b67      	ldr	r3, [pc, #412]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	4a66      	ldr	r2, [pc, #408]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	6213      	str	r3, [r2, #32]
 80038a6:	4b64      	ldr	r3, [pc, #400]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	4a63      	ldr	r2, [pc, #396]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 80038ac:	f023 0304 	bic.w	r3, r3, #4
 80038b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d015      	beq.n	80038e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ba:	f7fe ffd9 	bl	8002870 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c2:	f7fe ffd5 	bl	8002870 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e0ab      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d8:	4b57      	ldr	r3, [pc, #348]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0ee      	beq.n	80038c2 <HAL_RCC_OscConfig+0x37e>
 80038e4:	e014      	b.n	8003910 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e6:	f7fe ffc3 	bl	8002870 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ec:	e00a      	b.n	8003904 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ee:	f7fe ffbf 	bl	8002870 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e095      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003904:	4b4c      	ldr	r3, [pc, #304]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1ee      	bne.n	80038ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003910:	7dfb      	ldrb	r3, [r7, #23]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d105      	bne.n	8003922 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003916:	4b48      	ldr	r3, [pc, #288]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	4a47      	ldr	r2, [pc, #284]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 800391c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003920:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 8081 	beq.w	8003a2e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800392c:	4b42      	ldr	r3, [pc, #264]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b08      	cmp	r3, #8
 8003936:	d061      	beq.n	80039fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d146      	bne.n	80039ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003940:	4b3f      	ldr	r3, [pc, #252]	; (8003a40 <HAL_RCC_OscConfig+0x4fc>)
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003946:	f7fe ff93 	bl	8002870 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394e:	f7fe ff8f 	bl	8002870 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e067      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003960:	4b35      	ldr	r3, [pc, #212]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f0      	bne.n	800394e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003974:	d108      	bne.n	8003988 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003976:	4b30      	ldr	r3, [pc, #192]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	492d      	ldr	r1, [pc, #180]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 8003984:	4313      	orrs	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003988:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a19      	ldr	r1, [r3, #32]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	430b      	orrs	r3, r1
 800399a:	4927      	ldr	r1, [pc, #156]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 800399c:	4313      	orrs	r3, r2
 800399e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a0:	4b27      	ldr	r3, [pc, #156]	; (8003a40 <HAL_RCC_OscConfig+0x4fc>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a6:	f7fe ff63 	bl	8002870 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ae:	f7fe ff5f 	bl	8002870 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e037      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x46a>
 80039cc:	e02f      	b.n	8003a2e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ce:	4b1c      	ldr	r3, [pc, #112]	; (8003a40 <HAL_RCC_OscConfig+0x4fc>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fe ff4c 	bl	8002870 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fe ff48 	bl	8002870 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e020      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x498>
 80039fa:	e018      	b.n	8003a2e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e013      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_OscConfig+0x4f4>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40007000 	.word	0x40007000
 8003a40:	42420060 	.word	0x42420060

08003a44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0d0      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a58:	4b6a      	ldr	r3, [pc, #424]	; (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d910      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a66:	4b67      	ldr	r3, [pc, #412]	; (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 0207 	bic.w	r2, r3, #7
 8003a6e:	4965      	ldr	r1, [pc, #404]	; (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	4b63      	ldr	r3, [pc, #396]	; (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0b8      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d020      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa0:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4a58      	ldr	r2, [pc, #352]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab8:	4b53      	ldr	r3, [pc, #332]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4a52      	ldr	r2, [pc, #328]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003abe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ac2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac4:	4b50      	ldr	r3, [pc, #320]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	494d      	ldr	r1, [pc, #308]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d040      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d107      	bne.n	8003afa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	4b47      	ldr	r3, [pc, #284]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d115      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e07f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d107      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b02:	4b41      	ldr	r3, [pc, #260]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e073      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b12:	4b3d      	ldr	r3, [pc, #244]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e06b      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b22:	4b39      	ldr	r3, [pc, #228]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f023 0203 	bic.w	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4936      	ldr	r1, [pc, #216]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b34:	f7fe fe9c 	bl	8002870 <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3c:	f7fe fe98 	bl	8002870 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e053      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b52:	4b2d      	ldr	r3, [pc, #180]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 020c 	and.w	r2, r3, #12
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d1eb      	bne.n	8003b3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b64:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d210      	bcs.n	8003b94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	4b24      	ldr	r3, [pc, #144]	; (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 0207 	bic.w	r2, r3, #7
 8003b7a:	4922      	ldr	r1, [pc, #136]	; (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e032      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba0:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4916      	ldr	r1, [pc, #88]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	490e      	ldr	r1, [pc, #56]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bd2:	f000 f821 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003bd6:	4601      	mov	r1, r0
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <HAL_RCC_ClockConfig+0x1c8>)
 8003be4:	5cd3      	ldrb	r3, [r2, r3]
 8003be6:	fa21 f303 	lsr.w	r3, r1, r3
 8003bea:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <HAL_RCC_ClockConfig+0x1cc>)
 8003bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_RCC_ClockConfig+0x1d0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe fdfa 	bl	80027ec <HAL_InitTick>

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40022000 	.word	0x40022000
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	080063b8 	.word	0x080063b8
 8003c10:	20000008 	.word	0x20000008
 8003c14:	2000000c 	.word	0x2000000c

08003c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	b490      	push	{r4, r7}
 8003c1a:	b08a      	sub	sp, #40	; 0x28
 8003c1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c1e:	4b2a      	ldr	r3, [pc, #168]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c20:	1d3c      	adds	r4, r7, #4
 8003c22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c28:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	2300      	movs	r3, #0
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	2300      	movs	r3, #0
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c42:	4b23      	ldr	r3, [pc, #140]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d002      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x40>
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d003      	beq.n	8003c5e <HAL_RCC_GetSysClockFreq+0x46>
 8003c56:	e02d      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c58:	4b1e      	ldr	r3, [pc, #120]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c5a:	623b      	str	r3, [r7, #32]
      break;
 8003c5c:	e02d      	b.n	8003cba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	0c9b      	lsrs	r3, r3, #18
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c70:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d013      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c7c:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	0c5b      	lsrs	r3, r3, #17
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	4a0f      	ldr	r2, [pc, #60]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c96:	fb02 f203 	mul.w	r2, r2, r3
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca2:	e004      	b.n	8003cae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	4a0c      	ldr	r2, [pc, #48]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ca8:	fb02 f303 	mul.w	r3, r2, r3
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	623b      	str	r3, [r7, #32]
      break;
 8003cb2:	e002      	b.n	8003cba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cb4:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cb6:	623b      	str	r3, [r7, #32]
      break;
 8003cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cba:	6a3b      	ldr	r3, [r7, #32]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3728      	adds	r7, #40	; 0x28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc90      	pop	{r4, r7}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	08005648 	.word	0x08005648
 8003ccc:	08005658 	.word	0x08005658
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	007a1200 	.word	0x007a1200
 8003cd8:	003d0900 	.word	0x003d0900

08003cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce0:	4b02      	ldr	r3, [pc, #8]	; (8003cec <HAL_RCC_GetHCLKFreq+0x10>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	20000008 	.word	0x20000008

08003cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cf4:	f7ff fff2 	bl	8003cdc <HAL_RCC_GetHCLKFreq>
 8003cf8:	4601      	mov	r1, r0
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4a03      	ldr	r2, [pc, #12]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d06:	5cd3      	ldrb	r3, [r2, r3]
 8003d08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	080063c8 	.word	0x080063c8

08003d18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d20:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <RCC_Delay+0x34>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a0a      	ldr	r2, [pc, #40]	; (8003d50 <RCC_Delay+0x38>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	0a5b      	lsrs	r3, r3, #9
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d34:	bf00      	nop
  }
  while (Delay --);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1e5a      	subs	r2, r3, #1
 8003d3a:	60fa      	str	r2, [r7, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f9      	bne.n	8003d34 <RCC_Delay+0x1c>
}
 8003d40:	bf00      	nop
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	20000008 	.word	0x20000008
 8003d50:	10624dd3 	.word	0x10624dd3

08003d54 <cos>:
 8003d54:	b530      	push	{r4, r5, lr}
 8003d56:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <cos+0x64>)
 8003d58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	b087      	sub	sp, #28
 8003d60:	dc04      	bgt.n	8003d6c <cos+0x18>
 8003d62:	2200      	movs	r2, #0
 8003d64:	2300      	movs	r3, #0
 8003d66:	f000 fa57 	bl	8004218 <__kernel_cos>
 8003d6a:	e006      	b.n	8003d7a <cos+0x26>
 8003d6c:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <cos+0x68>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	dd05      	ble.n	8003d7e <cos+0x2a>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	f7fc f9ef 	bl	8000158 <__aeabi_dsub>
 8003d7a:	b007      	add	sp, #28
 8003d7c:	bd30      	pop	{r4, r5, pc}
 8003d7e:	aa02      	add	r2, sp, #8
 8003d80:	f000 f85a 	bl	8003e38 <__ieee754_rem_pio2>
 8003d84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d88:	f000 0403 	and.w	r4, r0, #3
 8003d8c:	2c01      	cmp	r4, #1
 8003d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d92:	d008      	beq.n	8003da6 <cos+0x52>
 8003d94:	2c02      	cmp	r4, #2
 8003d96:	d00c      	beq.n	8003db2 <cos+0x5e>
 8003d98:	2c00      	cmp	r4, #0
 8003d9a:	d0e4      	beq.n	8003d66 <cos+0x12>
 8003d9c:	2401      	movs	r4, #1
 8003d9e:	9400      	str	r4, [sp, #0]
 8003da0:	f000 fe42 	bl	8004a28 <__kernel_sin>
 8003da4:	e7e9      	b.n	8003d7a <cos+0x26>
 8003da6:	9400      	str	r4, [sp, #0]
 8003da8:	f000 fe3e 	bl	8004a28 <__kernel_sin>
 8003dac:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003db0:	e7e3      	b.n	8003d7a <cos+0x26>
 8003db2:	f000 fa31 	bl	8004218 <__kernel_cos>
 8003db6:	e7f9      	b.n	8003dac <cos+0x58>
 8003db8:	3fe921fb 	.word	0x3fe921fb
 8003dbc:	7fefffff 	.word	0x7fefffff

08003dc0 <sin>:
 8003dc0:	b530      	push	{r4, r5, lr}
 8003dc2:	4a1a      	ldr	r2, [pc, #104]	; (8003e2c <sin+0x6c>)
 8003dc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	b087      	sub	sp, #28
 8003dcc:	dc06      	bgt.n	8003ddc <sin+0x1c>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f000 fe27 	bl	8004a28 <__kernel_sin>
 8003dda:	e006      	b.n	8003dea <sin+0x2a>
 8003ddc:	4a14      	ldr	r2, [pc, #80]	; (8003e30 <sin+0x70>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	dd05      	ble.n	8003dee <sin+0x2e>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	f7fc f9b7 	bl	8000158 <__aeabi_dsub>
 8003dea:	b007      	add	sp, #28
 8003dec:	bd30      	pop	{r4, r5, pc}
 8003dee:	aa02      	add	r2, sp, #8
 8003df0:	f000 f822 	bl	8003e38 <__ieee754_rem_pio2>
 8003df4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003df8:	f000 0403 	and.w	r4, r0, #3
 8003dfc:	2c01      	cmp	r4, #1
 8003dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e02:	d005      	beq.n	8003e10 <sin+0x50>
 8003e04:	2c02      	cmp	r4, #2
 8003e06:	d006      	beq.n	8003e16 <sin+0x56>
 8003e08:	b964      	cbnz	r4, 8003e24 <sin+0x64>
 8003e0a:	2401      	movs	r4, #1
 8003e0c:	9400      	str	r4, [sp, #0]
 8003e0e:	e7e2      	b.n	8003dd6 <sin+0x16>
 8003e10:	f000 fa02 	bl	8004218 <__kernel_cos>
 8003e14:	e7e9      	b.n	8003dea <sin+0x2a>
 8003e16:	2401      	movs	r4, #1
 8003e18:	9400      	str	r4, [sp, #0]
 8003e1a:	f000 fe05 	bl	8004a28 <__kernel_sin>
 8003e1e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003e22:	e7e2      	b.n	8003dea <sin+0x2a>
 8003e24:	f000 f9f8 	bl	8004218 <__kernel_cos>
 8003e28:	e7f9      	b.n	8003e1e <sin+0x5e>
 8003e2a:	bf00      	nop
 8003e2c:	3fe921fb 	.word	0x3fe921fb
 8003e30:	7fefffff 	.word	0x7fefffff
 8003e34:	00000000 	.word	0x00000000

08003e38 <__ieee754_rem_pio2>:
 8003e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e3c:	4614      	mov	r4, r2
 8003e3e:	4ac2      	ldr	r2, [pc, #776]	; (8004148 <__ieee754_rem_pio2+0x310>)
 8003e40:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8003e44:	4592      	cmp	sl, r2
 8003e46:	b08d      	sub	sp, #52	; 0x34
 8003e48:	468b      	mov	fp, r1
 8003e4a:	dc07      	bgt.n	8003e5c <__ieee754_rem_pio2+0x24>
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e9c4 0100 	strd	r0, r1, [r4]
 8003e54:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003e58:	2500      	movs	r5, #0
 8003e5a:	e023      	b.n	8003ea4 <__ieee754_rem_pio2+0x6c>
 8003e5c:	4abb      	ldr	r2, [pc, #748]	; (800414c <__ieee754_rem_pio2+0x314>)
 8003e5e:	4592      	cmp	sl, r2
 8003e60:	dc71      	bgt.n	8003f46 <__ieee754_rem_pio2+0x10e>
 8003e62:	a3ab      	add	r3, pc, #684	; (adr r3, 8004110 <__ieee754_rem_pio2+0x2d8>)
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	2900      	cmp	r1, #0
 8003e6a:	4db9      	ldr	r5, [pc, #740]	; (8004150 <__ieee754_rem_pio2+0x318>)
 8003e6c:	dd36      	ble.n	8003edc <__ieee754_rem_pio2+0xa4>
 8003e6e:	f7fc f973 	bl	8000158 <__aeabi_dsub>
 8003e72:	45aa      	cmp	sl, r5
 8003e74:	4606      	mov	r6, r0
 8003e76:	460f      	mov	r7, r1
 8003e78:	d018      	beq.n	8003eac <__ieee754_rem_pio2+0x74>
 8003e7a:	a3a7      	add	r3, pc, #668	; (adr r3, 8004118 <__ieee754_rem_pio2+0x2e0>)
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f7fc f96a 	bl	8000158 <__aeabi_dsub>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4630      	mov	r0, r6
 8003e8a:	e9c4 2300 	strd	r2, r3, [r4]
 8003e8e:	4639      	mov	r1, r7
 8003e90:	f7fc f962 	bl	8000158 <__aeabi_dsub>
 8003e94:	a3a0      	add	r3, pc, #640	; (adr r3, 8004118 <__ieee754_rem_pio2+0x2e0>)
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	f7fc f95d 	bl	8000158 <__aeabi_dsub>
 8003e9e:	2501      	movs	r5, #1
 8003ea0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	b00d      	add	sp, #52	; 0x34
 8003ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eac:	a39c      	add	r3, pc, #624	; (adr r3, 8004120 <__ieee754_rem_pio2+0x2e8>)
 8003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb2:	f7fc f951 	bl	8000158 <__aeabi_dsub>
 8003eb6:	a39c      	add	r3, pc, #624	; (adr r3, 8004128 <__ieee754_rem_pio2+0x2f0>)
 8003eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebc:	4606      	mov	r6, r0
 8003ebe:	460f      	mov	r7, r1
 8003ec0:	f7fc f94a 	bl	8000158 <__aeabi_dsub>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4630      	mov	r0, r6
 8003eca:	e9c4 2300 	strd	r2, r3, [r4]
 8003ece:	4639      	mov	r1, r7
 8003ed0:	f7fc f942 	bl	8000158 <__aeabi_dsub>
 8003ed4:	a394      	add	r3, pc, #592	; (adr r3, 8004128 <__ieee754_rem_pio2+0x2f0>)
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	e7de      	b.n	8003e9a <__ieee754_rem_pio2+0x62>
 8003edc:	f7fc f93e 	bl	800015c <__adddf3>
 8003ee0:	45aa      	cmp	sl, r5
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	460f      	mov	r7, r1
 8003ee6:	d016      	beq.n	8003f16 <__ieee754_rem_pio2+0xde>
 8003ee8:	a38b      	add	r3, pc, #556	; (adr r3, 8004118 <__ieee754_rem_pio2+0x2e0>)
 8003eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eee:	f7fc f935 	bl	800015c <__adddf3>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	e9c4 2300 	strd	r2, r3, [r4]
 8003efc:	4639      	mov	r1, r7
 8003efe:	f7fc f92b 	bl	8000158 <__aeabi_dsub>
 8003f02:	a385      	add	r3, pc, #532	; (adr r3, 8004118 <__ieee754_rem_pio2+0x2e0>)
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	f7fc f928 	bl	800015c <__adddf3>
 8003f0c:	f04f 35ff 	mov.w	r5, #4294967295
 8003f10:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003f14:	e7c6      	b.n	8003ea4 <__ieee754_rem_pio2+0x6c>
 8003f16:	a382      	add	r3, pc, #520	; (adr r3, 8004120 <__ieee754_rem_pio2+0x2e8>)
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f7fc f91e 	bl	800015c <__adddf3>
 8003f20:	a381      	add	r3, pc, #516	; (adr r3, 8004128 <__ieee754_rem_pio2+0x2f0>)
 8003f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f26:	4606      	mov	r6, r0
 8003f28:	460f      	mov	r7, r1
 8003f2a:	f7fc f917 	bl	800015c <__adddf3>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4630      	mov	r0, r6
 8003f34:	e9c4 2300 	strd	r2, r3, [r4]
 8003f38:	4639      	mov	r1, r7
 8003f3a:	f7fc f90d 	bl	8000158 <__aeabi_dsub>
 8003f3e:	a37a      	add	r3, pc, #488	; (adr r3, 8004128 <__ieee754_rem_pio2+0x2f0>)
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	e7e0      	b.n	8003f08 <__ieee754_rem_pio2+0xd0>
 8003f46:	4a83      	ldr	r2, [pc, #524]	; (8004154 <__ieee754_rem_pio2+0x31c>)
 8003f48:	4592      	cmp	sl, r2
 8003f4a:	f300 80d2 	bgt.w	80040f2 <__ieee754_rem_pio2+0x2ba>
 8003f4e:	f000 fe21 	bl	8004b94 <fabs>
 8003f52:	a377      	add	r3, pc, #476	; (adr r3, 8004130 <__ieee754_rem_pio2+0x2f8>)
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	4606      	mov	r6, r0
 8003f5a:	460f      	mov	r7, r1
 8003f5c:	f7fc fab4 	bl	80004c8 <__aeabi_dmul>
 8003f60:	2200      	movs	r2, #0
 8003f62:	4b7d      	ldr	r3, [pc, #500]	; (8004158 <__ieee754_rem_pio2+0x320>)
 8003f64:	f7fc f8fa 	bl	800015c <__adddf3>
 8003f68:	f7fc fd48 	bl	80009fc <__aeabi_d2iz>
 8003f6c:	4605      	mov	r5, r0
 8003f6e:	f7fc fa41 	bl	80003f4 <__aeabi_i2d>
 8003f72:	a367      	add	r3, pc, #412	; (adr r3, 8004110 <__ieee754_rem_pio2+0x2d8>)
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f7c:	f7fc faa4 	bl	80004c8 <__aeabi_dmul>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4630      	mov	r0, r6
 8003f86:	4639      	mov	r1, r7
 8003f88:	f7fc f8e6 	bl	8000158 <__aeabi_dsub>
 8003f8c:	a362      	add	r3, pc, #392	; (adr r3, 8004118 <__ieee754_rem_pio2+0x2e0>)
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	4606      	mov	r6, r0
 8003f94:	460f      	mov	r7, r1
 8003f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f9a:	f7fc fa95 	bl	80004c8 <__aeabi_dmul>
 8003f9e:	2d1f      	cmp	r5, #31
 8003fa0:	4680      	mov	r8, r0
 8003fa2:	4689      	mov	r9, r1
 8003fa4:	dc0e      	bgt.n	8003fc4 <__ieee754_rem_pio2+0x18c>
 8003fa6:	4b6d      	ldr	r3, [pc, #436]	; (800415c <__ieee754_rem_pio2+0x324>)
 8003fa8:	1e6a      	subs	r2, r5, #1
 8003faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fae:	4553      	cmp	r3, sl
 8003fb0:	d008      	beq.n	8003fc4 <__ieee754_rem_pio2+0x18c>
 8003fb2:	4642      	mov	r2, r8
 8003fb4:	464b      	mov	r3, r9
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	4639      	mov	r1, r7
 8003fba:	f7fc f8cd 	bl	8000158 <__aeabi_dsub>
 8003fbe:	e9c4 0100 	strd	r0, r1, [r4]
 8003fc2:	e011      	b.n	8003fe8 <__ieee754_rem_pio2+0x1b0>
 8003fc4:	464b      	mov	r3, r9
 8003fc6:	4642      	mov	r2, r8
 8003fc8:	4630      	mov	r0, r6
 8003fca:	4639      	mov	r1, r7
 8003fcc:	f7fc f8c4 	bl	8000158 <__aeabi_dsub>
 8003fd0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8003fd4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003fd8:	ebaa 0303 	sub.w	r3, sl, r3
 8003fdc:	2b10      	cmp	r3, #16
 8003fde:	dc1f      	bgt.n	8004020 <__ieee754_rem_pio2+0x1e8>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	e9c4 2300 	strd	r2, r3, [r4]
 8003fe8:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8003fec:	4630      	mov	r0, r6
 8003fee:	4653      	mov	r3, sl
 8003ff0:	4639      	mov	r1, r7
 8003ff2:	f7fc f8b1 	bl	8000158 <__aeabi_dsub>
 8003ff6:	4642      	mov	r2, r8
 8003ff8:	464b      	mov	r3, r9
 8003ffa:	f7fc f8ad 	bl	8000158 <__aeabi_dsub>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	f1bb 0f00 	cmp.w	fp, #0
 8004006:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800400a:	f6bf af4b 	bge.w	8003ea4 <__ieee754_rem_pio2+0x6c>
 800400e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004012:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8004016:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800401a:	60e1      	str	r1, [r4, #12]
 800401c:	426d      	negs	r5, r5
 800401e:	e741      	b.n	8003ea4 <__ieee754_rem_pio2+0x6c>
 8004020:	a33f      	add	r3, pc, #252	; (adr r3, 8004120 <__ieee754_rem_pio2+0x2e8>)
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800402a:	f7fc fa4d 	bl	80004c8 <__aeabi_dmul>
 800402e:	4680      	mov	r8, r0
 8004030:	4689      	mov	r9, r1
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4630      	mov	r0, r6
 8004038:	4639      	mov	r1, r7
 800403a:	f7fc f88d 	bl	8000158 <__aeabi_dsub>
 800403e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4630      	mov	r0, r6
 8004048:	4639      	mov	r1, r7
 800404a:	f7fc f885 	bl	8000158 <__aeabi_dsub>
 800404e:	4642      	mov	r2, r8
 8004050:	464b      	mov	r3, r9
 8004052:	f7fc f881 	bl	8000158 <__aeabi_dsub>
 8004056:	a334      	add	r3, pc, #208	; (adr r3, 8004128 <__ieee754_rem_pio2+0x2f0>)
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	4606      	mov	r6, r0
 800405e:	460f      	mov	r7, r1
 8004060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004064:	f7fc fa30 	bl	80004c8 <__aeabi_dmul>
 8004068:	4632      	mov	r2, r6
 800406a:	463b      	mov	r3, r7
 800406c:	f7fc f874 	bl	8000158 <__aeabi_dsub>
 8004070:	460b      	mov	r3, r1
 8004072:	4602      	mov	r2, r0
 8004074:	4680      	mov	r8, r0
 8004076:	4689      	mov	r9, r1
 8004078:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800407c:	f7fc f86c 	bl	8000158 <__aeabi_dsub>
 8004080:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004084:	ebaa 0a03 	sub.w	sl, sl, r3
 8004088:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800408c:	dc06      	bgt.n	800409c <__ieee754_rem_pio2+0x264>
 800408e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	e9c4 2300 	strd	r2, r3, [r4]
 800409a:	e7a5      	b.n	8003fe8 <__ieee754_rem_pio2+0x1b0>
 800409c:	a326      	add	r3, pc, #152	; (adr r3, 8004138 <__ieee754_rem_pio2+0x300>)
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040a6:	f7fc fa0f 	bl	80004c8 <__aeabi_dmul>
 80040aa:	4680      	mov	r8, r0
 80040ac:	4689      	mov	r9, r1
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040b6:	f7fc f84f 	bl	8000158 <__aeabi_dsub>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4606      	mov	r6, r0
 80040c0:	460f      	mov	r7, r1
 80040c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040c6:	f7fc f847 	bl	8000158 <__aeabi_dsub>
 80040ca:	4642      	mov	r2, r8
 80040cc:	464b      	mov	r3, r9
 80040ce:	f7fc f843 	bl	8000158 <__aeabi_dsub>
 80040d2:	a31b      	add	r3, pc, #108	; (adr r3, 8004140 <__ieee754_rem_pio2+0x308>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	4680      	mov	r8, r0
 80040da:	4689      	mov	r9, r1
 80040dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040e0:	f7fc f9f2 	bl	80004c8 <__aeabi_dmul>
 80040e4:	4642      	mov	r2, r8
 80040e6:	464b      	mov	r3, r9
 80040e8:	f7fc f836 	bl	8000158 <__aeabi_dsub>
 80040ec:	4680      	mov	r8, r0
 80040ee:	4689      	mov	r9, r1
 80040f0:	e75f      	b.n	8003fb2 <__ieee754_rem_pio2+0x17a>
 80040f2:	4a1b      	ldr	r2, [pc, #108]	; (8004160 <__ieee754_rem_pio2+0x328>)
 80040f4:	4592      	cmp	sl, r2
 80040f6:	dd35      	ble.n	8004164 <__ieee754_rem_pio2+0x32c>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	f7fc f82c 	bl	8000158 <__aeabi_dsub>
 8004100:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004104:	e9c4 0100 	strd	r0, r1, [r4]
 8004108:	e6a6      	b.n	8003e58 <__ieee754_rem_pio2+0x20>
 800410a:	bf00      	nop
 800410c:	f3af 8000 	nop.w
 8004110:	54400000 	.word	0x54400000
 8004114:	3ff921fb 	.word	0x3ff921fb
 8004118:	1a626331 	.word	0x1a626331
 800411c:	3dd0b461 	.word	0x3dd0b461
 8004120:	1a600000 	.word	0x1a600000
 8004124:	3dd0b461 	.word	0x3dd0b461
 8004128:	2e037073 	.word	0x2e037073
 800412c:	3ba3198a 	.word	0x3ba3198a
 8004130:	6dc9c883 	.word	0x6dc9c883
 8004134:	3fe45f30 	.word	0x3fe45f30
 8004138:	2e000000 	.word	0x2e000000
 800413c:	3ba3198a 	.word	0x3ba3198a
 8004140:	252049c1 	.word	0x252049c1
 8004144:	397b839a 	.word	0x397b839a
 8004148:	3fe921fb 	.word	0x3fe921fb
 800414c:	4002d97b 	.word	0x4002d97b
 8004150:	3ff921fb 	.word	0x3ff921fb
 8004154:	413921fb 	.word	0x413921fb
 8004158:	3fe00000 	.word	0x3fe00000
 800415c:	080063d0 	.word	0x080063d0
 8004160:	7fefffff 	.word	0x7fefffff
 8004164:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004168:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800416c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004170:	460f      	mov	r7, r1
 8004172:	4606      	mov	r6, r0
 8004174:	f7fc fc42 	bl	80009fc <__aeabi_d2iz>
 8004178:	f7fc f93c 	bl	80003f4 <__aeabi_i2d>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4630      	mov	r0, r6
 8004182:	4639      	mov	r1, r7
 8004184:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004188:	f7fb ffe6 	bl	8000158 <__aeabi_dsub>
 800418c:	2200      	movs	r2, #0
 800418e:	4b20      	ldr	r3, [pc, #128]	; (8004210 <__ieee754_rem_pio2+0x3d8>)
 8004190:	f7fc f99a 	bl	80004c8 <__aeabi_dmul>
 8004194:	460f      	mov	r7, r1
 8004196:	4606      	mov	r6, r0
 8004198:	f7fc fc30 	bl	80009fc <__aeabi_d2iz>
 800419c:	f7fc f92a 	bl	80003f4 <__aeabi_i2d>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4630      	mov	r0, r6
 80041a6:	4639      	mov	r1, r7
 80041a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80041ac:	f7fb ffd4 	bl	8000158 <__aeabi_dsub>
 80041b0:	2200      	movs	r2, #0
 80041b2:	4b17      	ldr	r3, [pc, #92]	; (8004210 <__ieee754_rem_pio2+0x3d8>)
 80041b4:	f7fc f988 	bl	80004c8 <__aeabi_dmul>
 80041b8:	f04f 0803 	mov.w	r8, #3
 80041bc:	2600      	movs	r6, #0
 80041be:	2700      	movs	r7, #0
 80041c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80041c4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80041c8:	4632      	mov	r2, r6
 80041ca:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80041ce:	463b      	mov	r3, r7
 80041d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80041d4:	f7fc fbe0 	bl	8000998 <__aeabi_dcmpeq>
 80041d8:	b9b8      	cbnz	r0, 800420a <__ieee754_rem_pio2+0x3d2>
 80041da:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <__ieee754_rem_pio2+0x3dc>)
 80041dc:	462a      	mov	r2, r5
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	2302      	movs	r3, #2
 80041e2:	4621      	mov	r1, r4
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	a806      	add	r0, sp, #24
 80041e8:	4643      	mov	r3, r8
 80041ea:	f000 f8d3 	bl	8004394 <__kernel_rem_pio2>
 80041ee:	f1bb 0f00 	cmp.w	fp, #0
 80041f2:	4605      	mov	r5, r0
 80041f4:	f6bf ae56 	bge.w	8003ea4 <__ieee754_rem_pio2+0x6c>
 80041f8:	6863      	ldr	r3, [r4, #4]
 80041fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80041fe:	6063      	str	r3, [r4, #4]
 8004200:	68e3      	ldr	r3, [r4, #12]
 8004202:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004206:	60e3      	str	r3, [r4, #12]
 8004208:	e708      	b.n	800401c <__ieee754_rem_pio2+0x1e4>
 800420a:	46d0      	mov	r8, sl
 800420c:	e7dc      	b.n	80041c8 <__ieee754_rem_pio2+0x390>
 800420e:	bf00      	nop
 8004210:	41700000 	.word	0x41700000
 8004214:	08006450 	.word	0x08006450

08004218 <__kernel_cos>:
 8004218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004220:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004224:	4680      	mov	r8, r0
 8004226:	460f      	mov	r7, r1
 8004228:	e9cd 2300 	strd	r2, r3, [sp]
 800422c:	da04      	bge.n	8004238 <__kernel_cos+0x20>
 800422e:	f7fc fbe5 	bl	80009fc <__aeabi_d2iz>
 8004232:	2800      	cmp	r0, #0
 8004234:	f000 8086 	beq.w	8004344 <__kernel_cos+0x12c>
 8004238:	4642      	mov	r2, r8
 800423a:	463b      	mov	r3, r7
 800423c:	4640      	mov	r0, r8
 800423e:	4639      	mov	r1, r7
 8004240:	f7fc f942 	bl	80004c8 <__aeabi_dmul>
 8004244:	2200      	movs	r2, #0
 8004246:	4b4e      	ldr	r3, [pc, #312]	; (8004380 <__kernel_cos+0x168>)
 8004248:	4604      	mov	r4, r0
 800424a:	460d      	mov	r5, r1
 800424c:	f7fc f93c 	bl	80004c8 <__aeabi_dmul>
 8004250:	a33f      	add	r3, pc, #252	; (adr r3, 8004350 <__kernel_cos+0x138>)
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	4682      	mov	sl, r0
 8004258:	468b      	mov	fp, r1
 800425a:	4620      	mov	r0, r4
 800425c:	4629      	mov	r1, r5
 800425e:	f7fc f933 	bl	80004c8 <__aeabi_dmul>
 8004262:	a33d      	add	r3, pc, #244	; (adr r3, 8004358 <__kernel_cos+0x140>)
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	f7fb ff78 	bl	800015c <__adddf3>
 800426c:	4622      	mov	r2, r4
 800426e:	462b      	mov	r3, r5
 8004270:	f7fc f92a 	bl	80004c8 <__aeabi_dmul>
 8004274:	a33a      	add	r3, pc, #232	; (adr r3, 8004360 <__kernel_cos+0x148>)
 8004276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427a:	f7fb ff6d 	bl	8000158 <__aeabi_dsub>
 800427e:	4622      	mov	r2, r4
 8004280:	462b      	mov	r3, r5
 8004282:	f7fc f921 	bl	80004c8 <__aeabi_dmul>
 8004286:	a338      	add	r3, pc, #224	; (adr r3, 8004368 <__kernel_cos+0x150>)
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	f7fb ff66 	bl	800015c <__adddf3>
 8004290:	4622      	mov	r2, r4
 8004292:	462b      	mov	r3, r5
 8004294:	f7fc f918 	bl	80004c8 <__aeabi_dmul>
 8004298:	a335      	add	r3, pc, #212	; (adr r3, 8004370 <__kernel_cos+0x158>)
 800429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429e:	f7fb ff5b 	bl	8000158 <__aeabi_dsub>
 80042a2:	4622      	mov	r2, r4
 80042a4:	462b      	mov	r3, r5
 80042a6:	f7fc f90f 	bl	80004c8 <__aeabi_dmul>
 80042aa:	a333      	add	r3, pc, #204	; (adr r3, 8004378 <__kernel_cos+0x160>)
 80042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b0:	f7fb ff54 	bl	800015c <__adddf3>
 80042b4:	4622      	mov	r2, r4
 80042b6:	462b      	mov	r3, r5
 80042b8:	f7fc f906 	bl	80004c8 <__aeabi_dmul>
 80042bc:	4622      	mov	r2, r4
 80042be:	462b      	mov	r3, r5
 80042c0:	f7fc f902 	bl	80004c8 <__aeabi_dmul>
 80042c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042c8:	4604      	mov	r4, r0
 80042ca:	460d      	mov	r5, r1
 80042cc:	4640      	mov	r0, r8
 80042ce:	4639      	mov	r1, r7
 80042d0:	f7fc f8fa 	bl	80004c8 <__aeabi_dmul>
 80042d4:	460b      	mov	r3, r1
 80042d6:	4602      	mov	r2, r0
 80042d8:	4629      	mov	r1, r5
 80042da:	4620      	mov	r0, r4
 80042dc:	f7fb ff3c 	bl	8000158 <__aeabi_dsub>
 80042e0:	4b28      	ldr	r3, [pc, #160]	; (8004384 <__kernel_cos+0x16c>)
 80042e2:	4680      	mov	r8, r0
 80042e4:	429e      	cmp	r6, r3
 80042e6:	4689      	mov	r9, r1
 80042e8:	dc0e      	bgt.n	8004308 <__kernel_cos+0xf0>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4650      	mov	r0, sl
 80042f0:	4659      	mov	r1, fp
 80042f2:	f7fb ff31 	bl	8000158 <__aeabi_dsub>
 80042f6:	4602      	mov	r2, r0
 80042f8:	2000      	movs	r0, #0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4922      	ldr	r1, [pc, #136]	; (8004388 <__kernel_cos+0x170>)
 80042fe:	f7fb ff2b 	bl	8000158 <__aeabi_dsub>
 8004302:	b003      	add	sp, #12
 8004304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004308:	2400      	movs	r4, #0
 800430a:	4b20      	ldr	r3, [pc, #128]	; (800438c <__kernel_cos+0x174>)
 800430c:	4622      	mov	r2, r4
 800430e:	429e      	cmp	r6, r3
 8004310:	bfcc      	ite	gt
 8004312:	4d1f      	ldrgt	r5, [pc, #124]	; (8004390 <__kernel_cos+0x178>)
 8004314:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004318:	462b      	mov	r3, r5
 800431a:	2000      	movs	r0, #0
 800431c:	491a      	ldr	r1, [pc, #104]	; (8004388 <__kernel_cos+0x170>)
 800431e:	f7fb ff1b 	bl	8000158 <__aeabi_dsub>
 8004322:	4622      	mov	r2, r4
 8004324:	4606      	mov	r6, r0
 8004326:	460f      	mov	r7, r1
 8004328:	462b      	mov	r3, r5
 800432a:	4650      	mov	r0, sl
 800432c:	4659      	mov	r1, fp
 800432e:	f7fb ff13 	bl	8000158 <__aeabi_dsub>
 8004332:	4642      	mov	r2, r8
 8004334:	464b      	mov	r3, r9
 8004336:	f7fb ff0f 	bl	8000158 <__aeabi_dsub>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4630      	mov	r0, r6
 8004340:	4639      	mov	r1, r7
 8004342:	e7dc      	b.n	80042fe <__kernel_cos+0xe6>
 8004344:	2000      	movs	r0, #0
 8004346:	4910      	ldr	r1, [pc, #64]	; (8004388 <__kernel_cos+0x170>)
 8004348:	e7db      	b.n	8004302 <__kernel_cos+0xea>
 800434a:	bf00      	nop
 800434c:	f3af 8000 	nop.w
 8004350:	be8838d4 	.word	0xbe8838d4
 8004354:	bda8fae9 	.word	0xbda8fae9
 8004358:	bdb4b1c4 	.word	0xbdb4b1c4
 800435c:	3e21ee9e 	.word	0x3e21ee9e
 8004360:	809c52ad 	.word	0x809c52ad
 8004364:	3e927e4f 	.word	0x3e927e4f
 8004368:	19cb1590 	.word	0x19cb1590
 800436c:	3efa01a0 	.word	0x3efa01a0
 8004370:	16c15177 	.word	0x16c15177
 8004374:	3f56c16c 	.word	0x3f56c16c
 8004378:	5555554c 	.word	0x5555554c
 800437c:	3fa55555 	.word	0x3fa55555
 8004380:	3fe00000 	.word	0x3fe00000
 8004384:	3fd33332 	.word	0x3fd33332
 8004388:	3ff00000 	.word	0x3ff00000
 800438c:	3fe90000 	.word	0x3fe90000
 8004390:	3fd20000 	.word	0x3fd20000

08004394 <__kernel_rem_pio2>:
 8004394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004398:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800439c:	9307      	str	r3, [sp, #28]
 800439e:	9104      	str	r1, [sp, #16]
 80043a0:	4bbf      	ldr	r3, [pc, #764]	; (80046a0 <__kernel_rem_pio2+0x30c>)
 80043a2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80043a4:	1ed4      	subs	r4, r2, #3
 80043a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043aa:	2500      	movs	r5, #0
 80043ac:	9302      	str	r3, [sp, #8]
 80043ae:	9b07      	ldr	r3, [sp, #28]
 80043b0:	9008      	str	r0, [sp, #32]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	9306      	str	r3, [sp, #24]
 80043b6:	2318      	movs	r3, #24
 80043b8:	fb94 f4f3 	sdiv	r4, r4, r3
 80043bc:	f06f 0317 	mvn.w	r3, #23
 80043c0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80043c4:	fb04 3303 	mla	r3, r4, r3, r3
 80043c8:	eb03 0a02 	add.w	sl, r3, r2
 80043cc:	9a06      	ldr	r2, [sp, #24]
 80043ce:	9b02      	ldr	r3, [sp, #8]
 80043d0:	1aa7      	subs	r7, r4, r2
 80043d2:	eb03 0802 	add.w	r8, r3, r2
 80043d6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80043d8:	2200      	movs	r2, #0
 80043da:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80043de:	2300      	movs	r3, #0
 80043e0:	ae1e      	add	r6, sp, #120	; 0x78
 80043e2:	4545      	cmp	r5, r8
 80043e4:	dd14      	ble.n	8004410 <__kernel_rem_pio2+0x7c>
 80043e6:	2600      	movs	r6, #0
 80043e8:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 80043ec:	9b02      	ldr	r3, [sp, #8]
 80043ee:	429e      	cmp	r6, r3
 80043f0:	dc39      	bgt.n	8004466 <__kernel_rem_pio2+0xd2>
 80043f2:	9b08      	ldr	r3, [sp, #32]
 80043f4:	f04f 0800 	mov.w	r8, #0
 80043f8:	3b08      	subs	r3, #8
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	9b07      	ldr	r3, [sp, #28]
 80043fe:	f04f 0900 	mov.w	r9, #0
 8004402:	199d      	adds	r5, r3, r6
 8004404:	ab20      	add	r3, sp, #128	; 0x80
 8004406:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800440a:	9305      	str	r3, [sp, #20]
 800440c:	2700      	movs	r7, #0
 800440e:	e023      	b.n	8004458 <__kernel_rem_pio2+0xc4>
 8004410:	42ef      	cmn	r7, r5
 8004412:	d40b      	bmi.n	800442c <__kernel_rem_pio2+0x98>
 8004414:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004418:	e9cd 2300 	strd	r2, r3, [sp]
 800441c:	f7fb ffea 	bl	80003f4 <__aeabi_i2d>
 8004420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004424:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8004428:	3501      	adds	r5, #1
 800442a:	e7da      	b.n	80043e2 <__kernel_rem_pio2+0x4e>
 800442c:	4610      	mov	r0, r2
 800442e:	4619      	mov	r1, r3
 8004430:	e7f8      	b.n	8004424 <__kernel_rem_pio2+0x90>
 8004432:	9905      	ldr	r1, [sp, #20]
 8004434:	9d00      	ldr	r5, [sp, #0]
 8004436:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800443a:	9105      	str	r1, [sp, #20]
 800443c:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8004440:	9500      	str	r5, [sp, #0]
 8004442:	f7fc f841 	bl	80004c8 <__aeabi_dmul>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4640      	mov	r0, r8
 800444c:	4649      	mov	r1, r9
 800444e:	f7fb fe85 	bl	800015c <__adddf3>
 8004452:	4680      	mov	r8, r0
 8004454:	4689      	mov	r9, r1
 8004456:	3701      	adds	r7, #1
 8004458:	9b06      	ldr	r3, [sp, #24]
 800445a:	429f      	cmp	r7, r3
 800445c:	dde9      	ble.n	8004432 <__kernel_rem_pio2+0x9e>
 800445e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8004462:	3601      	adds	r6, #1
 8004464:	e7c2      	b.n	80043ec <__kernel_rem_pio2+0x58>
 8004466:	9b02      	ldr	r3, [sp, #8]
 8004468:	aa0c      	add	r2, sp, #48	; 0x30
 800446a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800446e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004470:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004472:	9f02      	ldr	r7, [sp, #8]
 8004474:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004478:	930a      	str	r3, [sp, #40]	; 0x28
 800447a:	2600      	movs	r6, #0
 800447c:	ab98      	add	r3, sp, #608	; 0x260
 800447e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8004482:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004486:	f10b 3bff 	add.w	fp, fp, #4294967295
 800448a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800448e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8004492:	ab98      	add	r3, sp, #608	; 0x260
 8004494:	445b      	add	r3, fp
 8004496:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800449a:	1bbb      	subs	r3, r7, r6
 800449c:	2b00      	cmp	r3, #0
 800449e:	dc71      	bgt.n	8004584 <__kernel_rem_pio2+0x1f0>
 80044a0:	4652      	mov	r2, sl
 80044a2:	4640      	mov	r0, r8
 80044a4:	4649      	mov	r1, r9
 80044a6:	f000 fbff 	bl	8004ca8 <scalbn>
 80044aa:	2200      	movs	r2, #0
 80044ac:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80044b0:	4604      	mov	r4, r0
 80044b2:	460d      	mov	r5, r1
 80044b4:	f7fc f808 	bl	80004c8 <__aeabi_dmul>
 80044b8:	f000 fb72 	bl	8004ba0 <floor>
 80044bc:	2200      	movs	r2, #0
 80044be:	4b79      	ldr	r3, [pc, #484]	; (80046a4 <__kernel_rem_pio2+0x310>)
 80044c0:	f7fc f802 	bl	80004c8 <__aeabi_dmul>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4620      	mov	r0, r4
 80044ca:	4629      	mov	r1, r5
 80044cc:	f7fb fe44 	bl	8000158 <__aeabi_dsub>
 80044d0:	460d      	mov	r5, r1
 80044d2:	4604      	mov	r4, r0
 80044d4:	f7fc fa92 	bl	80009fc <__aeabi_d2iz>
 80044d8:	9005      	str	r0, [sp, #20]
 80044da:	f7fb ff8b 	bl	80003f4 <__aeabi_i2d>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4620      	mov	r0, r4
 80044e4:	4629      	mov	r1, r5
 80044e6:	f7fb fe37 	bl	8000158 <__aeabi_dsub>
 80044ea:	f1ba 0f00 	cmp.w	sl, #0
 80044ee:	4680      	mov	r8, r0
 80044f0:	4689      	mov	r9, r1
 80044f2:	dd6c      	ble.n	80045ce <__kernel_rem_pio2+0x23a>
 80044f4:	1e7a      	subs	r2, r7, #1
 80044f6:	ab0c      	add	r3, sp, #48	; 0x30
 80044f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80044fc:	f1ca 0118 	rsb	r1, sl, #24
 8004500:	9c05      	ldr	r4, [sp, #20]
 8004502:	fa40 f301 	asr.w	r3, r0, r1
 8004506:	441c      	add	r4, r3
 8004508:	408b      	lsls	r3, r1
 800450a:	1ac0      	subs	r0, r0, r3
 800450c:	ab0c      	add	r3, sp, #48	; 0x30
 800450e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004512:	f1ca 0317 	rsb	r3, sl, #23
 8004516:	9405      	str	r4, [sp, #20]
 8004518:	fa40 f303 	asr.w	r3, r0, r3
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	9b00      	ldr	r3, [sp, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	dd62      	ble.n	80045ea <__kernel_rem_pio2+0x256>
 8004524:	2200      	movs	r2, #0
 8004526:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800452a:	4614      	mov	r4, r2
 800452c:	9b05      	ldr	r3, [sp, #20]
 800452e:	3301      	adds	r3, #1
 8004530:	9305      	str	r3, [sp, #20]
 8004532:	4297      	cmp	r7, r2
 8004534:	f300 809f 	bgt.w	8004676 <__kernel_rem_pio2+0x2e2>
 8004538:	f1ba 0f00 	cmp.w	sl, #0
 800453c:	dd07      	ble.n	800454e <__kernel_rem_pio2+0x1ba>
 800453e:	f1ba 0f01 	cmp.w	sl, #1
 8004542:	f000 80bb 	beq.w	80046bc <__kernel_rem_pio2+0x328>
 8004546:	f1ba 0f02 	cmp.w	sl, #2
 800454a:	f000 80c1 	beq.w	80046d0 <__kernel_rem_pio2+0x33c>
 800454e:	9b00      	ldr	r3, [sp, #0]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d14a      	bne.n	80045ea <__kernel_rem_pio2+0x256>
 8004554:	4642      	mov	r2, r8
 8004556:	464b      	mov	r3, r9
 8004558:	2000      	movs	r0, #0
 800455a:	4953      	ldr	r1, [pc, #332]	; (80046a8 <__kernel_rem_pio2+0x314>)
 800455c:	f7fb fdfc 	bl	8000158 <__aeabi_dsub>
 8004560:	4680      	mov	r8, r0
 8004562:	4689      	mov	r9, r1
 8004564:	2c00      	cmp	r4, #0
 8004566:	d040      	beq.n	80045ea <__kernel_rem_pio2+0x256>
 8004568:	4652      	mov	r2, sl
 800456a:	2000      	movs	r0, #0
 800456c:	494e      	ldr	r1, [pc, #312]	; (80046a8 <__kernel_rem_pio2+0x314>)
 800456e:	f000 fb9b 	bl	8004ca8 <scalbn>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4640      	mov	r0, r8
 8004578:	4649      	mov	r1, r9
 800457a:	f7fb fded 	bl	8000158 <__aeabi_dsub>
 800457e:	4680      	mov	r8, r0
 8004580:	4689      	mov	r9, r1
 8004582:	e032      	b.n	80045ea <__kernel_rem_pio2+0x256>
 8004584:	2200      	movs	r2, #0
 8004586:	4b49      	ldr	r3, [pc, #292]	; (80046ac <__kernel_rem_pio2+0x318>)
 8004588:	4640      	mov	r0, r8
 800458a:	4649      	mov	r1, r9
 800458c:	f7fb ff9c 	bl	80004c8 <__aeabi_dmul>
 8004590:	f7fc fa34 	bl	80009fc <__aeabi_d2iz>
 8004594:	f7fb ff2e 	bl	80003f4 <__aeabi_i2d>
 8004598:	2200      	movs	r2, #0
 800459a:	4b45      	ldr	r3, [pc, #276]	; (80046b0 <__kernel_rem_pio2+0x31c>)
 800459c:	e9cd 0100 	strd	r0, r1, [sp]
 80045a0:	f7fb ff92 	bl	80004c8 <__aeabi_dmul>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4640      	mov	r0, r8
 80045aa:	4649      	mov	r1, r9
 80045ac:	f7fb fdd4 	bl	8000158 <__aeabi_dsub>
 80045b0:	f7fc fa24 	bl	80009fc <__aeabi_d2iz>
 80045b4:	ab0c      	add	r3, sp, #48	; 0x30
 80045b6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80045ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80045be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045c2:	f7fb fdcb 	bl	800015c <__adddf3>
 80045c6:	3601      	adds	r6, #1
 80045c8:	4680      	mov	r8, r0
 80045ca:	4689      	mov	r9, r1
 80045cc:	e765      	b.n	800449a <__kernel_rem_pio2+0x106>
 80045ce:	d105      	bne.n	80045dc <__kernel_rem_pio2+0x248>
 80045d0:	1e7b      	subs	r3, r7, #1
 80045d2:	aa0c      	add	r2, sp, #48	; 0x30
 80045d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80045d8:	15c3      	asrs	r3, r0, #23
 80045da:	e79f      	b.n	800451c <__kernel_rem_pio2+0x188>
 80045dc:	2200      	movs	r2, #0
 80045de:	4b35      	ldr	r3, [pc, #212]	; (80046b4 <__kernel_rem_pio2+0x320>)
 80045e0:	f7fc f9f8 	bl	80009d4 <__aeabi_dcmpge>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d143      	bne.n	8004670 <__kernel_rem_pio2+0x2dc>
 80045e8:	9000      	str	r0, [sp, #0]
 80045ea:	2200      	movs	r2, #0
 80045ec:	2300      	movs	r3, #0
 80045ee:	4640      	mov	r0, r8
 80045f0:	4649      	mov	r1, r9
 80045f2:	f7fc f9d1 	bl	8000998 <__aeabi_dcmpeq>
 80045f6:	2800      	cmp	r0, #0
 80045f8:	f000 80c3 	beq.w	8004782 <__kernel_rem_pio2+0x3ee>
 80045fc:	1e7c      	subs	r4, r7, #1
 80045fe:	4623      	mov	r3, r4
 8004600:	2200      	movs	r2, #0
 8004602:	9902      	ldr	r1, [sp, #8]
 8004604:	428b      	cmp	r3, r1
 8004606:	da6a      	bge.n	80046de <__kernel_rem_pio2+0x34a>
 8004608:	2a00      	cmp	r2, #0
 800460a:	f000 8084 	beq.w	8004716 <__kernel_rem_pio2+0x382>
 800460e:	ab0c      	add	r3, sp, #48	; 0x30
 8004610:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004614:	f1aa 0a18 	sub.w	sl, sl, #24
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80b0 	beq.w	800477e <__kernel_rem_pio2+0x3ea>
 800461e:	4652      	mov	r2, sl
 8004620:	2000      	movs	r0, #0
 8004622:	4921      	ldr	r1, [pc, #132]	; (80046a8 <__kernel_rem_pio2+0x314>)
 8004624:	f000 fb40 	bl	8004ca8 <scalbn>
 8004628:	4625      	mov	r5, r4
 800462a:	4606      	mov	r6, r0
 800462c:	460f      	mov	r7, r1
 800462e:	f04f 0a00 	mov.w	sl, #0
 8004632:	00e3      	lsls	r3, r4, #3
 8004634:	aa98      	add	r2, sp, #608	; 0x260
 8004636:	eb02 0803 	add.w	r8, r2, r3
 800463a:	f8df b070 	ldr.w	fp, [pc, #112]	; 80046ac <__kernel_rem_pio2+0x318>
 800463e:	9306      	str	r3, [sp, #24]
 8004640:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8004644:	2d00      	cmp	r5, #0
 8004646:	f280 80d2 	bge.w	80047ee <__kernel_rem_pio2+0x45a>
 800464a:	2500      	movs	r5, #0
 800464c:	9a06      	ldr	r2, [sp, #24]
 800464e:	ab98      	add	r3, sp, #608	; 0x260
 8004650:	189e      	adds	r6, r3, r2
 8004652:	3ea8      	subs	r6, #168	; 0xa8
 8004654:	1b63      	subs	r3, r4, r5
 8004656:	2b00      	cmp	r3, #0
 8004658:	f2c0 80f9 	blt.w	800484e <__kernel_rem_pio2+0x4ba>
 800465c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80046b8 <__kernel_rem_pio2+0x324>
 8004660:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 8004664:	f04f 0a00 	mov.w	sl, #0
 8004668:	f04f 0b00 	mov.w	fp, #0
 800466c:	2700      	movs	r7, #0
 800466e:	e0e2      	b.n	8004836 <__kernel_rem_pio2+0x4a2>
 8004670:	2302      	movs	r3, #2
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	e756      	b.n	8004524 <__kernel_rem_pio2+0x190>
 8004676:	ab0c      	add	r3, sp, #48	; 0x30
 8004678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800467c:	b94c      	cbnz	r4, 8004692 <__kernel_rem_pio2+0x2fe>
 800467e:	b12b      	cbz	r3, 800468c <__kernel_rem_pio2+0x2f8>
 8004680:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004684:	a80c      	add	r0, sp, #48	; 0x30
 8004686:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800468a:	2301      	movs	r3, #1
 800468c:	3201      	adds	r2, #1
 800468e:	461c      	mov	r4, r3
 8004690:	e74f      	b.n	8004532 <__kernel_rem_pio2+0x19e>
 8004692:	1acb      	subs	r3, r1, r3
 8004694:	a80c      	add	r0, sp, #48	; 0x30
 8004696:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800469a:	4623      	mov	r3, r4
 800469c:	e7f6      	b.n	800468c <__kernel_rem_pio2+0x2f8>
 800469e:	bf00      	nop
 80046a0:	08006598 	.word	0x08006598
 80046a4:	40200000 	.word	0x40200000
 80046a8:	3ff00000 	.word	0x3ff00000
 80046ac:	3e700000 	.word	0x3e700000
 80046b0:	41700000 	.word	0x41700000
 80046b4:	3fe00000 	.word	0x3fe00000
 80046b8:	08006550 	.word	0x08006550
 80046bc:	1e7a      	subs	r2, r7, #1
 80046be:	ab0c      	add	r3, sp, #48	; 0x30
 80046c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80046c8:	a90c      	add	r1, sp, #48	; 0x30
 80046ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80046ce:	e73e      	b.n	800454e <__kernel_rem_pio2+0x1ba>
 80046d0:	1e7a      	subs	r2, r7, #1
 80046d2:	ab0c      	add	r3, sp, #48	; 0x30
 80046d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80046dc:	e7f4      	b.n	80046c8 <__kernel_rem_pio2+0x334>
 80046de:	a90c      	add	r1, sp, #48	; 0x30
 80046e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	430a      	orrs	r2, r1
 80046e8:	e78b      	b.n	8004602 <__kernel_rem_pio2+0x26e>
 80046ea:	3401      	adds	r4, #1
 80046ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80046f0:	2a00      	cmp	r2, #0
 80046f2:	d0fa      	beq.n	80046ea <__kernel_rem_pio2+0x356>
 80046f4:	ab98      	add	r3, sp, #608	; 0x260
 80046f6:	449b      	add	fp, r3
 80046f8:	9b07      	ldr	r3, [sp, #28]
 80046fa:	1c7e      	adds	r6, r7, #1
 80046fc:	19dd      	adds	r5, r3, r7
 80046fe:	ab98      	add	r3, sp, #608	; 0x260
 8004700:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004704:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8004708:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800470c:	443c      	add	r4, r7
 800470e:	42b4      	cmp	r4, r6
 8004710:	da04      	bge.n	800471c <__kernel_rem_pio2+0x388>
 8004712:	4627      	mov	r7, r4
 8004714:	e6b1      	b.n	800447a <__kernel_rem_pio2+0xe6>
 8004716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004718:	2401      	movs	r4, #1
 800471a:	e7e7      	b.n	80046ec <__kernel_rem_pio2+0x358>
 800471c:	f105 0308 	add.w	r3, r5, #8
 8004720:	9309      	str	r3, [sp, #36]	; 0x24
 8004722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004724:	2700      	movs	r7, #0
 8004726:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800472a:	f7fb fe63 	bl	80003f4 <__aeabi_i2d>
 800472e:	f04f 0800 	mov.w	r8, #0
 8004732:	f04f 0900 	mov.w	r9, #0
 8004736:	9b08      	ldr	r3, [sp, #32]
 8004738:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800473c:	3b08      	subs	r3, #8
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	f105 0310 	add.w	r3, r5, #16
 8004744:	9305      	str	r3, [sp, #20]
 8004746:	9b06      	ldr	r3, [sp, #24]
 8004748:	429f      	cmp	r7, r3
 800474a:	dd04      	ble.n	8004756 <__kernel_rem_pio2+0x3c2>
 800474c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8004750:	3601      	adds	r6, #1
 8004752:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004754:	e7db      	b.n	800470e <__kernel_rem_pio2+0x37a>
 8004756:	9905      	ldr	r1, [sp, #20]
 8004758:	9d00      	ldr	r5, [sp, #0]
 800475a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800475e:	9105      	str	r1, [sp, #20]
 8004760:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8004764:	9500      	str	r5, [sp, #0]
 8004766:	f7fb feaf 	bl	80004c8 <__aeabi_dmul>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4640      	mov	r0, r8
 8004770:	4649      	mov	r1, r9
 8004772:	f7fb fcf3 	bl	800015c <__adddf3>
 8004776:	3701      	adds	r7, #1
 8004778:	4680      	mov	r8, r0
 800477a:	4689      	mov	r9, r1
 800477c:	e7e3      	b.n	8004746 <__kernel_rem_pio2+0x3b2>
 800477e:	3c01      	subs	r4, #1
 8004780:	e745      	b.n	800460e <__kernel_rem_pio2+0x27a>
 8004782:	f1ca 0200 	rsb	r2, sl, #0
 8004786:	4640      	mov	r0, r8
 8004788:	4649      	mov	r1, r9
 800478a:	f000 fa8d 	bl	8004ca8 <scalbn>
 800478e:	2200      	movs	r2, #0
 8004790:	4ba3      	ldr	r3, [pc, #652]	; (8004a20 <__kernel_rem_pio2+0x68c>)
 8004792:	4604      	mov	r4, r0
 8004794:	460d      	mov	r5, r1
 8004796:	f7fc f91d 	bl	80009d4 <__aeabi_dcmpge>
 800479a:	b1f8      	cbz	r0, 80047dc <__kernel_rem_pio2+0x448>
 800479c:	2200      	movs	r2, #0
 800479e:	4ba1      	ldr	r3, [pc, #644]	; (8004a24 <__kernel_rem_pio2+0x690>)
 80047a0:	4620      	mov	r0, r4
 80047a2:	4629      	mov	r1, r5
 80047a4:	f7fb fe90 	bl	80004c8 <__aeabi_dmul>
 80047a8:	f7fc f928 	bl	80009fc <__aeabi_d2iz>
 80047ac:	4606      	mov	r6, r0
 80047ae:	f7fb fe21 	bl	80003f4 <__aeabi_i2d>
 80047b2:	2200      	movs	r2, #0
 80047b4:	4b9a      	ldr	r3, [pc, #616]	; (8004a20 <__kernel_rem_pio2+0x68c>)
 80047b6:	f7fb fe87 	bl	80004c8 <__aeabi_dmul>
 80047ba:	460b      	mov	r3, r1
 80047bc:	4602      	mov	r2, r0
 80047be:	4629      	mov	r1, r5
 80047c0:	4620      	mov	r0, r4
 80047c2:	f7fb fcc9 	bl	8000158 <__aeabi_dsub>
 80047c6:	f7fc f919 	bl	80009fc <__aeabi_d2iz>
 80047ca:	1c7c      	adds	r4, r7, #1
 80047cc:	ab0c      	add	r3, sp, #48	; 0x30
 80047ce:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80047d2:	f10a 0a18 	add.w	sl, sl, #24
 80047d6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80047da:	e720      	b.n	800461e <__kernel_rem_pio2+0x28a>
 80047dc:	4620      	mov	r0, r4
 80047de:	4629      	mov	r1, r5
 80047e0:	f7fc f90c 	bl	80009fc <__aeabi_d2iz>
 80047e4:	ab0c      	add	r3, sp, #48	; 0x30
 80047e6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80047ea:	463c      	mov	r4, r7
 80047ec:	e717      	b.n	800461e <__kernel_rem_pio2+0x28a>
 80047ee:	ab0c      	add	r3, sp, #48	; 0x30
 80047f0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80047f4:	f7fb fdfe 	bl	80003f4 <__aeabi_i2d>
 80047f8:	4632      	mov	r2, r6
 80047fa:	463b      	mov	r3, r7
 80047fc:	f7fb fe64 	bl	80004c8 <__aeabi_dmul>
 8004800:	4652      	mov	r2, sl
 8004802:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8004806:	465b      	mov	r3, fp
 8004808:	4630      	mov	r0, r6
 800480a:	4639      	mov	r1, r7
 800480c:	f7fb fe5c 	bl	80004c8 <__aeabi_dmul>
 8004810:	3d01      	subs	r5, #1
 8004812:	4606      	mov	r6, r0
 8004814:	460f      	mov	r7, r1
 8004816:	e715      	b.n	8004644 <__kernel_rem_pio2+0x2b0>
 8004818:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800481c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004820:	f7fb fe52 	bl	80004c8 <__aeabi_dmul>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4650      	mov	r0, sl
 800482a:	4659      	mov	r1, fp
 800482c:	f7fb fc96 	bl	800015c <__adddf3>
 8004830:	4682      	mov	sl, r0
 8004832:	468b      	mov	fp, r1
 8004834:	3701      	adds	r7, #1
 8004836:	9b02      	ldr	r3, [sp, #8]
 8004838:	429f      	cmp	r7, r3
 800483a:	dc01      	bgt.n	8004840 <__kernel_rem_pio2+0x4ac>
 800483c:	42bd      	cmp	r5, r7
 800483e:	daeb      	bge.n	8004818 <__kernel_rem_pio2+0x484>
 8004840:	ab48      	add	r3, sp, #288	; 0x120
 8004842:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004846:	e9c3 ab00 	strd	sl, fp, [r3]
 800484a:	3501      	adds	r5, #1
 800484c:	e702      	b.n	8004654 <__kernel_rem_pio2+0x2c0>
 800484e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004850:	2b03      	cmp	r3, #3
 8004852:	d86c      	bhi.n	800492e <__kernel_rem_pio2+0x59a>
 8004854:	e8df f003 	tbb	[pc, r3]
 8004858:	022f2f59 	.word	0x022f2f59
 800485c:	9a06      	ldr	r2, [sp, #24]
 800485e:	ab48      	add	r3, sp, #288	; 0x120
 8004860:	189d      	adds	r5, r3, r2
 8004862:	46aa      	mov	sl, r5
 8004864:	46a3      	mov	fp, r4
 8004866:	f1bb 0f00 	cmp.w	fp, #0
 800486a:	f300 8087 	bgt.w	800497c <__kernel_rem_pio2+0x5e8>
 800486e:	46a2      	mov	sl, r4
 8004870:	f1ba 0f01 	cmp.w	sl, #1
 8004874:	f300 809f 	bgt.w	80049b6 <__kernel_rem_pio2+0x622>
 8004878:	2700      	movs	r7, #0
 800487a:	463e      	mov	r6, r7
 800487c:	9d06      	ldr	r5, [sp, #24]
 800487e:	ab48      	add	r3, sp, #288	; 0x120
 8004880:	3508      	adds	r5, #8
 8004882:	441d      	add	r5, r3
 8004884:	2c01      	cmp	r4, #1
 8004886:	f300 80b3 	bgt.w	80049f0 <__kernel_rem_pio2+0x65c>
 800488a:	9b00      	ldr	r3, [sp, #0]
 800488c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800488e:	9849      	ldr	r0, [sp, #292]	; 0x124
 8004890:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 8004892:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8004894:	2b00      	cmp	r3, #0
 8004896:	f040 80b5 	bne.w	8004a04 <__kernel_rem_pio2+0x670>
 800489a:	4603      	mov	r3, r0
 800489c:	462a      	mov	r2, r5
 800489e:	9804      	ldr	r0, [sp, #16]
 80048a0:	e9c0 2300 	strd	r2, r3, [r0]
 80048a4:	4622      	mov	r2, r4
 80048a6:	460b      	mov	r3, r1
 80048a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80048ac:	463a      	mov	r2, r7
 80048ae:	4633      	mov	r3, r6
 80048b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80048b4:	e03b      	b.n	800492e <__kernel_rem_pio2+0x59a>
 80048b6:	f04f 0c00 	mov.w	ip, #0
 80048ba:	4626      	mov	r6, r4
 80048bc:	4667      	mov	r7, ip
 80048be:	9d06      	ldr	r5, [sp, #24]
 80048c0:	ab48      	add	r3, sp, #288	; 0x120
 80048c2:	3508      	adds	r5, #8
 80048c4:	441d      	add	r5, r3
 80048c6:	2e00      	cmp	r6, #0
 80048c8:	da42      	bge.n	8004950 <__kernel_rem_pio2+0x5bc>
 80048ca:	9b00      	ldr	r3, [sp, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d049      	beq.n	8004964 <__kernel_rem_pio2+0x5d0>
 80048d0:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 80048d4:	4662      	mov	r2, ip
 80048d6:	460b      	mov	r3, r1
 80048d8:	9904      	ldr	r1, [sp, #16]
 80048da:	2601      	movs	r6, #1
 80048dc:	e9c1 2300 	strd	r2, r3, [r1]
 80048e0:	a948      	add	r1, sp, #288	; 0x120
 80048e2:	463b      	mov	r3, r7
 80048e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048e8:	f7fb fc36 	bl	8000158 <__aeabi_dsub>
 80048ec:	4684      	mov	ip, r0
 80048ee:	460f      	mov	r7, r1
 80048f0:	ad48      	add	r5, sp, #288	; 0x120
 80048f2:	42b4      	cmp	r4, r6
 80048f4:	da38      	bge.n	8004968 <__kernel_rem_pio2+0x5d4>
 80048f6:	9b00      	ldr	r3, [sp, #0]
 80048f8:	b10b      	cbz	r3, 80048fe <__kernel_rem_pio2+0x56a>
 80048fa:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80048fe:	4662      	mov	r2, ip
 8004900:	463b      	mov	r3, r7
 8004902:	9904      	ldr	r1, [sp, #16]
 8004904:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004908:	e011      	b.n	800492e <__kernel_rem_pio2+0x59a>
 800490a:	2700      	movs	r7, #0
 800490c:	463d      	mov	r5, r7
 800490e:	9b06      	ldr	r3, [sp, #24]
 8004910:	aa98      	add	r2, sp, #608	; 0x260
 8004912:	4413      	add	r3, r2
 8004914:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8004918:	2c00      	cmp	r4, #0
 800491a:	da0f      	bge.n	800493c <__kernel_rem_pio2+0x5a8>
 800491c:	9b00      	ldr	r3, [sp, #0]
 800491e:	b10b      	cbz	r3, 8004924 <__kernel_rem_pio2+0x590>
 8004920:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004924:	463a      	mov	r2, r7
 8004926:	462b      	mov	r3, r5
 8004928:	9904      	ldr	r1, [sp, #16]
 800492a:	e9c1 2300 	strd	r2, r3, [r1]
 800492e:	9b05      	ldr	r3, [sp, #20]
 8004930:	f003 0007 	and.w	r0, r3, #7
 8004934:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800493c:	4638      	mov	r0, r7
 800493e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004942:	4629      	mov	r1, r5
 8004944:	f7fb fc0a 	bl	800015c <__adddf3>
 8004948:	3c01      	subs	r4, #1
 800494a:	4607      	mov	r7, r0
 800494c:	460d      	mov	r5, r1
 800494e:	e7e3      	b.n	8004918 <__kernel_rem_pio2+0x584>
 8004950:	4660      	mov	r0, ip
 8004952:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004956:	4639      	mov	r1, r7
 8004958:	f7fb fc00 	bl	800015c <__adddf3>
 800495c:	3e01      	subs	r6, #1
 800495e:	4684      	mov	ip, r0
 8004960:	460f      	mov	r7, r1
 8004962:	e7b0      	b.n	80048c6 <__kernel_rem_pio2+0x532>
 8004964:	4639      	mov	r1, r7
 8004966:	e7b5      	b.n	80048d4 <__kernel_rem_pio2+0x540>
 8004968:	4660      	mov	r0, ip
 800496a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800496e:	4639      	mov	r1, r7
 8004970:	f7fb fbf4 	bl	800015c <__adddf3>
 8004974:	3601      	adds	r6, #1
 8004976:	4684      	mov	ip, r0
 8004978:	460f      	mov	r7, r1
 800497a:	e7ba      	b.n	80048f2 <__kernel_rem_pio2+0x55e>
 800497c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8004980:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8004984:	4640      	mov	r0, r8
 8004986:	4649      	mov	r1, r9
 8004988:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800498c:	f7fb fbe6 	bl	800015c <__adddf3>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4606      	mov	r6, r0
 8004996:	460f      	mov	r7, r1
 8004998:	4640      	mov	r0, r8
 800499a:	4649      	mov	r1, r9
 800499c:	f7fb fbdc 	bl	8000158 <__aeabi_dsub>
 80049a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049a4:	f7fb fbda 	bl	800015c <__adddf3>
 80049a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80049ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80049b0:	e9ca 6700 	strd	r6, r7, [sl]
 80049b4:	e757      	b.n	8004866 <__kernel_rem_pio2+0x4d2>
 80049b6:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 80049ba:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80049be:	4630      	mov	r0, r6
 80049c0:	4639      	mov	r1, r7
 80049c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049c6:	f7fb fbc9 	bl	800015c <__adddf3>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4680      	mov	r8, r0
 80049d0:	4689      	mov	r9, r1
 80049d2:	4630      	mov	r0, r6
 80049d4:	4639      	mov	r1, r7
 80049d6:	f7fb fbbf 	bl	8000158 <__aeabi_dsub>
 80049da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049de:	f7fb fbbd 	bl	800015c <__adddf3>
 80049e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049e6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80049ea:	e9c5 8900 	strd	r8, r9, [r5]
 80049ee:	e73f      	b.n	8004870 <__kernel_rem_pio2+0x4dc>
 80049f0:	4638      	mov	r0, r7
 80049f2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80049f6:	4631      	mov	r1, r6
 80049f8:	f7fb fbb0 	bl	800015c <__adddf3>
 80049fc:	3c01      	subs	r4, #1
 80049fe:	4607      	mov	r7, r0
 8004a00:	460e      	mov	r6, r1
 8004a02:	e73f      	b.n	8004884 <__kernel_rem_pio2+0x4f0>
 8004a04:	9b04      	ldr	r3, [sp, #16]
 8004a06:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004a0a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004a0e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004a12:	601d      	str	r5, [r3, #0]
 8004a14:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8004a18:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8004a1c:	615e      	str	r6, [r3, #20]
 8004a1e:	e786      	b.n	800492e <__kernel_rem_pio2+0x59a>
 8004a20:	41700000 	.word	0x41700000
 8004a24:	3e700000 	.word	0x3e700000

08004a28 <__kernel_sin>:
 8004a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a2c:	b086      	sub	sp, #24
 8004a2e:	e9cd 2300 	strd	r2, r3, [sp]
 8004a32:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004a36:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004a3a:	4682      	mov	sl, r0
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004a40:	da03      	bge.n	8004a4a <__kernel_sin+0x22>
 8004a42:	f7fb ffdb 	bl	80009fc <__aeabi_d2iz>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d050      	beq.n	8004aec <__kernel_sin+0xc4>
 8004a4a:	4652      	mov	r2, sl
 8004a4c:	4623      	mov	r3, r4
 8004a4e:	4650      	mov	r0, sl
 8004a50:	4621      	mov	r1, r4
 8004a52:	f7fb fd39 	bl	80004c8 <__aeabi_dmul>
 8004a56:	4606      	mov	r6, r0
 8004a58:	460f      	mov	r7, r1
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4650      	mov	r0, sl
 8004a60:	4621      	mov	r1, r4
 8004a62:	f7fb fd31 	bl	80004c8 <__aeabi_dmul>
 8004a66:	a33e      	add	r3, pc, #248	; (adr r3, 8004b60 <__kernel_sin+0x138>)
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	4680      	mov	r8, r0
 8004a6e:	4689      	mov	r9, r1
 8004a70:	4630      	mov	r0, r6
 8004a72:	4639      	mov	r1, r7
 8004a74:	f7fb fd28 	bl	80004c8 <__aeabi_dmul>
 8004a78:	a33b      	add	r3, pc, #236	; (adr r3, 8004b68 <__kernel_sin+0x140>)
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f7fb fb6b 	bl	8000158 <__aeabi_dsub>
 8004a82:	4632      	mov	r2, r6
 8004a84:	463b      	mov	r3, r7
 8004a86:	f7fb fd1f 	bl	80004c8 <__aeabi_dmul>
 8004a8a:	a339      	add	r3, pc, #228	; (adr r3, 8004b70 <__kernel_sin+0x148>)
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f7fb fb64 	bl	800015c <__adddf3>
 8004a94:	4632      	mov	r2, r6
 8004a96:	463b      	mov	r3, r7
 8004a98:	f7fb fd16 	bl	80004c8 <__aeabi_dmul>
 8004a9c:	a336      	add	r3, pc, #216	; (adr r3, 8004b78 <__kernel_sin+0x150>)
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	f7fb fb59 	bl	8000158 <__aeabi_dsub>
 8004aa6:	4632      	mov	r2, r6
 8004aa8:	463b      	mov	r3, r7
 8004aaa:	f7fb fd0d 	bl	80004c8 <__aeabi_dmul>
 8004aae:	a334      	add	r3, pc, #208	; (adr r3, 8004b80 <__kernel_sin+0x158>)
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f7fb fb52 	bl	800015c <__adddf3>
 8004ab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004abc:	b9dd      	cbnz	r5, 8004af6 <__kernel_sin+0xce>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	f7fb fcff 	bl	80004c8 <__aeabi_dmul>
 8004aca:	a32f      	add	r3, pc, #188	; (adr r3, 8004b88 <__kernel_sin+0x160>)
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	f7fb fb42 	bl	8000158 <__aeabi_dsub>
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	f7fb fcf6 	bl	80004c8 <__aeabi_dmul>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4650      	mov	r0, sl
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	f7fb fb3a 	bl	800015c <__adddf3>
 8004ae8:	4682      	mov	sl, r0
 8004aea:	460c      	mov	r4, r1
 8004aec:	4650      	mov	r0, sl
 8004aee:	4621      	mov	r1, r4
 8004af0:	b006      	add	sp, #24
 8004af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af6:	2200      	movs	r2, #0
 8004af8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004afc:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <__kernel_sin+0x168>)
 8004afe:	f7fb fce3 	bl	80004c8 <__aeabi_dmul>
 8004b02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	f7fb fcdb 	bl	80004c8 <__aeabi_dmul>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b1a:	f7fb fb1d 	bl	8000158 <__aeabi_dsub>
 8004b1e:	4632      	mov	r2, r6
 8004b20:	463b      	mov	r3, r7
 8004b22:	f7fb fcd1 	bl	80004c8 <__aeabi_dmul>
 8004b26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b2a:	f7fb fb15 	bl	8000158 <__aeabi_dsub>
 8004b2e:	a316      	add	r3, pc, #88	; (adr r3, 8004b88 <__kernel_sin+0x160>)
 8004b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b34:	4606      	mov	r6, r0
 8004b36:	460f      	mov	r7, r1
 8004b38:	4640      	mov	r0, r8
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	f7fb fcc4 	bl	80004c8 <__aeabi_dmul>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4630      	mov	r0, r6
 8004b46:	4639      	mov	r1, r7
 8004b48:	f7fb fb08 	bl	800015c <__adddf3>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4650      	mov	r0, sl
 8004b52:	4621      	mov	r1, r4
 8004b54:	f7fb fb00 	bl	8000158 <__aeabi_dsub>
 8004b58:	e7c6      	b.n	8004ae8 <__kernel_sin+0xc0>
 8004b5a:	bf00      	nop
 8004b5c:	f3af 8000 	nop.w
 8004b60:	5acfd57c 	.word	0x5acfd57c
 8004b64:	3de5d93a 	.word	0x3de5d93a
 8004b68:	8a2b9ceb 	.word	0x8a2b9ceb
 8004b6c:	3e5ae5e6 	.word	0x3e5ae5e6
 8004b70:	57b1fe7d 	.word	0x57b1fe7d
 8004b74:	3ec71de3 	.word	0x3ec71de3
 8004b78:	19c161d5 	.word	0x19c161d5
 8004b7c:	3f2a01a0 	.word	0x3f2a01a0
 8004b80:	1110f8a6 	.word	0x1110f8a6
 8004b84:	3f811111 	.word	0x3f811111
 8004b88:	55555549 	.word	0x55555549
 8004b8c:	3fc55555 	.word	0x3fc55555
 8004b90:	3fe00000 	.word	0x3fe00000

08004b94 <fabs>:
 8004b94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4770      	bx	lr
 8004b9c:	0000      	movs	r0, r0
	...

08004ba0 <floor>:
 8004ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ba4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004ba8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8004bac:	2e13      	cmp	r6, #19
 8004bae:	4607      	mov	r7, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	dc35      	bgt.n	8004c24 <floor+0x84>
 8004bb8:	2e00      	cmp	r6, #0
 8004bba:	da16      	bge.n	8004bea <floor+0x4a>
 8004bbc:	a336      	add	r3, pc, #216	; (adr r3, 8004c98 <floor+0xf8>)
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	f7fb facb 	bl	800015c <__adddf3>
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f7fb ff0d 	bl	80009e8 <__aeabi_dcmpgt>
 8004bce:	b148      	cbz	r0, 8004be4 <floor+0x44>
 8004bd0:	2c00      	cmp	r4, #0
 8004bd2:	da5b      	bge.n	8004c8c <floor+0xec>
 8004bd4:	2500      	movs	r5, #0
 8004bd6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004bda:	4a31      	ldr	r2, [pc, #196]	; (8004ca0 <floor+0x100>)
 8004bdc:	433b      	orrs	r3, r7
 8004bde:	42ab      	cmp	r3, r5
 8004be0:	bf18      	it	ne
 8004be2:	4614      	movne	r4, r2
 8004be4:	4623      	mov	r3, r4
 8004be6:	462f      	mov	r7, r5
 8004be8:	e026      	b.n	8004c38 <floor+0x98>
 8004bea:	4a2e      	ldr	r2, [pc, #184]	; (8004ca4 <floor+0x104>)
 8004bec:	fa42 f806 	asr.w	r8, r2, r6
 8004bf0:	ea01 0208 	and.w	r2, r1, r8
 8004bf4:	4302      	orrs	r2, r0
 8004bf6:	d01f      	beq.n	8004c38 <floor+0x98>
 8004bf8:	a327      	add	r3, pc, #156	; (adr r3, 8004c98 <floor+0xf8>)
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f7fb faad 	bl	800015c <__adddf3>
 8004c02:	2200      	movs	r2, #0
 8004c04:	2300      	movs	r3, #0
 8004c06:	f7fb feef 	bl	80009e8 <__aeabi_dcmpgt>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d0ea      	beq.n	8004be4 <floor+0x44>
 8004c0e:	2c00      	cmp	r4, #0
 8004c10:	bfbe      	ittt	lt
 8004c12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004c16:	fa43 f606 	asrlt.w	r6, r3, r6
 8004c1a:	19a4      	addlt	r4, r4, r6
 8004c1c:	ea24 0408 	bic.w	r4, r4, r8
 8004c20:	2500      	movs	r5, #0
 8004c22:	e7df      	b.n	8004be4 <floor+0x44>
 8004c24:	2e33      	cmp	r6, #51	; 0x33
 8004c26:	dd0b      	ble.n	8004c40 <floor+0xa0>
 8004c28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004c2c:	d104      	bne.n	8004c38 <floor+0x98>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	f7fb fa94 	bl	800015c <__adddf3>
 8004c34:	4607      	mov	r7, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4638      	mov	r0, r7
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c40:	f04f 32ff 	mov.w	r2, #4294967295
 8004c44:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004c48:	fa22 f808 	lsr.w	r8, r2, r8
 8004c4c:	ea18 0f00 	tst.w	r8, r0
 8004c50:	d0f2      	beq.n	8004c38 <floor+0x98>
 8004c52:	a311      	add	r3, pc, #68	; (adr r3, 8004c98 <floor+0xf8>)
 8004c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c58:	f7fb fa80 	bl	800015c <__adddf3>
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f7fb fec2 	bl	80009e8 <__aeabi_dcmpgt>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d0bd      	beq.n	8004be4 <floor+0x44>
 8004c68:	2c00      	cmp	r4, #0
 8004c6a:	da02      	bge.n	8004c72 <floor+0xd2>
 8004c6c:	2e14      	cmp	r6, #20
 8004c6e:	d103      	bne.n	8004c78 <floor+0xd8>
 8004c70:	3401      	adds	r4, #1
 8004c72:	ea25 0508 	bic.w	r5, r5, r8
 8004c76:	e7b5      	b.n	8004be4 <floor+0x44>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004c7e:	fa03 f606 	lsl.w	r6, r3, r6
 8004c82:	4435      	add	r5, r6
 8004c84:	42bd      	cmp	r5, r7
 8004c86:	bf38      	it	cc
 8004c88:	18e4      	addcc	r4, r4, r3
 8004c8a:	e7f2      	b.n	8004c72 <floor+0xd2>
 8004c8c:	2500      	movs	r5, #0
 8004c8e:	462c      	mov	r4, r5
 8004c90:	e7a8      	b.n	8004be4 <floor+0x44>
 8004c92:	bf00      	nop
 8004c94:	f3af 8000 	nop.w
 8004c98:	8800759c 	.word	0x8800759c
 8004c9c:	7e37e43c 	.word	0x7e37e43c
 8004ca0:	bff00000 	.word	0xbff00000
 8004ca4:	000fffff 	.word	0x000fffff

08004ca8 <scalbn>:
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004caa:	4616      	mov	r6, r2
 8004cac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	460d      	mov	r5, r1
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	b982      	cbnz	r2, 8004cda <scalbn+0x32>
 8004cb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004cbc:	4303      	orrs	r3, r0
 8004cbe:	d034      	beq.n	8004d2a <scalbn+0x82>
 8004cc0:	4b2d      	ldr	r3, [pc, #180]	; (8004d78 <scalbn+0xd0>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f7fb fc00 	bl	80004c8 <__aeabi_dmul>
 8004cc8:	4b2c      	ldr	r3, [pc, #176]	; (8004d7c <scalbn+0xd4>)
 8004cca:	4604      	mov	r4, r0
 8004ccc:	429e      	cmp	r6, r3
 8004cce:	460d      	mov	r5, r1
 8004cd0:	da0d      	bge.n	8004cee <scalbn+0x46>
 8004cd2:	a325      	add	r3, pc, #148	; (adr r3, 8004d68 <scalbn+0xc0>)
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	e01c      	b.n	8004d14 <scalbn+0x6c>
 8004cda:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8004cde:	42ba      	cmp	r2, r7
 8004ce0:	d109      	bne.n	8004cf6 <scalbn+0x4e>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	f7fb fa3a 	bl	800015c <__adddf3>
 8004ce8:	4604      	mov	r4, r0
 8004cea:	460d      	mov	r5, r1
 8004cec:	e01d      	b.n	8004d2a <scalbn+0x82>
 8004cee:	460b      	mov	r3, r1
 8004cf0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004cf4:	3a36      	subs	r2, #54	; 0x36
 8004cf6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004cfa:	4432      	add	r2, r6
 8004cfc:	428a      	cmp	r2, r1
 8004cfe:	dd0c      	ble.n	8004d1a <scalbn+0x72>
 8004d00:	4622      	mov	r2, r4
 8004d02:	462b      	mov	r3, r5
 8004d04:	a11a      	add	r1, pc, #104	; (adr r1, 8004d70 <scalbn+0xc8>)
 8004d06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d0a:	f000 f83b 	bl	8004d84 <copysign>
 8004d0e:	a318      	add	r3, pc, #96	; (adr r3, 8004d70 <scalbn+0xc8>)
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	f7fb fbd8 	bl	80004c8 <__aeabi_dmul>
 8004d18:	e7e6      	b.n	8004ce8 <scalbn+0x40>
 8004d1a:	2a00      	cmp	r2, #0
 8004d1c:	dd08      	ble.n	8004d30 <scalbn+0x88>
 8004d1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004d22:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d26:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d30:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004d34:	da0b      	bge.n	8004d4e <scalbn+0xa6>
 8004d36:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004d3a:	429e      	cmp	r6, r3
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	462b      	mov	r3, r5
 8004d40:	dce0      	bgt.n	8004d04 <scalbn+0x5c>
 8004d42:	a109      	add	r1, pc, #36	; (adr r1, 8004d68 <scalbn+0xc0>)
 8004d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d48:	f000 f81c 	bl	8004d84 <copysign>
 8004d4c:	e7c1      	b.n	8004cd2 <scalbn+0x2a>
 8004d4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004d52:	3236      	adds	r2, #54	; 0x36
 8004d54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d58:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	4629      	mov	r1, r5
 8004d60:	2200      	movs	r2, #0
 8004d62:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <scalbn+0xd8>)
 8004d64:	e7d6      	b.n	8004d14 <scalbn+0x6c>
 8004d66:	bf00      	nop
 8004d68:	c2f8f359 	.word	0xc2f8f359
 8004d6c:	01a56e1f 	.word	0x01a56e1f
 8004d70:	8800759c 	.word	0x8800759c
 8004d74:	7e37e43c 	.word	0x7e37e43c
 8004d78:	43500000 	.word	0x43500000
 8004d7c:	ffff3cb0 	.word	0xffff3cb0
 8004d80:	3c900000 	.word	0x3c900000

08004d84 <copysign>:
 8004d84:	b530      	push	{r4, r5, lr}
 8004d86:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004d8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d8e:	ea42 0503 	orr.w	r5, r2, r3
 8004d92:	4629      	mov	r1, r5
 8004d94:	bd30      	pop	{r4, r5, pc}
	...

08004d98 <__errno>:
 8004d98:	4b01      	ldr	r3, [pc, #4]	; (8004da0 <__errno+0x8>)
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000014 	.word	0x20000014

08004da4 <__libc_init_array>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	2500      	movs	r5, #0
 8004da8:	4e0c      	ldr	r6, [pc, #48]	; (8004ddc <__libc_init_array+0x38>)
 8004daa:	4c0d      	ldr	r4, [pc, #52]	; (8004de0 <__libc_init_array+0x3c>)
 8004dac:	1ba4      	subs	r4, r4, r6
 8004dae:	10a4      	asrs	r4, r4, #2
 8004db0:	42a5      	cmp	r5, r4
 8004db2:	d109      	bne.n	8004dc8 <__libc_init_array+0x24>
 8004db4:	f000 fc34 	bl	8005620 <_init>
 8004db8:	2500      	movs	r5, #0
 8004dba:	4e0a      	ldr	r6, [pc, #40]	; (8004de4 <__libc_init_array+0x40>)
 8004dbc:	4c0a      	ldr	r4, [pc, #40]	; (8004de8 <__libc_init_array+0x44>)
 8004dbe:	1ba4      	subs	r4, r4, r6
 8004dc0:	10a4      	asrs	r4, r4, #2
 8004dc2:	42a5      	cmp	r5, r4
 8004dc4:	d105      	bne.n	8004dd2 <__libc_init_array+0x2e>
 8004dc6:	bd70      	pop	{r4, r5, r6, pc}
 8004dc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dcc:	4798      	blx	r3
 8004dce:	3501      	adds	r5, #1
 8004dd0:	e7ee      	b.n	8004db0 <__libc_init_array+0xc>
 8004dd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dd6:	4798      	blx	r3
 8004dd8:	3501      	adds	r5, #1
 8004dda:	e7f2      	b.n	8004dc2 <__libc_init_array+0x1e>
 8004ddc:	080065dc 	.word	0x080065dc
 8004de0:	080065dc 	.word	0x080065dc
 8004de4:	080065dc 	.word	0x080065dc
 8004de8:	080065e0 	.word	0x080065e0

08004dec <memset>:
 8004dec:	4603      	mov	r3, r0
 8004dee:	4402      	add	r2, r0
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d100      	bne.n	8004df6 <memset+0xa>
 8004df4:	4770      	bx	lr
 8004df6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfa:	e7f9      	b.n	8004df0 <memset+0x4>

08004dfc <siprintf>:
 8004dfc:	b40e      	push	{r1, r2, r3}
 8004dfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e02:	b500      	push	{lr}
 8004e04:	b09c      	sub	sp, #112	; 0x70
 8004e06:	ab1d      	add	r3, sp, #116	; 0x74
 8004e08:	9002      	str	r0, [sp, #8]
 8004e0a:	9006      	str	r0, [sp, #24]
 8004e0c:	9107      	str	r1, [sp, #28]
 8004e0e:	9104      	str	r1, [sp, #16]
 8004e10:	4808      	ldr	r0, [pc, #32]	; (8004e34 <siprintf+0x38>)
 8004e12:	4909      	ldr	r1, [pc, #36]	; (8004e38 <siprintf+0x3c>)
 8004e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e18:	9105      	str	r1, [sp, #20]
 8004e1a:	6800      	ldr	r0, [r0, #0]
 8004e1c:	a902      	add	r1, sp, #8
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	f000 f866 	bl	8004ef0 <_svfiprintf_r>
 8004e24:	2200      	movs	r2, #0
 8004e26:	9b02      	ldr	r3, [sp, #8]
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	b01c      	add	sp, #112	; 0x70
 8004e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e30:	b003      	add	sp, #12
 8004e32:	4770      	bx	lr
 8004e34:	20000014 	.word	0x20000014
 8004e38:	ffff0208 	.word	0xffff0208

08004e3c <__ssputs_r>:
 8004e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e40:	688e      	ldr	r6, [r1, #8]
 8004e42:	4682      	mov	sl, r0
 8004e44:	429e      	cmp	r6, r3
 8004e46:	460c      	mov	r4, r1
 8004e48:	4690      	mov	r8, r2
 8004e4a:	4699      	mov	r9, r3
 8004e4c:	d837      	bhi.n	8004ebe <__ssputs_r+0x82>
 8004e4e:	898a      	ldrh	r2, [r1, #12]
 8004e50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e54:	d031      	beq.n	8004eba <__ssputs_r+0x7e>
 8004e56:	2302      	movs	r3, #2
 8004e58:	6825      	ldr	r5, [r4, #0]
 8004e5a:	6909      	ldr	r1, [r1, #16]
 8004e5c:	1a6f      	subs	r7, r5, r1
 8004e5e:	6965      	ldr	r5, [r4, #20]
 8004e60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e64:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e68:	f109 0301 	add.w	r3, r9, #1
 8004e6c:	443b      	add	r3, r7
 8004e6e:	429d      	cmp	r5, r3
 8004e70:	bf38      	it	cc
 8004e72:	461d      	movcc	r5, r3
 8004e74:	0553      	lsls	r3, r2, #21
 8004e76:	d530      	bpl.n	8004eda <__ssputs_r+0x9e>
 8004e78:	4629      	mov	r1, r5
 8004e7a:	f000 fb37 	bl	80054ec <_malloc_r>
 8004e7e:	4606      	mov	r6, r0
 8004e80:	b950      	cbnz	r0, 8004e98 <__ssputs_r+0x5c>
 8004e82:	230c      	movs	r3, #12
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295
 8004e88:	f8ca 3000 	str.w	r3, [sl]
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e92:	81a3      	strh	r3, [r4, #12]
 8004e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e98:	463a      	mov	r2, r7
 8004e9a:	6921      	ldr	r1, [r4, #16]
 8004e9c:	f000 fab6 	bl	800540c <memcpy>
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eaa:	81a3      	strh	r3, [r4, #12]
 8004eac:	6126      	str	r6, [r4, #16]
 8004eae:	443e      	add	r6, r7
 8004eb0:	6026      	str	r6, [r4, #0]
 8004eb2:	464e      	mov	r6, r9
 8004eb4:	6165      	str	r5, [r4, #20]
 8004eb6:	1bed      	subs	r5, r5, r7
 8004eb8:	60a5      	str	r5, [r4, #8]
 8004eba:	454e      	cmp	r6, r9
 8004ebc:	d900      	bls.n	8004ec0 <__ssputs_r+0x84>
 8004ebe:	464e      	mov	r6, r9
 8004ec0:	4632      	mov	r2, r6
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	6820      	ldr	r0, [r4, #0]
 8004ec6:	f000 faac 	bl	8005422 <memmove>
 8004eca:	68a3      	ldr	r3, [r4, #8]
 8004ecc:	2000      	movs	r0, #0
 8004ece:	1b9b      	subs	r3, r3, r6
 8004ed0:	60a3      	str	r3, [r4, #8]
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	441e      	add	r6, r3
 8004ed6:	6026      	str	r6, [r4, #0]
 8004ed8:	e7dc      	b.n	8004e94 <__ssputs_r+0x58>
 8004eda:	462a      	mov	r2, r5
 8004edc:	f000 fb60 	bl	80055a0 <_realloc_r>
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d1e2      	bne.n	8004eac <__ssputs_r+0x70>
 8004ee6:	6921      	ldr	r1, [r4, #16]
 8004ee8:	4650      	mov	r0, sl
 8004eea:	f000 fab3 	bl	8005454 <_free_r>
 8004eee:	e7c8      	b.n	8004e82 <__ssputs_r+0x46>

08004ef0 <_svfiprintf_r>:
 8004ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef4:	461d      	mov	r5, r3
 8004ef6:	898b      	ldrh	r3, [r1, #12]
 8004ef8:	b09d      	sub	sp, #116	; 0x74
 8004efa:	061f      	lsls	r7, r3, #24
 8004efc:	4680      	mov	r8, r0
 8004efe:	460c      	mov	r4, r1
 8004f00:	4616      	mov	r6, r2
 8004f02:	d50f      	bpl.n	8004f24 <_svfiprintf_r+0x34>
 8004f04:	690b      	ldr	r3, [r1, #16]
 8004f06:	b96b      	cbnz	r3, 8004f24 <_svfiprintf_r+0x34>
 8004f08:	2140      	movs	r1, #64	; 0x40
 8004f0a:	f000 faef 	bl	80054ec <_malloc_r>
 8004f0e:	6020      	str	r0, [r4, #0]
 8004f10:	6120      	str	r0, [r4, #16]
 8004f12:	b928      	cbnz	r0, 8004f20 <_svfiprintf_r+0x30>
 8004f14:	230c      	movs	r3, #12
 8004f16:	f8c8 3000 	str.w	r3, [r8]
 8004f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1e:	e0c8      	b.n	80050b2 <_svfiprintf_r+0x1c2>
 8004f20:	2340      	movs	r3, #64	; 0x40
 8004f22:	6163      	str	r3, [r4, #20]
 8004f24:	2300      	movs	r3, #0
 8004f26:	9309      	str	r3, [sp, #36]	; 0x24
 8004f28:	2320      	movs	r3, #32
 8004f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f2e:	2330      	movs	r3, #48	; 0x30
 8004f30:	f04f 0b01 	mov.w	fp, #1
 8004f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f38:	9503      	str	r5, [sp, #12]
 8004f3a:	4637      	mov	r7, r6
 8004f3c:	463d      	mov	r5, r7
 8004f3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f42:	b10b      	cbz	r3, 8004f48 <_svfiprintf_r+0x58>
 8004f44:	2b25      	cmp	r3, #37	; 0x25
 8004f46:	d13e      	bne.n	8004fc6 <_svfiprintf_r+0xd6>
 8004f48:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f4c:	d00b      	beq.n	8004f66 <_svfiprintf_r+0x76>
 8004f4e:	4653      	mov	r3, sl
 8004f50:	4632      	mov	r2, r6
 8004f52:	4621      	mov	r1, r4
 8004f54:	4640      	mov	r0, r8
 8004f56:	f7ff ff71 	bl	8004e3c <__ssputs_r>
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	f000 80a4 	beq.w	80050a8 <_svfiprintf_r+0x1b8>
 8004f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f62:	4453      	add	r3, sl
 8004f64:	9309      	str	r3, [sp, #36]	; 0x24
 8004f66:	783b      	ldrb	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 809d 	beq.w	80050a8 <_svfiprintf_r+0x1b8>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f04f 32ff 	mov.w	r2, #4294967295
 8004f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f78:	9304      	str	r3, [sp, #16]
 8004f7a:	9307      	str	r3, [sp, #28]
 8004f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f80:	931a      	str	r3, [sp, #104]	; 0x68
 8004f82:	462f      	mov	r7, r5
 8004f84:	2205      	movs	r2, #5
 8004f86:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004f8a:	4850      	ldr	r0, [pc, #320]	; (80050cc <_svfiprintf_r+0x1dc>)
 8004f8c:	f000 fa30 	bl	80053f0 <memchr>
 8004f90:	9b04      	ldr	r3, [sp, #16]
 8004f92:	b9d0      	cbnz	r0, 8004fca <_svfiprintf_r+0xda>
 8004f94:	06d9      	lsls	r1, r3, #27
 8004f96:	bf44      	itt	mi
 8004f98:	2220      	movmi	r2, #32
 8004f9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f9e:	071a      	lsls	r2, r3, #28
 8004fa0:	bf44      	itt	mi
 8004fa2:	222b      	movmi	r2, #43	; 0x2b
 8004fa4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fa8:	782a      	ldrb	r2, [r5, #0]
 8004faa:	2a2a      	cmp	r2, #42	; 0x2a
 8004fac:	d015      	beq.n	8004fda <_svfiprintf_r+0xea>
 8004fae:	462f      	mov	r7, r5
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	250a      	movs	r5, #10
 8004fb4:	9a07      	ldr	r2, [sp, #28]
 8004fb6:	4639      	mov	r1, r7
 8004fb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fbc:	3b30      	subs	r3, #48	; 0x30
 8004fbe:	2b09      	cmp	r3, #9
 8004fc0:	d94d      	bls.n	800505e <_svfiprintf_r+0x16e>
 8004fc2:	b1b8      	cbz	r0, 8004ff4 <_svfiprintf_r+0x104>
 8004fc4:	e00f      	b.n	8004fe6 <_svfiprintf_r+0xf6>
 8004fc6:	462f      	mov	r7, r5
 8004fc8:	e7b8      	b.n	8004f3c <_svfiprintf_r+0x4c>
 8004fca:	4a40      	ldr	r2, [pc, #256]	; (80050cc <_svfiprintf_r+0x1dc>)
 8004fcc:	463d      	mov	r5, r7
 8004fce:	1a80      	subs	r0, r0, r2
 8004fd0:	fa0b f000 	lsl.w	r0, fp, r0
 8004fd4:	4318      	orrs	r0, r3
 8004fd6:	9004      	str	r0, [sp, #16]
 8004fd8:	e7d3      	b.n	8004f82 <_svfiprintf_r+0x92>
 8004fda:	9a03      	ldr	r2, [sp, #12]
 8004fdc:	1d11      	adds	r1, r2, #4
 8004fde:	6812      	ldr	r2, [r2, #0]
 8004fe0:	9103      	str	r1, [sp, #12]
 8004fe2:	2a00      	cmp	r2, #0
 8004fe4:	db01      	blt.n	8004fea <_svfiprintf_r+0xfa>
 8004fe6:	9207      	str	r2, [sp, #28]
 8004fe8:	e004      	b.n	8004ff4 <_svfiprintf_r+0x104>
 8004fea:	4252      	negs	r2, r2
 8004fec:	f043 0302 	orr.w	r3, r3, #2
 8004ff0:	9207      	str	r2, [sp, #28]
 8004ff2:	9304      	str	r3, [sp, #16]
 8004ff4:	783b      	ldrb	r3, [r7, #0]
 8004ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ff8:	d10c      	bne.n	8005014 <_svfiprintf_r+0x124>
 8004ffa:	787b      	ldrb	r3, [r7, #1]
 8004ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8004ffe:	d133      	bne.n	8005068 <_svfiprintf_r+0x178>
 8005000:	9b03      	ldr	r3, [sp, #12]
 8005002:	3702      	adds	r7, #2
 8005004:	1d1a      	adds	r2, r3, #4
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	9203      	str	r2, [sp, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	bfb8      	it	lt
 800500e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005012:	9305      	str	r3, [sp, #20]
 8005014:	4d2e      	ldr	r5, [pc, #184]	; (80050d0 <_svfiprintf_r+0x1e0>)
 8005016:	2203      	movs	r2, #3
 8005018:	7839      	ldrb	r1, [r7, #0]
 800501a:	4628      	mov	r0, r5
 800501c:	f000 f9e8 	bl	80053f0 <memchr>
 8005020:	b138      	cbz	r0, 8005032 <_svfiprintf_r+0x142>
 8005022:	2340      	movs	r3, #64	; 0x40
 8005024:	1b40      	subs	r0, r0, r5
 8005026:	fa03 f000 	lsl.w	r0, r3, r0
 800502a:	9b04      	ldr	r3, [sp, #16]
 800502c:	3701      	adds	r7, #1
 800502e:	4303      	orrs	r3, r0
 8005030:	9304      	str	r3, [sp, #16]
 8005032:	7839      	ldrb	r1, [r7, #0]
 8005034:	2206      	movs	r2, #6
 8005036:	4827      	ldr	r0, [pc, #156]	; (80050d4 <_svfiprintf_r+0x1e4>)
 8005038:	1c7e      	adds	r6, r7, #1
 800503a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800503e:	f000 f9d7 	bl	80053f0 <memchr>
 8005042:	2800      	cmp	r0, #0
 8005044:	d038      	beq.n	80050b8 <_svfiprintf_r+0x1c8>
 8005046:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <_svfiprintf_r+0x1e8>)
 8005048:	bb13      	cbnz	r3, 8005090 <_svfiprintf_r+0x1a0>
 800504a:	9b03      	ldr	r3, [sp, #12]
 800504c:	3307      	adds	r3, #7
 800504e:	f023 0307 	bic.w	r3, r3, #7
 8005052:	3308      	adds	r3, #8
 8005054:	9303      	str	r3, [sp, #12]
 8005056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005058:	444b      	add	r3, r9
 800505a:	9309      	str	r3, [sp, #36]	; 0x24
 800505c:	e76d      	b.n	8004f3a <_svfiprintf_r+0x4a>
 800505e:	fb05 3202 	mla	r2, r5, r2, r3
 8005062:	2001      	movs	r0, #1
 8005064:	460f      	mov	r7, r1
 8005066:	e7a6      	b.n	8004fb6 <_svfiprintf_r+0xc6>
 8005068:	2300      	movs	r3, #0
 800506a:	250a      	movs	r5, #10
 800506c:	4619      	mov	r1, r3
 800506e:	3701      	adds	r7, #1
 8005070:	9305      	str	r3, [sp, #20]
 8005072:	4638      	mov	r0, r7
 8005074:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005078:	3a30      	subs	r2, #48	; 0x30
 800507a:	2a09      	cmp	r2, #9
 800507c:	d903      	bls.n	8005086 <_svfiprintf_r+0x196>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0c8      	beq.n	8005014 <_svfiprintf_r+0x124>
 8005082:	9105      	str	r1, [sp, #20]
 8005084:	e7c6      	b.n	8005014 <_svfiprintf_r+0x124>
 8005086:	fb05 2101 	mla	r1, r5, r1, r2
 800508a:	2301      	movs	r3, #1
 800508c:	4607      	mov	r7, r0
 800508e:	e7f0      	b.n	8005072 <_svfiprintf_r+0x182>
 8005090:	ab03      	add	r3, sp, #12
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	4622      	mov	r2, r4
 8005096:	4b11      	ldr	r3, [pc, #68]	; (80050dc <_svfiprintf_r+0x1ec>)
 8005098:	a904      	add	r1, sp, #16
 800509a:	4640      	mov	r0, r8
 800509c:	f3af 8000 	nop.w
 80050a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80050a4:	4681      	mov	r9, r0
 80050a6:	d1d6      	bne.n	8005056 <_svfiprintf_r+0x166>
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	065b      	lsls	r3, r3, #25
 80050ac:	f53f af35 	bmi.w	8004f1a <_svfiprintf_r+0x2a>
 80050b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050b2:	b01d      	add	sp, #116	; 0x74
 80050b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b8:	ab03      	add	r3, sp, #12
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	4622      	mov	r2, r4
 80050be:	4b07      	ldr	r3, [pc, #28]	; (80050dc <_svfiprintf_r+0x1ec>)
 80050c0:	a904      	add	r1, sp, #16
 80050c2:	4640      	mov	r0, r8
 80050c4:	f000 f882 	bl	80051cc <_printf_i>
 80050c8:	e7ea      	b.n	80050a0 <_svfiprintf_r+0x1b0>
 80050ca:	bf00      	nop
 80050cc:	080065a8 	.word	0x080065a8
 80050d0:	080065ae 	.word	0x080065ae
 80050d4:	080065b2 	.word	0x080065b2
 80050d8:	00000000 	.word	0x00000000
 80050dc:	08004e3d 	.word	0x08004e3d

080050e0 <_printf_common>:
 80050e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e4:	4691      	mov	r9, r2
 80050e6:	461f      	mov	r7, r3
 80050e8:	688a      	ldr	r2, [r1, #8]
 80050ea:	690b      	ldr	r3, [r1, #16]
 80050ec:	4606      	mov	r6, r0
 80050ee:	4293      	cmp	r3, r2
 80050f0:	bfb8      	it	lt
 80050f2:	4613      	movlt	r3, r2
 80050f4:	f8c9 3000 	str.w	r3, [r9]
 80050f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050fc:	460c      	mov	r4, r1
 80050fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005102:	b112      	cbz	r2, 800510a <_printf_common+0x2a>
 8005104:	3301      	adds	r3, #1
 8005106:	f8c9 3000 	str.w	r3, [r9]
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	0699      	lsls	r1, r3, #26
 800510e:	bf42      	ittt	mi
 8005110:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005114:	3302      	addmi	r3, #2
 8005116:	f8c9 3000 	strmi.w	r3, [r9]
 800511a:	6825      	ldr	r5, [r4, #0]
 800511c:	f015 0506 	ands.w	r5, r5, #6
 8005120:	d107      	bne.n	8005132 <_printf_common+0x52>
 8005122:	f104 0a19 	add.w	sl, r4, #25
 8005126:	68e3      	ldr	r3, [r4, #12]
 8005128:	f8d9 2000 	ldr.w	r2, [r9]
 800512c:	1a9b      	subs	r3, r3, r2
 800512e:	42ab      	cmp	r3, r5
 8005130:	dc29      	bgt.n	8005186 <_printf_common+0xa6>
 8005132:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005136:	6822      	ldr	r2, [r4, #0]
 8005138:	3300      	adds	r3, #0
 800513a:	bf18      	it	ne
 800513c:	2301      	movne	r3, #1
 800513e:	0692      	lsls	r2, r2, #26
 8005140:	d42e      	bmi.n	80051a0 <_printf_common+0xc0>
 8005142:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005146:	4639      	mov	r1, r7
 8005148:	4630      	mov	r0, r6
 800514a:	47c0      	blx	r8
 800514c:	3001      	adds	r0, #1
 800514e:	d021      	beq.n	8005194 <_printf_common+0xb4>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	68e5      	ldr	r5, [r4, #12]
 8005154:	f003 0306 	and.w	r3, r3, #6
 8005158:	2b04      	cmp	r3, #4
 800515a:	bf18      	it	ne
 800515c:	2500      	movne	r5, #0
 800515e:	f8d9 2000 	ldr.w	r2, [r9]
 8005162:	f04f 0900 	mov.w	r9, #0
 8005166:	bf08      	it	eq
 8005168:	1aad      	subeq	r5, r5, r2
 800516a:	68a3      	ldr	r3, [r4, #8]
 800516c:	6922      	ldr	r2, [r4, #16]
 800516e:	bf08      	it	eq
 8005170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005174:	4293      	cmp	r3, r2
 8005176:	bfc4      	itt	gt
 8005178:	1a9b      	subgt	r3, r3, r2
 800517a:	18ed      	addgt	r5, r5, r3
 800517c:	341a      	adds	r4, #26
 800517e:	454d      	cmp	r5, r9
 8005180:	d11a      	bne.n	80051b8 <_printf_common+0xd8>
 8005182:	2000      	movs	r0, #0
 8005184:	e008      	b.n	8005198 <_printf_common+0xb8>
 8005186:	2301      	movs	r3, #1
 8005188:	4652      	mov	r2, sl
 800518a:	4639      	mov	r1, r7
 800518c:	4630      	mov	r0, r6
 800518e:	47c0      	blx	r8
 8005190:	3001      	adds	r0, #1
 8005192:	d103      	bne.n	800519c <_printf_common+0xbc>
 8005194:	f04f 30ff 	mov.w	r0, #4294967295
 8005198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800519c:	3501      	adds	r5, #1
 800519e:	e7c2      	b.n	8005126 <_printf_common+0x46>
 80051a0:	2030      	movs	r0, #48	; 0x30
 80051a2:	18e1      	adds	r1, r4, r3
 80051a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051ae:	4422      	add	r2, r4
 80051b0:	3302      	adds	r3, #2
 80051b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051b6:	e7c4      	b.n	8005142 <_printf_common+0x62>
 80051b8:	2301      	movs	r3, #1
 80051ba:	4622      	mov	r2, r4
 80051bc:	4639      	mov	r1, r7
 80051be:	4630      	mov	r0, r6
 80051c0:	47c0      	blx	r8
 80051c2:	3001      	adds	r0, #1
 80051c4:	d0e6      	beq.n	8005194 <_printf_common+0xb4>
 80051c6:	f109 0901 	add.w	r9, r9, #1
 80051ca:	e7d8      	b.n	800517e <_printf_common+0x9e>

080051cc <_printf_i>:
 80051cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051d4:	460c      	mov	r4, r1
 80051d6:	7e09      	ldrb	r1, [r1, #24]
 80051d8:	b085      	sub	sp, #20
 80051da:	296e      	cmp	r1, #110	; 0x6e
 80051dc:	4617      	mov	r7, r2
 80051de:	4606      	mov	r6, r0
 80051e0:	4698      	mov	r8, r3
 80051e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051e4:	f000 80b3 	beq.w	800534e <_printf_i+0x182>
 80051e8:	d822      	bhi.n	8005230 <_printf_i+0x64>
 80051ea:	2963      	cmp	r1, #99	; 0x63
 80051ec:	d036      	beq.n	800525c <_printf_i+0x90>
 80051ee:	d80a      	bhi.n	8005206 <_printf_i+0x3a>
 80051f0:	2900      	cmp	r1, #0
 80051f2:	f000 80b9 	beq.w	8005368 <_printf_i+0x19c>
 80051f6:	2958      	cmp	r1, #88	; 0x58
 80051f8:	f000 8083 	beq.w	8005302 <_printf_i+0x136>
 80051fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005200:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005204:	e032      	b.n	800526c <_printf_i+0xa0>
 8005206:	2964      	cmp	r1, #100	; 0x64
 8005208:	d001      	beq.n	800520e <_printf_i+0x42>
 800520a:	2969      	cmp	r1, #105	; 0x69
 800520c:	d1f6      	bne.n	80051fc <_printf_i+0x30>
 800520e:	6820      	ldr	r0, [r4, #0]
 8005210:	6813      	ldr	r3, [r2, #0]
 8005212:	0605      	lsls	r5, r0, #24
 8005214:	f103 0104 	add.w	r1, r3, #4
 8005218:	d52a      	bpl.n	8005270 <_printf_i+0xa4>
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6011      	str	r1, [r2, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	da03      	bge.n	800522a <_printf_i+0x5e>
 8005222:	222d      	movs	r2, #45	; 0x2d
 8005224:	425b      	negs	r3, r3
 8005226:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800522a:	486f      	ldr	r0, [pc, #444]	; (80053e8 <_printf_i+0x21c>)
 800522c:	220a      	movs	r2, #10
 800522e:	e039      	b.n	80052a4 <_printf_i+0xd8>
 8005230:	2973      	cmp	r1, #115	; 0x73
 8005232:	f000 809d 	beq.w	8005370 <_printf_i+0x1a4>
 8005236:	d808      	bhi.n	800524a <_printf_i+0x7e>
 8005238:	296f      	cmp	r1, #111	; 0x6f
 800523a:	d020      	beq.n	800527e <_printf_i+0xb2>
 800523c:	2970      	cmp	r1, #112	; 0x70
 800523e:	d1dd      	bne.n	80051fc <_printf_i+0x30>
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	f043 0320 	orr.w	r3, r3, #32
 8005246:	6023      	str	r3, [r4, #0]
 8005248:	e003      	b.n	8005252 <_printf_i+0x86>
 800524a:	2975      	cmp	r1, #117	; 0x75
 800524c:	d017      	beq.n	800527e <_printf_i+0xb2>
 800524e:	2978      	cmp	r1, #120	; 0x78
 8005250:	d1d4      	bne.n	80051fc <_printf_i+0x30>
 8005252:	2378      	movs	r3, #120	; 0x78
 8005254:	4865      	ldr	r0, [pc, #404]	; (80053ec <_printf_i+0x220>)
 8005256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800525a:	e055      	b.n	8005308 <_printf_i+0x13c>
 800525c:	6813      	ldr	r3, [r2, #0]
 800525e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005262:	1d19      	adds	r1, r3, #4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6011      	str	r1, [r2, #0]
 8005268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800526c:	2301      	movs	r3, #1
 800526e:	e08c      	b.n	800538a <_printf_i+0x1be>
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005276:	6011      	str	r1, [r2, #0]
 8005278:	bf18      	it	ne
 800527a:	b21b      	sxthne	r3, r3
 800527c:	e7cf      	b.n	800521e <_printf_i+0x52>
 800527e:	6813      	ldr	r3, [r2, #0]
 8005280:	6825      	ldr	r5, [r4, #0]
 8005282:	1d18      	adds	r0, r3, #4
 8005284:	6010      	str	r0, [r2, #0]
 8005286:	0628      	lsls	r0, r5, #24
 8005288:	d501      	bpl.n	800528e <_printf_i+0xc2>
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	e002      	b.n	8005294 <_printf_i+0xc8>
 800528e:	0668      	lsls	r0, r5, #25
 8005290:	d5fb      	bpl.n	800528a <_printf_i+0xbe>
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	296f      	cmp	r1, #111	; 0x6f
 8005296:	bf14      	ite	ne
 8005298:	220a      	movne	r2, #10
 800529a:	2208      	moveq	r2, #8
 800529c:	4852      	ldr	r0, [pc, #328]	; (80053e8 <_printf_i+0x21c>)
 800529e:	2100      	movs	r1, #0
 80052a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052a4:	6865      	ldr	r5, [r4, #4]
 80052a6:	2d00      	cmp	r5, #0
 80052a8:	60a5      	str	r5, [r4, #8]
 80052aa:	f2c0 8095 	blt.w	80053d8 <_printf_i+0x20c>
 80052ae:	6821      	ldr	r1, [r4, #0]
 80052b0:	f021 0104 	bic.w	r1, r1, #4
 80052b4:	6021      	str	r1, [r4, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d13d      	bne.n	8005336 <_printf_i+0x16a>
 80052ba:	2d00      	cmp	r5, #0
 80052bc:	f040 808e 	bne.w	80053dc <_printf_i+0x210>
 80052c0:	4665      	mov	r5, ip
 80052c2:	2a08      	cmp	r2, #8
 80052c4:	d10b      	bne.n	80052de <_printf_i+0x112>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	07db      	lsls	r3, r3, #31
 80052ca:	d508      	bpl.n	80052de <_printf_i+0x112>
 80052cc:	6923      	ldr	r3, [r4, #16]
 80052ce:	6862      	ldr	r2, [r4, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	bfde      	ittt	le
 80052d4:	2330      	movle	r3, #48	; 0x30
 80052d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052de:	ebac 0305 	sub.w	r3, ip, r5
 80052e2:	6123      	str	r3, [r4, #16]
 80052e4:	f8cd 8000 	str.w	r8, [sp]
 80052e8:	463b      	mov	r3, r7
 80052ea:	aa03      	add	r2, sp, #12
 80052ec:	4621      	mov	r1, r4
 80052ee:	4630      	mov	r0, r6
 80052f0:	f7ff fef6 	bl	80050e0 <_printf_common>
 80052f4:	3001      	adds	r0, #1
 80052f6:	d14d      	bne.n	8005394 <_printf_i+0x1c8>
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	b005      	add	sp, #20
 80052fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005302:	4839      	ldr	r0, [pc, #228]	; (80053e8 <_printf_i+0x21c>)
 8005304:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005308:	6813      	ldr	r3, [r2, #0]
 800530a:	6821      	ldr	r1, [r4, #0]
 800530c:	1d1d      	adds	r5, r3, #4
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6015      	str	r5, [r2, #0]
 8005312:	060a      	lsls	r2, r1, #24
 8005314:	d50b      	bpl.n	800532e <_printf_i+0x162>
 8005316:	07ca      	lsls	r2, r1, #31
 8005318:	bf44      	itt	mi
 800531a:	f041 0120 	orrmi.w	r1, r1, #32
 800531e:	6021      	strmi	r1, [r4, #0]
 8005320:	b91b      	cbnz	r3, 800532a <_printf_i+0x15e>
 8005322:	6822      	ldr	r2, [r4, #0]
 8005324:	f022 0220 	bic.w	r2, r2, #32
 8005328:	6022      	str	r2, [r4, #0]
 800532a:	2210      	movs	r2, #16
 800532c:	e7b7      	b.n	800529e <_printf_i+0xd2>
 800532e:	064d      	lsls	r5, r1, #25
 8005330:	bf48      	it	mi
 8005332:	b29b      	uxthmi	r3, r3
 8005334:	e7ef      	b.n	8005316 <_printf_i+0x14a>
 8005336:	4665      	mov	r5, ip
 8005338:	fbb3 f1f2 	udiv	r1, r3, r2
 800533c:	fb02 3311 	mls	r3, r2, r1, r3
 8005340:	5cc3      	ldrb	r3, [r0, r3]
 8005342:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005346:	460b      	mov	r3, r1
 8005348:	2900      	cmp	r1, #0
 800534a:	d1f5      	bne.n	8005338 <_printf_i+0x16c>
 800534c:	e7b9      	b.n	80052c2 <_printf_i+0xf6>
 800534e:	6813      	ldr	r3, [r2, #0]
 8005350:	6825      	ldr	r5, [r4, #0]
 8005352:	1d18      	adds	r0, r3, #4
 8005354:	6961      	ldr	r1, [r4, #20]
 8005356:	6010      	str	r0, [r2, #0]
 8005358:	0628      	lsls	r0, r5, #24
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	d501      	bpl.n	8005362 <_printf_i+0x196>
 800535e:	6019      	str	r1, [r3, #0]
 8005360:	e002      	b.n	8005368 <_printf_i+0x19c>
 8005362:	066a      	lsls	r2, r5, #25
 8005364:	d5fb      	bpl.n	800535e <_printf_i+0x192>
 8005366:	8019      	strh	r1, [r3, #0]
 8005368:	2300      	movs	r3, #0
 800536a:	4665      	mov	r5, ip
 800536c:	6123      	str	r3, [r4, #16]
 800536e:	e7b9      	b.n	80052e4 <_printf_i+0x118>
 8005370:	6813      	ldr	r3, [r2, #0]
 8005372:	1d19      	adds	r1, r3, #4
 8005374:	6011      	str	r1, [r2, #0]
 8005376:	681d      	ldr	r5, [r3, #0]
 8005378:	6862      	ldr	r2, [r4, #4]
 800537a:	2100      	movs	r1, #0
 800537c:	4628      	mov	r0, r5
 800537e:	f000 f837 	bl	80053f0 <memchr>
 8005382:	b108      	cbz	r0, 8005388 <_printf_i+0x1bc>
 8005384:	1b40      	subs	r0, r0, r5
 8005386:	6060      	str	r0, [r4, #4]
 8005388:	6863      	ldr	r3, [r4, #4]
 800538a:	6123      	str	r3, [r4, #16]
 800538c:	2300      	movs	r3, #0
 800538e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005392:	e7a7      	b.n	80052e4 <_printf_i+0x118>
 8005394:	6923      	ldr	r3, [r4, #16]
 8005396:	462a      	mov	r2, r5
 8005398:	4639      	mov	r1, r7
 800539a:	4630      	mov	r0, r6
 800539c:	47c0      	blx	r8
 800539e:	3001      	adds	r0, #1
 80053a0:	d0aa      	beq.n	80052f8 <_printf_i+0x12c>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	079b      	lsls	r3, r3, #30
 80053a6:	d413      	bmi.n	80053d0 <_printf_i+0x204>
 80053a8:	68e0      	ldr	r0, [r4, #12]
 80053aa:	9b03      	ldr	r3, [sp, #12]
 80053ac:	4298      	cmp	r0, r3
 80053ae:	bfb8      	it	lt
 80053b0:	4618      	movlt	r0, r3
 80053b2:	e7a3      	b.n	80052fc <_printf_i+0x130>
 80053b4:	2301      	movs	r3, #1
 80053b6:	464a      	mov	r2, r9
 80053b8:	4639      	mov	r1, r7
 80053ba:	4630      	mov	r0, r6
 80053bc:	47c0      	blx	r8
 80053be:	3001      	adds	r0, #1
 80053c0:	d09a      	beq.n	80052f8 <_printf_i+0x12c>
 80053c2:	3501      	adds	r5, #1
 80053c4:	68e3      	ldr	r3, [r4, #12]
 80053c6:	9a03      	ldr	r2, [sp, #12]
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	42ab      	cmp	r3, r5
 80053cc:	dcf2      	bgt.n	80053b4 <_printf_i+0x1e8>
 80053ce:	e7eb      	b.n	80053a8 <_printf_i+0x1dc>
 80053d0:	2500      	movs	r5, #0
 80053d2:	f104 0919 	add.w	r9, r4, #25
 80053d6:	e7f5      	b.n	80053c4 <_printf_i+0x1f8>
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1ac      	bne.n	8005336 <_printf_i+0x16a>
 80053dc:	7803      	ldrb	r3, [r0, #0]
 80053de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053e6:	e76c      	b.n	80052c2 <_printf_i+0xf6>
 80053e8:	080065b9 	.word	0x080065b9
 80053ec:	080065ca 	.word	0x080065ca

080053f0 <memchr>:
 80053f0:	b510      	push	{r4, lr}
 80053f2:	b2c9      	uxtb	r1, r1
 80053f4:	4402      	add	r2, r0
 80053f6:	4290      	cmp	r0, r2
 80053f8:	4603      	mov	r3, r0
 80053fa:	d101      	bne.n	8005400 <memchr+0x10>
 80053fc:	2300      	movs	r3, #0
 80053fe:	e003      	b.n	8005408 <memchr+0x18>
 8005400:	781c      	ldrb	r4, [r3, #0]
 8005402:	3001      	adds	r0, #1
 8005404:	428c      	cmp	r4, r1
 8005406:	d1f6      	bne.n	80053f6 <memchr+0x6>
 8005408:	4618      	mov	r0, r3
 800540a:	bd10      	pop	{r4, pc}

0800540c <memcpy>:
 800540c:	b510      	push	{r4, lr}
 800540e:	1e43      	subs	r3, r0, #1
 8005410:	440a      	add	r2, r1
 8005412:	4291      	cmp	r1, r2
 8005414:	d100      	bne.n	8005418 <memcpy+0xc>
 8005416:	bd10      	pop	{r4, pc}
 8005418:	f811 4b01 	ldrb.w	r4, [r1], #1
 800541c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005420:	e7f7      	b.n	8005412 <memcpy+0x6>

08005422 <memmove>:
 8005422:	4288      	cmp	r0, r1
 8005424:	b510      	push	{r4, lr}
 8005426:	eb01 0302 	add.w	r3, r1, r2
 800542a:	d807      	bhi.n	800543c <memmove+0x1a>
 800542c:	1e42      	subs	r2, r0, #1
 800542e:	4299      	cmp	r1, r3
 8005430:	d00a      	beq.n	8005448 <memmove+0x26>
 8005432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005436:	f802 4f01 	strb.w	r4, [r2, #1]!
 800543a:	e7f8      	b.n	800542e <memmove+0xc>
 800543c:	4283      	cmp	r3, r0
 800543e:	d9f5      	bls.n	800542c <memmove+0xa>
 8005440:	1881      	adds	r1, r0, r2
 8005442:	1ad2      	subs	r2, r2, r3
 8005444:	42d3      	cmn	r3, r2
 8005446:	d100      	bne.n	800544a <memmove+0x28>
 8005448:	bd10      	pop	{r4, pc}
 800544a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800544e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005452:	e7f7      	b.n	8005444 <memmove+0x22>

08005454 <_free_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4605      	mov	r5, r0
 8005458:	2900      	cmp	r1, #0
 800545a:	d043      	beq.n	80054e4 <_free_r+0x90>
 800545c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005460:	1f0c      	subs	r4, r1, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	bfb8      	it	lt
 8005466:	18e4      	addlt	r4, r4, r3
 8005468:	f000 f8d0 	bl	800560c <__malloc_lock>
 800546c:	4a1e      	ldr	r2, [pc, #120]	; (80054e8 <_free_r+0x94>)
 800546e:	6813      	ldr	r3, [r2, #0]
 8005470:	4610      	mov	r0, r2
 8005472:	b933      	cbnz	r3, 8005482 <_free_r+0x2e>
 8005474:	6063      	str	r3, [r4, #4]
 8005476:	6014      	str	r4, [r2, #0]
 8005478:	4628      	mov	r0, r5
 800547a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800547e:	f000 b8c6 	b.w	800560e <__malloc_unlock>
 8005482:	42a3      	cmp	r3, r4
 8005484:	d90b      	bls.n	800549e <_free_r+0x4a>
 8005486:	6821      	ldr	r1, [r4, #0]
 8005488:	1862      	adds	r2, r4, r1
 800548a:	4293      	cmp	r3, r2
 800548c:	bf01      	itttt	eq
 800548e:	681a      	ldreq	r2, [r3, #0]
 8005490:	685b      	ldreq	r3, [r3, #4]
 8005492:	1852      	addeq	r2, r2, r1
 8005494:	6022      	streq	r2, [r4, #0]
 8005496:	6063      	str	r3, [r4, #4]
 8005498:	6004      	str	r4, [r0, #0]
 800549a:	e7ed      	b.n	8005478 <_free_r+0x24>
 800549c:	4613      	mov	r3, r2
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	b10a      	cbz	r2, 80054a6 <_free_r+0x52>
 80054a2:	42a2      	cmp	r2, r4
 80054a4:	d9fa      	bls.n	800549c <_free_r+0x48>
 80054a6:	6819      	ldr	r1, [r3, #0]
 80054a8:	1858      	adds	r0, r3, r1
 80054aa:	42a0      	cmp	r0, r4
 80054ac:	d10b      	bne.n	80054c6 <_free_r+0x72>
 80054ae:	6820      	ldr	r0, [r4, #0]
 80054b0:	4401      	add	r1, r0
 80054b2:	1858      	adds	r0, r3, r1
 80054b4:	4282      	cmp	r2, r0
 80054b6:	6019      	str	r1, [r3, #0]
 80054b8:	d1de      	bne.n	8005478 <_free_r+0x24>
 80054ba:	6810      	ldr	r0, [r2, #0]
 80054bc:	6852      	ldr	r2, [r2, #4]
 80054be:	4401      	add	r1, r0
 80054c0:	6019      	str	r1, [r3, #0]
 80054c2:	605a      	str	r2, [r3, #4]
 80054c4:	e7d8      	b.n	8005478 <_free_r+0x24>
 80054c6:	d902      	bls.n	80054ce <_free_r+0x7a>
 80054c8:	230c      	movs	r3, #12
 80054ca:	602b      	str	r3, [r5, #0]
 80054cc:	e7d4      	b.n	8005478 <_free_r+0x24>
 80054ce:	6820      	ldr	r0, [r4, #0]
 80054d0:	1821      	adds	r1, r4, r0
 80054d2:	428a      	cmp	r2, r1
 80054d4:	bf01      	itttt	eq
 80054d6:	6811      	ldreq	r1, [r2, #0]
 80054d8:	6852      	ldreq	r2, [r2, #4]
 80054da:	1809      	addeq	r1, r1, r0
 80054dc:	6021      	streq	r1, [r4, #0]
 80054de:	6062      	str	r2, [r4, #4]
 80054e0:	605c      	str	r4, [r3, #4]
 80054e2:	e7c9      	b.n	8005478 <_free_r+0x24>
 80054e4:	bd38      	pop	{r3, r4, r5, pc}
 80054e6:	bf00      	nop
 80054e8:	200004a0 	.word	0x200004a0

080054ec <_malloc_r>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	1ccd      	adds	r5, r1, #3
 80054f0:	f025 0503 	bic.w	r5, r5, #3
 80054f4:	3508      	adds	r5, #8
 80054f6:	2d0c      	cmp	r5, #12
 80054f8:	bf38      	it	cc
 80054fa:	250c      	movcc	r5, #12
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	4606      	mov	r6, r0
 8005500:	db01      	blt.n	8005506 <_malloc_r+0x1a>
 8005502:	42a9      	cmp	r1, r5
 8005504:	d903      	bls.n	800550e <_malloc_r+0x22>
 8005506:	230c      	movs	r3, #12
 8005508:	6033      	str	r3, [r6, #0]
 800550a:	2000      	movs	r0, #0
 800550c:	bd70      	pop	{r4, r5, r6, pc}
 800550e:	f000 f87d 	bl	800560c <__malloc_lock>
 8005512:	4a21      	ldr	r2, [pc, #132]	; (8005598 <_malloc_r+0xac>)
 8005514:	6814      	ldr	r4, [r2, #0]
 8005516:	4621      	mov	r1, r4
 8005518:	b991      	cbnz	r1, 8005540 <_malloc_r+0x54>
 800551a:	4c20      	ldr	r4, [pc, #128]	; (800559c <_malloc_r+0xb0>)
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	b91b      	cbnz	r3, 8005528 <_malloc_r+0x3c>
 8005520:	4630      	mov	r0, r6
 8005522:	f000 f863 	bl	80055ec <_sbrk_r>
 8005526:	6020      	str	r0, [r4, #0]
 8005528:	4629      	mov	r1, r5
 800552a:	4630      	mov	r0, r6
 800552c:	f000 f85e 	bl	80055ec <_sbrk_r>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d124      	bne.n	800557e <_malloc_r+0x92>
 8005534:	230c      	movs	r3, #12
 8005536:	4630      	mov	r0, r6
 8005538:	6033      	str	r3, [r6, #0]
 800553a:	f000 f868 	bl	800560e <__malloc_unlock>
 800553e:	e7e4      	b.n	800550a <_malloc_r+0x1e>
 8005540:	680b      	ldr	r3, [r1, #0]
 8005542:	1b5b      	subs	r3, r3, r5
 8005544:	d418      	bmi.n	8005578 <_malloc_r+0x8c>
 8005546:	2b0b      	cmp	r3, #11
 8005548:	d90f      	bls.n	800556a <_malloc_r+0x7e>
 800554a:	600b      	str	r3, [r1, #0]
 800554c:	18cc      	adds	r4, r1, r3
 800554e:	50cd      	str	r5, [r1, r3]
 8005550:	4630      	mov	r0, r6
 8005552:	f000 f85c 	bl	800560e <__malloc_unlock>
 8005556:	f104 000b 	add.w	r0, r4, #11
 800555a:	1d23      	adds	r3, r4, #4
 800555c:	f020 0007 	bic.w	r0, r0, #7
 8005560:	1ac3      	subs	r3, r0, r3
 8005562:	d0d3      	beq.n	800550c <_malloc_r+0x20>
 8005564:	425a      	negs	r2, r3
 8005566:	50e2      	str	r2, [r4, r3]
 8005568:	e7d0      	b.n	800550c <_malloc_r+0x20>
 800556a:	684b      	ldr	r3, [r1, #4]
 800556c:	428c      	cmp	r4, r1
 800556e:	bf16      	itet	ne
 8005570:	6063      	strne	r3, [r4, #4]
 8005572:	6013      	streq	r3, [r2, #0]
 8005574:	460c      	movne	r4, r1
 8005576:	e7eb      	b.n	8005550 <_malloc_r+0x64>
 8005578:	460c      	mov	r4, r1
 800557a:	6849      	ldr	r1, [r1, #4]
 800557c:	e7cc      	b.n	8005518 <_malloc_r+0x2c>
 800557e:	1cc4      	adds	r4, r0, #3
 8005580:	f024 0403 	bic.w	r4, r4, #3
 8005584:	42a0      	cmp	r0, r4
 8005586:	d005      	beq.n	8005594 <_malloc_r+0xa8>
 8005588:	1a21      	subs	r1, r4, r0
 800558a:	4630      	mov	r0, r6
 800558c:	f000 f82e 	bl	80055ec <_sbrk_r>
 8005590:	3001      	adds	r0, #1
 8005592:	d0cf      	beq.n	8005534 <_malloc_r+0x48>
 8005594:	6025      	str	r5, [r4, #0]
 8005596:	e7db      	b.n	8005550 <_malloc_r+0x64>
 8005598:	200004a0 	.word	0x200004a0
 800559c:	200004a4 	.word	0x200004a4

080055a0 <_realloc_r>:
 80055a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a2:	4607      	mov	r7, r0
 80055a4:	4614      	mov	r4, r2
 80055a6:	460e      	mov	r6, r1
 80055a8:	b921      	cbnz	r1, 80055b4 <_realloc_r+0x14>
 80055aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055ae:	4611      	mov	r1, r2
 80055b0:	f7ff bf9c 	b.w	80054ec <_malloc_r>
 80055b4:	b922      	cbnz	r2, 80055c0 <_realloc_r+0x20>
 80055b6:	f7ff ff4d 	bl	8005454 <_free_r>
 80055ba:	4625      	mov	r5, r4
 80055bc:	4628      	mov	r0, r5
 80055be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055c0:	f000 f826 	bl	8005610 <_malloc_usable_size_r>
 80055c4:	42a0      	cmp	r0, r4
 80055c6:	d20f      	bcs.n	80055e8 <_realloc_r+0x48>
 80055c8:	4621      	mov	r1, r4
 80055ca:	4638      	mov	r0, r7
 80055cc:	f7ff ff8e 	bl	80054ec <_malloc_r>
 80055d0:	4605      	mov	r5, r0
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d0f2      	beq.n	80055bc <_realloc_r+0x1c>
 80055d6:	4631      	mov	r1, r6
 80055d8:	4622      	mov	r2, r4
 80055da:	f7ff ff17 	bl	800540c <memcpy>
 80055de:	4631      	mov	r1, r6
 80055e0:	4638      	mov	r0, r7
 80055e2:	f7ff ff37 	bl	8005454 <_free_r>
 80055e6:	e7e9      	b.n	80055bc <_realloc_r+0x1c>
 80055e8:	4635      	mov	r5, r6
 80055ea:	e7e7      	b.n	80055bc <_realloc_r+0x1c>

080055ec <_sbrk_r>:
 80055ec:	b538      	push	{r3, r4, r5, lr}
 80055ee:	2300      	movs	r3, #0
 80055f0:	4c05      	ldr	r4, [pc, #20]	; (8005608 <_sbrk_r+0x1c>)
 80055f2:	4605      	mov	r5, r0
 80055f4:	4608      	mov	r0, r1
 80055f6:	6023      	str	r3, [r4, #0]
 80055f8:	f7fd f85c 	bl	80026b4 <_sbrk>
 80055fc:	1c43      	adds	r3, r0, #1
 80055fe:	d102      	bne.n	8005606 <_sbrk_r+0x1a>
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	b103      	cbz	r3, 8005606 <_sbrk_r+0x1a>
 8005604:	602b      	str	r3, [r5, #0]
 8005606:	bd38      	pop	{r3, r4, r5, pc}
 8005608:	20000514 	.word	0x20000514

0800560c <__malloc_lock>:
 800560c:	4770      	bx	lr

0800560e <__malloc_unlock>:
 800560e:	4770      	bx	lr

08005610 <_malloc_usable_size_r>:
 8005610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005614:	1f18      	subs	r0, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	bfbc      	itt	lt
 800561a:	580b      	ldrlt	r3, [r1, r0]
 800561c:	18c0      	addlt	r0, r0, r3
 800561e:	4770      	bx	lr

08005620 <_init>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr

0800562c <_fini>:
 800562c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562e:	bf00      	nop
 8005630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005632:	bc08      	pop	{r3}
 8005634:	469e      	mov	lr, r3
 8005636:	4770      	bx	lr
